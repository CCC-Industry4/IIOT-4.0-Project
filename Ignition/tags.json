{
  "name": "",
  "tagType": "Provider",
  "tags": [
    {
      "name": "MQTT Tags",
      "tagType": "Folder",
      "tags": [
        {
          "out3": false,
          "name": "thing8",
          "typeId": "thing",
          "tagType": "UdtInstance",
          "tags": [
            {
              "name": "in",
              "tagType": "Folder",
              "tags": [
                {
                  "name": "in1",
                  "tagType": "AtomicTag"
                },
                {
                  "name": "sensor2",
                  "tagType": "AtomicTag"
                },
                {
                  "name": "sensor1",
                  "tagType": "AtomicTag"
                }
              ]
            },
            {
              "name": "count",
              "tagType": "AtomicTag"
            },
            {
              "name": "out",
              "tagType": "Folder",
              "tags": [
                {
                  "eventScripts": [
                    {
                      "eventid": "valueChanged",
                      "script": "\t# Extract the UDT instance name from the tag path\n\tudt_instance_name \u003d \u0027/\u0027.join(tagPath.split(\"/\")[-3:])\n\t\n\t# Read the namespace from the default provider\n\tnamespace_tag_path \u003d \"[default]namespace\"\n\tnamespace_value \u003d system.tag.read(namespace_tag_path).value\n\t\n\t# Construct the MQTT topic using the UDT instance name\n\tmqtt_topic \u003d namespace_value + udt_instance_name\n\t\n\t# Publish the current value to the MQTT topic\n\tsystem.cirruslink.engine.publish(\"Pi\", mqtt_topic, str(currentValue.value),0,0)\n\t"
                    }
                  ],
                  "value": false,
                  "name": "out1",
                  "tagType": "AtomicTag"
                },
                {
                  "eventScripts": [
                    {
                      "eventid": "valueChanged",
                      "script": "\t# Extract the UDT instance name from the tag path\n\tudt_instance_name \u003d \u0027/\u0027.join(tagPath.split(\"/\")[-3:])\n\t\n\t# Read the namespace from the default provider\n\tnamespace_tag_path \u003d \"[default]namespace\"\n\tnamespace_value \u003d system.tag.read(namespace_tag_path).value\n\t\n\t# Construct the MQTT topic using the UDT instance name\n\tmqtt_topic \u003d namespace_value + udt_instance_name\n\t\n\t# Publish the current value to the MQTT topic\n\tsystem.cirruslink.engine.publish(\"Pi\", mqtt_topic, str(currentValue.value),0,0)\n"
                    }
                  ],
                  "value": 0,
                  "name": "stepperStep",
                  "tagType": "AtomicTag"
                },
                {
                  "eventScripts": [
                    {
                      "eventid": "valueChanged",
                      "script": "\t# Extract the UDT instance name from the tag path\n\tudt_instance_name \u003d \u0027/\u0027.join(tagPath.split(\"/\")[-3:])\n\t\n\t# Read the namespace from the default provider\n\tnamespace_tag_path \u003d \"[default]namespace\"\n\tnamespace_value \u003d system.tag.read(namespace_tag_path).value\n\t\n\t# Construct the MQTT topic using the UDT instance name\n\tmqtt_topic \u003d namespace_value + udt_instance_name\n\t\n\t# Publish the current value to the MQTT topic\n\tsystem.cirruslink.engine.publish(\"Pi\", mqtt_topic, str(currentValue.value),0,0)\n"
                    }
                  ],
                  "value": false,
                  "name": "out4",
                  "tagType": "AtomicTag"
                },
                {
                  "eventScripts": [
                    {
                      "eventid": "valueChanged",
                      "script": "\t# Extract the UDT instance name from the tag path\n\tudt_instance_name \u003d \u0027/\u0027.join(tagPath.split(\"/\")[-3:])\n\t\n\t# Read the namespace from the default provider\n\tnamespace_tag_path \u003d \"[default]namespace\"\n\tnamespace_value \u003d system.tag.read(namespace_tag_path).value\n\t\n\t# Construct the MQTT topic using the UDT instance name\n\tmqtt_topic \u003d namespace_value + udt_instance_name\n\t\n\t# Publish the current value to the MQTT topic\n\tsystem.cirruslink.engine.publish(\"Pi\", mqtt_topic, str(currentValue.value),0,0)\n"
                    }
                  ],
                  "value": 20,
                  "name": "stepperSpeed",
                  "tagType": "AtomicTag"
                },
                {
                  "eventScripts": [
                    {
                      "eventid": "valueChanged",
                      "script": "\t# Extract the UDT instance name from the tag path\n\tudt_instance_name \u003d \u0027/\u0027.join(tagPath.split(\"/\")[-3:])\n\t\n\t# Read the namespace from the default provider\n\tnamespace_tag_path \u003d \"[default]namespace\"\n\tnamespace_value \u003d system.tag.read(namespace_tag_path).value\n\t\n\t# Construct the MQTT topic using the UDT instance name\n\tmqtt_topic \u003d namespace_value + udt_instance_name\n\t\n\t# Publish the current value to the MQTT topic\n\tsystem.cirruslink.engine.publish(\"Pi\", mqtt_topic, str(currentValue.value),0,0)\n"
                    }
                  ],
                  "value": false,
                  "name": "out2",
                  "tagType": "AtomicTag"
                },
                {
                  "eventScripts": [
                    {
                      "eventid": "valueChanged",
                      "script": "\t# Extract the UDT instance name from the tag path\n\tudt_instance_name \u003d \u0027/\u0027.join(tagPath.split(\"/\")[-3:])\n\t\n\t# Read the namespace from the default provider\n\tnamespace_tag_path \u003d \"[default]namespace\"\n\tnamespace_value \u003d system.tag.read(namespace_tag_path).value\n\t\n\t# Construct the MQTT topic using the UDT instance name\n\tmqtt_topic \u003d namespace_value + udt_instance_name\n\t\n\t# Publish the current value to the MQTT topic\n\tsystem.cirruslink.engine.publish(\"Pi\", mqtt_topic, str(currentValue.value),0,0)\n"
                    }
                  ],
                  "value": false,
                  "name": "out3",
                  "tagType": "AtomicTag"
                },
                {
                  "eventScripts": [
                    {
                      "eventid": "valueChanged",
                      "script": "\t# Extract the UDT instance name from the tag path\n\tudt_instance_name \u003d \u0027/\u0027.join(tagPath.split(\"/\")[-3:])\n\t\n\t# Read the namespace from the default provider\n\tnamespace_tag_path \u003d \"[default]namespace\"\n\tnamespace_value \u003d system.tag.read(namespace_tag_path).value\n\t\n\t# Construct the MQTT topic using the UDT instance name\n\tmqtt_topic \u003d namespace_value + udt_instance_name\n\t\n\t# Publish the current value to the MQTT topic\n\tsystem.cirruslink.engine.publish(\"Pi\", mqtt_topic, str(currentValue.value),0,0)\n"
                    }
                  ],
                  "value": "null",
                  "name": "message",
                  "tagType": "AtomicTag"
                }
              ]
            }
          ]
        },
        {
          "out3": false,
          "name": "thing30",
          "typeId": "thing",
          "tagType": "UdtInstance",
          "tags": [
            {
              "name": "out",
              "tagType": "Folder",
              "tags": [
                {
                  "eventScripts": [
                    {
                      "eventid": "valueChanged",
                      "script": "\t# Extract the UDT instance name from the tag path\n\tudt_instance_name \u003d \u0027/\u0027.join(tagPath.split(\"/\")[-3:])\n\t\n\t# Read the namespace from the default provider\n\tnamespace_tag_path \u003d \"[default]namespace\"\n\tnamespace_value \u003d system.tag.read(namespace_tag_path).value\n\t\n\t# Construct the MQTT topic using the UDT instance name\n\tmqtt_topic \u003d namespace_value + udt_instance_name\n\t\n\t# Publish the current value to the MQTT topic\n\tsystem.cirruslink.engine.publish(\"Pi\", mqtt_topic, str(currentValue.value),0,0)\n"
                    }
                  ],
                  "value": 20,
                  "name": "stepperSpeed",
                  "tagType": "AtomicTag"
                },
                {
                  "eventScripts": [
                    {
                      "eventid": "valueChanged",
                      "script": "\t# Extract the UDT instance name from the tag path\n\tudt_instance_name \u003d \u0027/\u0027.join(tagPath.split(\"/\")[-3:])\n\t\n\t# Read the namespace from the default provider\n\tnamespace_tag_path \u003d \"[default]namespace\"\n\tnamespace_value \u003d system.tag.read(namespace_tag_path).value\n\t\n\t# Construct the MQTT topic using the UDT instance name\n\tmqtt_topic \u003d namespace_value + udt_instance_name\n\t\n\t# Publish the current value to the MQTT topic\n\tsystem.cirruslink.engine.publish(\"Pi\", mqtt_topic, str(currentValue.value),0,0)\n\t"
                    }
                  ],
                  "value": false,
                  "name": "out1",
                  "tagType": "AtomicTag"
                },
                {
                  "eventScripts": [
                    {
                      "eventid": "valueChanged",
                      "script": "\t# Extract the UDT instance name from the tag path\n\tudt_instance_name \u003d \u0027/\u0027.join(tagPath.split(\"/\")[-3:])\n\t\n\t# Read the namespace from the default provider\n\tnamespace_tag_path \u003d \"[default]namespace\"\n\tnamespace_value \u003d system.tag.read(namespace_tag_path).value\n\t\n\t# Construct the MQTT topic using the UDT instance name\n\tmqtt_topic \u003d namespace_value + udt_instance_name\n\t\n\t# Publish the current value to the MQTT topic\n\tsystem.cirruslink.engine.publish(\"Pi\", mqtt_topic, str(currentValue.value),0,0)\n"
                    }
                  ],
                  "value": false,
                  "name": "out3",
                  "tagType": "AtomicTag"
                },
                {
                  "eventScripts": [
                    {
                      "eventid": "valueChanged",
                      "script": "\t# Extract the UDT instance name from the tag path\n\tudt_instance_name \u003d \u0027/\u0027.join(tagPath.split(\"/\")[-3:])\n\t\n\t# Read the namespace from the default provider\n\tnamespace_tag_path \u003d \"[default]namespace\"\n\tnamespace_value \u003d system.tag.read(namespace_tag_path).value\n\t\n\t# Construct the MQTT topic using the UDT instance name\n\tmqtt_topic \u003d namespace_value + udt_instance_name\n\t\n\t# Publish the current value to the MQTT topic\n\tsystem.cirruslink.engine.publish(\"Pi\", mqtt_topic, str(currentValue.value),0,0)\n"
                    }
                  ],
                  "value": -2000,
                  "name": "stepperStep",
                  "tagType": "AtomicTag"
                },
                {
                  "eventScripts": [
                    {
                      "eventid": "valueChanged",
                      "script": "\t# Extract the UDT instance name from the tag path\n\tudt_instance_name \u003d \u0027/\u0027.join(tagPath.split(\"/\")[-3:])\n\t\n\t# Read the namespace from the default provider\n\tnamespace_tag_path \u003d \"[default]namespace\"\n\tnamespace_value \u003d system.tag.read(namespace_tag_path).value\n\t\n\t# Construct the MQTT topic using the UDT instance name\n\tmqtt_topic \u003d namespace_value + udt_instance_name\n\t\n\t# Publish the current value to the MQTT topic\n\tsystem.cirruslink.engine.publish(\"Pi\", mqtt_topic, str(currentValue.value),0,0)\n"
                    }
                  ],
                  "value": "null",
                  "name": "message",
                  "tagType": "AtomicTag"
                },
                {
                  "eventScripts": [
                    {
                      "eventid": "valueChanged",
                      "script": "\t# Extract the UDT instance name from the tag path\n\tudt_instance_name \u003d \u0027/\u0027.join(tagPath.split(\"/\")[-3:])\n\t\n\t# Read the namespace from the default provider\n\tnamespace_tag_path \u003d \"[default]namespace\"\n\tnamespace_value \u003d system.tag.read(namespace_tag_path).value\n\t\n\t# Construct the MQTT topic using the UDT instance name\n\tmqtt_topic \u003d namespace_value + udt_instance_name\n\t\n\t# Publish the current value to the MQTT topic\n\tsystem.cirruslink.engine.publish(\"Pi\", mqtt_topic, str(currentValue.value),0,0)\n"
                    }
                  ],
                  "value": false,
                  "name": "out4",
                  "tagType": "AtomicTag"
                },
                {
                  "eventScripts": [
                    {
                      "eventid": "valueChanged",
                      "script": "\t# Extract the UDT instance name from the tag path\n\tudt_instance_name \u003d \u0027/\u0027.join(tagPath.split(\"/\")[-3:])\n\t\n\t# Read the namespace from the default provider\n\tnamespace_tag_path \u003d \"[default]namespace\"\n\tnamespace_value \u003d system.tag.read(namespace_tag_path).value\n\t\n\t# Construct the MQTT topic using the UDT instance name\n\tmqtt_topic \u003d namespace_value + udt_instance_name\n\t\n\t# Publish the current value to the MQTT topic\n\tsystem.cirruslink.engine.publish(\"Pi\", mqtt_topic, str(currentValue.value),0,0)\n"
                    }
                  ],
                  "value": false,
                  "name": "out2",
                  "tagType": "AtomicTag"
                }
              ]
            },
            {
              "name": "in",
              "tagType": "Folder",
              "tags": [
                {
                  "name": "sensor1",
                  "tagType": "AtomicTag"
                },
                {
                  "name": "in1",
                  "tagType": "AtomicTag"
                },
                {
                  "name": "sensor2",
                  "tagType": "AtomicTag"
                }
              ]
            },
            {
              "name": "count",
              "tagType": "AtomicTag"
            }
          ]
        },
        {
          "out3": false,
          "name": "thing24",
          "typeId": "thing",
          "tagType": "UdtInstance",
          "tags": [
            {
              "name": "in",
              "tagType": "Folder",
              "tags": [
                {
                  "name": "in1",
                  "tagType": "AtomicTag"
                },
                {
                  "name": "sensor1",
                  "tagType": "AtomicTag"
                },
                {
                  "name": "sensor2",
                  "tagType": "AtomicTag"
                }
              ]
            },
            {
              "name": "out",
              "tagType": "Folder",
              "tags": [
                {
                  "eventScripts": [
                    {
                      "eventid": "valueChanged",
                      "script": "\t# Extract the UDT instance name from the tag path\n\tudt_instance_name \u003d \u0027/\u0027.join(tagPath.split(\"/\")[-3:])\n\t\n\t# Read the namespace from the default provider\n\tnamespace_tag_path \u003d \"[default]namespace\"\n\tnamespace_value \u003d system.tag.read(namespace_tag_path).value\n\t\n\t# Construct the MQTT topic using the UDT instance name\n\tmqtt_topic \u003d namespace_value + udt_instance_name\n\t\n\t# Publish the current value to the MQTT topic\n\tsystem.cirruslink.engine.publish(\"Pi\", mqtt_topic, str(currentValue.value),0,0)\n"
                    }
                  ],
                  "value": -2000,
                  "name": "stepperStep",
                  "tagType": "AtomicTag"
                },
                {
                  "eventScripts": [
                    {
                      "eventid": "valueChanged",
                      "script": "\t# Extract the UDT instance name from the tag path\n\tudt_instance_name \u003d \u0027/\u0027.join(tagPath.split(\"/\")[-3:])\n\t\n\t# Read the namespace from the default provider\n\tnamespace_tag_path \u003d \"[default]namespace\"\n\tnamespace_value \u003d system.tag.read(namespace_tag_path).value\n\t\n\t# Construct the MQTT topic using the UDT instance name\n\tmqtt_topic \u003d namespace_value + udt_instance_name\n\t\n\t# Publish the current value to the MQTT topic\n\tsystem.cirruslink.engine.publish(\"Pi\", mqtt_topic, str(currentValue.value),0,0)\n"
                    }
                  ],
                  "value": "null",
                  "name": "message",
                  "tagType": "AtomicTag"
                },
                {
                  "eventScripts": [
                    {
                      "eventid": "valueChanged",
                      "script": "\t# Extract the UDT instance name from the tag path\n\tudt_instance_name \u003d \u0027/\u0027.join(tagPath.split(\"/\")[-3:])\n\t\n\t# Read the namespace from the default provider\n\tnamespace_tag_path \u003d \"[default]namespace\"\n\tnamespace_value \u003d system.tag.read(namespace_tag_path).value\n\t\n\t# Construct the MQTT topic using the UDT instance name\n\tmqtt_topic \u003d namespace_value + udt_instance_name\n\t\n\t# Publish the current value to the MQTT topic\n\tsystem.cirruslink.engine.publish(\"Pi\", mqtt_topic, str(currentValue.value),0,0)\n"
                    }
                  ],
                  "value": false,
                  "name": "out2",
                  "tagType": "AtomicTag"
                },
                {
                  "eventScripts": [
                    {
                      "eventid": "valueChanged",
                      "script": "\t# Extract the UDT instance name from the tag path\n\tudt_instance_name \u003d \u0027/\u0027.join(tagPath.split(\"/\")[-3:])\n\t\n\t# Read the namespace from the default provider\n\tnamespace_tag_path \u003d \"[default]namespace\"\n\tnamespace_value \u003d system.tag.read(namespace_tag_path).value\n\t\n\t# Construct the MQTT topic using the UDT instance name\n\tmqtt_topic \u003d namespace_value + udt_instance_name\n\t\n\t# Publish the current value to the MQTT topic\n\tsystem.cirruslink.engine.publish(\"Pi\", mqtt_topic, str(currentValue.value),0,0)\n"
                    }
                  ],
                  "value": 20,
                  "name": "stepperSpeed",
                  "tagType": "AtomicTag"
                },
                {
                  "eventScripts": [
                    {
                      "eventid": "valueChanged",
                      "script": "\t# Extract the UDT instance name from the tag path\n\tudt_instance_name \u003d \u0027/\u0027.join(tagPath.split(\"/\")[-3:])\n\t\n\t# Read the namespace from the default provider\n\tnamespace_tag_path \u003d \"[default]namespace\"\n\tnamespace_value \u003d system.tag.read(namespace_tag_path).value\n\t\n\t# Construct the MQTT topic using the UDT instance name\n\tmqtt_topic \u003d namespace_value + udt_instance_name\n\t\n\t# Publish the current value to the MQTT topic\n\tsystem.cirruslink.engine.publish(\"Pi\", mqtt_topic, str(currentValue.value),0,0)\n"
                    }
                  ],
                  "value": false,
                  "name": "out3",
                  "tagType": "AtomicTag"
                },
                {
                  "eventScripts": [
                    {
                      "eventid": "valueChanged",
                      "script": "\t# Extract the UDT instance name from the tag path\n\tudt_instance_name \u003d \u0027/\u0027.join(tagPath.split(\"/\")[-3:])\n\t\n\t# Read the namespace from the default provider\n\tnamespace_tag_path \u003d \"[default]namespace\"\n\tnamespace_value \u003d system.tag.read(namespace_tag_path).value\n\t\n\t# Construct the MQTT topic using the UDT instance name\n\tmqtt_topic \u003d namespace_value + udt_instance_name\n\t\n\t# Publish the current value to the MQTT topic\n\tsystem.cirruslink.engine.publish(\"Pi\", mqtt_topic, str(currentValue.value),0,0)\n\t"
                    }
                  ],
                  "value": false,
                  "name": "out1",
                  "tagType": "AtomicTag"
                },
                {
                  "eventScripts": [
                    {
                      "eventid": "valueChanged",
                      "script": "\t# Extract the UDT instance name from the tag path\n\tudt_instance_name \u003d \u0027/\u0027.join(tagPath.split(\"/\")[-3:])\n\t\n\t# Read the namespace from the default provider\n\tnamespace_tag_path \u003d \"[default]namespace\"\n\tnamespace_value \u003d system.tag.read(namespace_tag_path).value\n\t\n\t# Construct the MQTT topic using the UDT instance name\n\tmqtt_topic \u003d namespace_value + udt_instance_name\n\t\n\t# Publish the current value to the MQTT topic\n\tsystem.cirruslink.engine.publish(\"Pi\", mqtt_topic, str(currentValue.value),0,0)\n"
                    }
                  ],
                  "value": false,
                  "name": "out4",
                  "tagType": "AtomicTag"
                }
              ]
            },
            {
              "name": "count",
              "tagType": "AtomicTag"
            }
          ]
        },
        {
          "out3": false,
          "name": "thing28",
          "typeId": "thing",
          "tagType": "UdtInstance",
          "tags": [
            {
              "name": "out",
              "tagType": "Folder",
              "tags": [
                {
                  "eventScripts": [
                    {
                      "eventid": "valueChanged",
                      "script": "\t# Extract the UDT instance name from the tag path\n\tudt_instance_name \u003d \u0027/\u0027.join(tagPath.split(\"/\")[-3:])\n\t\n\t# Read the namespace from the default provider\n\tnamespace_tag_path \u003d \"[default]namespace\"\n\tnamespace_value \u003d system.tag.read(namespace_tag_path).value\n\t\n\t# Construct the MQTT topic using the UDT instance name\n\tmqtt_topic \u003d namespace_value + udt_instance_name\n\t\n\t# Publish the current value to the MQTT topic\n\tsystem.cirruslink.engine.publish(\"Pi\", mqtt_topic, str(currentValue.value),0,0)\n"
                    }
                  ],
                  "value": false,
                  "name": "out3",
                  "tagType": "AtomicTag"
                },
                {
                  "eventScripts": [
                    {
                      "eventid": "valueChanged",
                      "script": "\t# Extract the UDT instance name from the tag path\n\tudt_instance_name \u003d \u0027/\u0027.join(tagPath.split(\"/\")[-3:])\n\t\n\t# Read the namespace from the default provider\n\tnamespace_tag_path \u003d \"[default]namespace\"\n\tnamespace_value \u003d system.tag.read(namespace_tag_path).value\n\t\n\t# Construct the MQTT topic using the UDT instance name\n\tmqtt_topic \u003d namespace_value + udt_instance_name\n\t\n\t# Publish the current value to the MQTT topic\n\tsystem.cirruslink.engine.publish(\"Pi\", mqtt_topic, str(currentValue.value),0,0)\n"
                    }
                  ],
                  "value": -2000,
                  "name": "stepperStep",
                  "tagType": "AtomicTag"
                },
                {
                  "eventScripts": [
                    {
                      "eventid": "valueChanged",
                      "script": "\t# Extract the UDT instance name from the tag path\n\tudt_instance_name \u003d \u0027/\u0027.join(tagPath.split(\"/\")[-3:])\n\t\n\t# Read the namespace from the default provider\n\tnamespace_tag_path \u003d \"[default]namespace\"\n\tnamespace_value \u003d system.tag.read(namespace_tag_path).value\n\t\n\t# Construct the MQTT topic using the UDT instance name\n\tmqtt_topic \u003d namespace_value + udt_instance_name\n\t\n\t# Publish the current value to the MQTT topic\n\tsystem.cirruslink.engine.publish(\"Pi\", mqtt_topic, str(currentValue.value),0,0)\n"
                    }
                  ],
                  "value": "null",
                  "name": "message",
                  "tagType": "AtomicTag"
                },
                {
                  "eventScripts": [
                    {
                      "eventid": "valueChanged",
                      "script": "\t# Extract the UDT instance name from the tag path\n\tudt_instance_name \u003d \u0027/\u0027.join(tagPath.split(\"/\")[-3:])\n\t\n\t# Read the namespace from the default provider\n\tnamespace_tag_path \u003d \"[default]namespace\"\n\tnamespace_value \u003d system.tag.read(namespace_tag_path).value\n\t\n\t# Construct the MQTT topic using the UDT instance name\n\tmqtt_topic \u003d namespace_value + udt_instance_name\n\t\n\t# Publish the current value to the MQTT topic\n\tsystem.cirruslink.engine.publish(\"Pi\", mqtt_topic, str(currentValue.value),0,0)\n"
                    }
                  ],
                  "value": false,
                  "name": "out4",
                  "tagType": "AtomicTag"
                },
                {
                  "eventScripts": [
                    {
                      "eventid": "valueChanged",
                      "script": "\t# Extract the UDT instance name from the tag path\n\tudt_instance_name \u003d \u0027/\u0027.join(tagPath.split(\"/\")[-3:])\n\t\n\t# Read the namespace from the default provider\n\tnamespace_tag_path \u003d \"[default]namespace\"\n\tnamespace_value \u003d system.tag.read(namespace_tag_path).value\n\t\n\t# Construct the MQTT topic using the UDT instance name\n\tmqtt_topic \u003d namespace_value + udt_instance_name\n\t\n\t# Publish the current value to the MQTT topic\n\tsystem.cirruslink.engine.publish(\"Pi\", mqtt_topic, str(currentValue.value),0,0)\n\t"
                    }
                  ],
                  "value": false,
                  "name": "out1",
                  "tagType": "AtomicTag"
                },
                {
                  "eventScripts": [
                    {
                      "eventid": "valueChanged",
                      "script": "\t# Extract the UDT instance name from the tag path\n\tudt_instance_name \u003d \u0027/\u0027.join(tagPath.split(\"/\")[-3:])\n\t\n\t# Read the namespace from the default provider\n\tnamespace_tag_path \u003d \"[default]namespace\"\n\tnamespace_value \u003d system.tag.read(namespace_tag_path).value\n\t\n\t# Construct the MQTT topic using the UDT instance name\n\tmqtt_topic \u003d namespace_value + udt_instance_name\n\t\n\t# Publish the current value to the MQTT topic\n\tsystem.cirruslink.engine.publish(\"Pi\", mqtt_topic, str(currentValue.value),0,0)\n"
                    }
                  ],
                  "value": false,
                  "name": "out2",
                  "tagType": "AtomicTag"
                },
                {
                  "eventScripts": [
                    {
                      "eventid": "valueChanged",
                      "script": "\t# Extract the UDT instance name from the tag path\n\tudt_instance_name \u003d \u0027/\u0027.join(tagPath.split(\"/\")[-3:])\n\t\n\t# Read the namespace from the default provider\n\tnamespace_tag_path \u003d \"[default]namespace\"\n\tnamespace_value \u003d system.tag.read(namespace_tag_path).value\n\t\n\t# Construct the MQTT topic using the UDT instance name\n\tmqtt_topic \u003d namespace_value + udt_instance_name\n\t\n\t# Publish the current value to the MQTT topic\n\tsystem.cirruslink.engine.publish(\"Pi\", mqtt_topic, str(currentValue.value),0,0)\n"
                    }
                  ],
                  "value": 20,
                  "name": "stepperSpeed",
                  "tagType": "AtomicTag"
                }
              ]
            },
            {
              "name": "in",
              "tagType": "Folder",
              "tags": [
                {
                  "name": "sensor1",
                  "tagType": "AtomicTag"
                },
                {
                  "name": "in1",
                  "tagType": "AtomicTag"
                },
                {
                  "name": "sensor2",
                  "tagType": "AtomicTag"
                }
              ]
            },
            {
              "name": "count",
              "tagType": "AtomicTag"
            }
          ]
        },
        {
          "out3": false,
          "name": "thing22",
          "typeId": "thing",
          "tagType": "UdtInstance",
          "tags": [
            {
              "name": "out",
              "tagType": "Folder",
              "tags": [
                {
                  "eventScripts": [
                    {
                      "eventid": "valueChanged",
                      "script": "\t# Extract the UDT instance name from the tag path\n\tudt_instance_name \u003d \u0027/\u0027.join(tagPath.split(\"/\")[-3:])\n\t\n\t# Read the namespace from the default provider\n\tnamespace_tag_path \u003d \"[default]namespace\"\n\tnamespace_value \u003d system.tag.read(namespace_tag_path).value\n\t\n\t# Construct the MQTT topic using the UDT instance name\n\tmqtt_topic \u003d namespace_value + udt_instance_name\n\t\n\t# Publish the current value to the MQTT topic\n\tsystem.cirruslink.engine.publish(\"Pi\", mqtt_topic, str(currentValue.value),0,0)\n"
                    }
                  ],
                  "value": -2000,
                  "name": "stepperStep",
                  "tagType": "AtomicTag"
                },
                {
                  "eventScripts": [
                    {
                      "eventid": "valueChanged",
                      "script": "\t# Extract the UDT instance name from the tag path\n\tudt_instance_name \u003d \u0027/\u0027.join(tagPath.split(\"/\")[-3:])\n\t\n\t# Read the namespace from the default provider\n\tnamespace_tag_path \u003d \"[default]namespace\"\n\tnamespace_value \u003d system.tag.read(namespace_tag_path).value\n\t\n\t# Construct the MQTT topic using the UDT instance name\n\tmqtt_topic \u003d namespace_value + udt_instance_name\n\t\n\t# Publish the current value to the MQTT topic\n\tsystem.cirruslink.engine.publish(\"Pi\", mqtt_topic, str(currentValue.value),0,0)\n"
                    }
                  ],
                  "value": false,
                  "name": "out2",
                  "tagType": "AtomicTag"
                },
                {
                  "eventScripts": [
                    {
                      "eventid": "valueChanged",
                      "script": "\t# Extract the UDT instance name from the tag path\n\tudt_instance_name \u003d \u0027/\u0027.join(tagPath.split(\"/\")[-3:])\n\t\n\t# Read the namespace from the default provider\n\tnamespace_tag_path \u003d \"[default]namespace\"\n\tnamespace_value \u003d system.tag.read(namespace_tag_path).value\n\t\n\t# Construct the MQTT topic using the UDT instance name\n\tmqtt_topic \u003d namespace_value + udt_instance_name\n\t\n\t# Publish the current value to the MQTT topic\n\tsystem.cirruslink.engine.publish(\"Pi\", mqtt_topic, str(currentValue.value),0,0)\n"
                    }
                  ],
                  "value": false,
                  "name": "out3",
                  "tagType": "AtomicTag"
                },
                {
                  "eventScripts": [
                    {
                      "eventid": "valueChanged",
                      "script": "\t# Extract the UDT instance name from the tag path\n\tudt_instance_name \u003d \u0027/\u0027.join(tagPath.split(\"/\")[-3:])\n\t\n\t# Read the namespace from the default provider\n\tnamespace_tag_path \u003d \"[default]namespace\"\n\tnamespace_value \u003d system.tag.read(namespace_tag_path).value\n\t\n\t# Construct the MQTT topic using the UDT instance name\n\tmqtt_topic \u003d namespace_value + udt_instance_name\n\t\n\t# Publish the current value to the MQTT topic\n\tsystem.cirruslink.engine.publish(\"Pi\", mqtt_topic, str(currentValue.value),0,0)\n"
                    }
                  ],
                  "value": 20,
                  "name": "stepperSpeed",
                  "tagType": "AtomicTag"
                },
                {
                  "eventScripts": [
                    {
                      "eventid": "valueChanged",
                      "script": "\t# Extract the UDT instance name from the tag path\n\tudt_instance_name \u003d \u0027/\u0027.join(tagPath.split(\"/\")[-3:])\n\t\n\t# Read the namespace from the default provider\n\tnamespace_tag_path \u003d \"[default]namespace\"\n\tnamespace_value \u003d system.tag.read(namespace_tag_path).value\n\t\n\t# Construct the MQTT topic using the UDT instance name\n\tmqtt_topic \u003d namespace_value + udt_instance_name\n\t\n\t# Publish the current value to the MQTT topic\n\tsystem.cirruslink.engine.publish(\"Pi\", mqtt_topic, str(currentValue.value),0,0)\n\t"
                    }
                  ],
                  "value": false,
                  "name": "out1",
                  "tagType": "AtomicTag"
                },
                {
                  "eventScripts": [
                    {
                      "eventid": "valueChanged",
                      "script": "\t# Extract the UDT instance name from the tag path\n\tudt_instance_name \u003d \u0027/\u0027.join(tagPath.split(\"/\")[-3:])\n\t\n\t# Read the namespace from the default provider\n\tnamespace_tag_path \u003d \"[default]namespace\"\n\tnamespace_value \u003d system.tag.read(namespace_tag_path).value\n\t\n\t# Construct the MQTT topic using the UDT instance name\n\tmqtt_topic \u003d namespace_value + udt_instance_name\n\t\n\t# Publish the current value to the MQTT topic\n\tsystem.cirruslink.engine.publish(\"Pi\", mqtt_topic, str(currentValue.value),0,0)\n"
                    }
                  ],
                  "value": false,
                  "name": "out4",
                  "tagType": "AtomicTag"
                },
                {
                  "eventScripts": [
                    {
                      "eventid": "valueChanged",
                      "script": "\t# Extract the UDT instance name from the tag path\n\tudt_instance_name \u003d \u0027/\u0027.join(tagPath.split(\"/\")[-3:])\n\t\n\t# Read the namespace from the default provider\n\tnamespace_tag_path \u003d \"[default]namespace\"\n\tnamespace_value \u003d system.tag.read(namespace_tag_path).value\n\t\n\t# Construct the MQTT topic using the UDT instance name\n\tmqtt_topic \u003d namespace_value + udt_instance_name\n\t\n\t# Publish the current value to the MQTT topic\n\tsystem.cirruslink.engine.publish(\"Pi\", mqtt_topic, str(currentValue.value),0,0)\n"
                    }
                  ],
                  "value": "null",
                  "name": "message",
                  "tagType": "AtomicTag"
                }
              ]
            },
            {
              "name": "count",
              "tagType": "AtomicTag"
            },
            {
              "name": "in",
              "tagType": "Folder",
              "tags": [
                {
                  "name": "in1",
                  "tagType": "AtomicTag"
                },
                {
                  "name": "sensor2",
                  "tagType": "AtomicTag"
                },
                {
                  "name": "sensor1",
                  "tagType": "AtomicTag"
                }
              ]
            }
          ]
        },
        {
          "out3": false,
          "name": "thing14",
          "typeId": "thing",
          "tagType": "UdtInstance",
          "tags": [
            {
              "name": "count",
              "tagType": "AtomicTag"
            },
            {
              "name": "in",
              "tagType": "Folder",
              "tags": [
                {
                  "name": "sensor2",
                  "tagType": "AtomicTag"
                },
                {
                  "name": "in1",
                  "tagType": "AtomicTag"
                },
                {
                  "name": "sensor1",
                  "tagType": "AtomicTag"
                }
              ]
            },
            {
              "name": "out",
              "tagType": "Folder",
              "tags": [
                {
                  "eventScripts": [
                    {
                      "eventid": "valueChanged",
                      "script": "\t# Extract the UDT instance name from the tag path\n\tudt_instance_name \u003d \u0027/\u0027.join(tagPath.split(\"/\")[-3:])\n\t\n\t# Read the namespace from the default provider\n\tnamespace_tag_path \u003d \"[default]namespace\"\n\tnamespace_value \u003d system.tag.read(namespace_tag_path).value\n\t\n\t# Construct the MQTT topic using the UDT instance name\n\tmqtt_topic \u003d namespace_value + udt_instance_name\n\t\n\t# Publish the current value to the MQTT topic\n\tsystem.cirruslink.engine.publish(\"Pi\", mqtt_topic, str(currentValue.value),0,0)\n\t"
                    }
                  ],
                  "value": false,
                  "name": "out1",
                  "tagType": "AtomicTag"
                },
                {
                  "eventScripts": [
                    {
                      "eventid": "valueChanged",
                      "script": "\t# Extract the UDT instance name from the tag path\n\tudt_instance_name \u003d \u0027/\u0027.join(tagPath.split(\"/\")[-3:])\n\t\n\t# Read the namespace from the default provider\n\tnamespace_tag_path \u003d \"[default]namespace\"\n\tnamespace_value \u003d system.tag.read(namespace_tag_path).value\n\t\n\t# Construct the MQTT topic using the UDT instance name\n\tmqtt_topic \u003d namespace_value + udt_instance_name\n\t\n\t# Publish the current value to the MQTT topic\n\tsystem.cirruslink.engine.publish(\"Pi\", mqtt_topic, str(currentValue.value),0,0)\n"
                    }
                  ],
                  "value": 20,
                  "name": "stepperSpeed",
                  "tagType": "AtomicTag"
                },
                {
                  "eventScripts": [
                    {
                      "eventid": "valueChanged",
                      "script": "\t# Extract the UDT instance name from the tag path\n\tudt_instance_name \u003d \u0027/\u0027.join(tagPath.split(\"/\")[-3:])\n\t\n\t# Read the namespace from the default provider\n\tnamespace_tag_path \u003d \"[default]namespace\"\n\tnamespace_value \u003d system.tag.read(namespace_tag_path).value\n\t\n\t# Construct the MQTT topic using the UDT instance name\n\tmqtt_topic \u003d namespace_value + udt_instance_name\n\t\n\t# Publish the current value to the MQTT topic\n\tsystem.cirruslink.engine.publish(\"Pi\", mqtt_topic, str(currentValue.value),0,0)\n"
                    }
                  ],
                  "value": false,
                  "name": "out4",
                  "tagType": "AtomicTag"
                },
                {
                  "eventScripts": [
                    {
                      "eventid": "valueChanged",
                      "script": "\t# Extract the UDT instance name from the tag path\n\tudt_instance_name \u003d \u0027/\u0027.join(tagPath.split(\"/\")[-3:])\n\t\n\t# Read the namespace from the default provider\n\tnamespace_tag_path \u003d \"[default]namespace\"\n\tnamespace_value \u003d system.tag.read(namespace_tag_path).value\n\t\n\t# Construct the MQTT topic using the UDT instance name\n\tmqtt_topic \u003d namespace_value + udt_instance_name\n\t\n\t# Publish the current value to the MQTT topic\n\tsystem.cirruslink.engine.publish(\"Pi\", mqtt_topic, str(currentValue.value),0,0)\n"
                    }
                  ],
                  "value": false,
                  "name": "out3",
                  "tagType": "AtomicTag"
                },
                {
                  "eventScripts": [
                    {
                      "eventid": "valueChanged",
                      "script": "\t# Extract the UDT instance name from the tag path\n\tudt_instance_name \u003d \u0027/\u0027.join(tagPath.split(\"/\")[-3:])\n\t\n\t# Read the namespace from the default provider\n\tnamespace_tag_path \u003d \"[default]namespace\"\n\tnamespace_value \u003d system.tag.read(namespace_tag_path).value\n\t\n\t# Construct the MQTT topic using the UDT instance name\n\tmqtt_topic \u003d namespace_value + udt_instance_name\n\t\n\t# Publish the current value to the MQTT topic\n\tsystem.cirruslink.engine.publish(\"Pi\", mqtt_topic, str(currentValue.value),0,0)\n"
                    }
                  ],
                  "value": false,
                  "name": "out2",
                  "tagType": "AtomicTag"
                },
                {
                  "eventScripts": [
                    {
                      "eventid": "valueChanged",
                      "script": "\t# Extract the UDT instance name from the tag path\n\tudt_instance_name \u003d \u0027/\u0027.join(tagPath.split(\"/\")[-3:])\n\t\n\t# Read the namespace from the default provider\n\tnamespace_tag_path \u003d \"[default]namespace\"\n\tnamespace_value \u003d system.tag.read(namespace_tag_path).value\n\t\n\t# Construct the MQTT topic using the UDT instance name\n\tmqtt_topic \u003d namespace_value + udt_instance_name\n\t\n\t# Publish the current value to the MQTT topic\n\tsystem.cirruslink.engine.publish(\"Pi\", mqtt_topic, str(currentValue.value),0,0)\n"
                    }
                  ],
                  "value": 0,
                  "name": "stepperStep",
                  "tagType": "AtomicTag"
                },
                {
                  "eventScripts": [
                    {
                      "eventid": "valueChanged",
                      "script": "\t# Extract the UDT instance name from the tag path\n\tudt_instance_name \u003d \u0027/\u0027.join(tagPath.split(\"/\")[-3:])\n\t\n\t# Read the namespace from the default provider\n\tnamespace_tag_path \u003d \"[default]namespace\"\n\tnamespace_value \u003d system.tag.read(namespace_tag_path).value\n\t\n\t# Construct the MQTT topic using the UDT instance name\n\tmqtt_topic \u003d namespace_value + udt_instance_name\n\t\n\t# Publish the current value to the MQTT topic\n\tsystem.cirruslink.engine.publish(\"Pi\", mqtt_topic, str(currentValue.value),0,0)\n"
                    }
                  ],
                  "value": "null",
                  "name": "message",
                  "tagType": "AtomicTag"
                }
              ]
            }
          ]
        },
        {
          "out3": false,
          "name": "thing3",
          "typeId": "thing",
          "tagType": "UdtInstance",
          "tags": [
            {
              "name": "in",
              "tagType": "Folder",
              "tags": [
                {
                  "name": "in1",
                  "tagType": "AtomicTag"
                },
                {
                  "name": "sensor1",
                  "tagType": "AtomicTag"
                },
                {
                  "name": "sensor2",
                  "tagType": "AtomicTag"
                }
              ]
            },
            {
              "name": "count",
              "tagType": "AtomicTag"
            },
            {
              "name": "out",
              "tagType": "Folder",
              "tags": [
                {
                  "eventScripts": [
                    {
                      "eventid": "valueChanged",
                      "script": "\t# Extract the UDT instance name from the tag path\n\tudt_instance_name \u003d \u0027/\u0027.join(tagPath.split(\"/\")[-3:])\n\t\n\t# Read the namespace from the default provider\n\tnamespace_tag_path \u003d \"[default]namespace\"\n\tnamespace_value \u003d system.tag.read(namespace_tag_path).value\n\t\n\t# Construct the MQTT topic using the UDT instance name\n\tmqtt_topic \u003d namespace_value + udt_instance_name\n\t\n\t# Publish the current value to the MQTT topic\n\tsystem.cirruslink.engine.publish(\"Pi\", mqtt_topic, str(currentValue.value),0,0)\n"
                    }
                  ],
                  "value": 0,
                  "name": "stepperStep",
                  "tagType": "AtomicTag"
                },
                {
                  "eventScripts": [
                    {
                      "eventid": "valueChanged",
                      "script": "\t# Extract the UDT instance name from the tag path\n\tudt_instance_name \u003d \u0027/\u0027.join(tagPath.split(\"/\")[-3:])\n\t\n\t# Read the namespace from the default provider\n\tnamespace_tag_path \u003d \"[default]namespace\"\n\tnamespace_value \u003d system.tag.read(namespace_tag_path).value\n\t\n\t# Construct the MQTT topic using the UDT instance name\n\tmqtt_topic \u003d namespace_value + udt_instance_name\n\t\n\t# Publish the current value to the MQTT topic\n\tsystem.cirruslink.engine.publish(\"Pi\", mqtt_topic, str(currentValue.value),0,0)\n"
                    }
                  ],
                  "value": false,
                  "name": "out4",
                  "tagType": "AtomicTag"
                },
                {
                  "eventScripts": [
                    {
                      "eventid": "valueChanged",
                      "script": "\t# Extract the UDT instance name from the tag path\n\tudt_instance_name \u003d \u0027/\u0027.join(tagPath.split(\"/\")[-3:])\n\t\n\t# Read the namespace from the default provider\n\tnamespace_tag_path \u003d \"[default]namespace\"\n\tnamespace_value \u003d system.tag.read(namespace_tag_path).value\n\t\n\t# Construct the MQTT topic using the UDT instance name\n\tmqtt_topic \u003d namespace_value + udt_instance_name\n\t\n\t# Publish the current value to the MQTT topic\n\tsystem.cirruslink.engine.publish(\"Pi\", mqtt_topic, str(currentValue.value),0,0)\n\t"
                    }
                  ],
                  "value": false,
                  "name": "out1",
                  "tagType": "AtomicTag"
                },
                {
                  "eventScripts": [
                    {
                      "eventid": "valueChanged",
                      "script": "\t# Extract the UDT instance name from the tag path\n\tudt_instance_name \u003d \u0027/\u0027.join(tagPath.split(\"/\")[-3:])\n\t\n\t# Read the namespace from the default provider\n\tnamespace_tag_path \u003d \"[default]namespace\"\n\tnamespace_value \u003d system.tag.read(namespace_tag_path).value\n\t\n\t# Construct the MQTT topic using the UDT instance name\n\tmqtt_topic \u003d namespace_value + udt_instance_name\n\t\n\t# Publish the current value to the MQTT topic\n\tsystem.cirruslink.engine.publish(\"Pi\", mqtt_topic, str(currentValue.value),0,0)\n"
                    }
                  ],
                  "value": "null",
                  "name": "message",
                  "tagType": "AtomicTag"
                },
                {
                  "eventScripts": [
                    {
                      "eventid": "valueChanged",
                      "script": "\t# Extract the UDT instance name from the tag path\n\tudt_instance_name \u003d \u0027/\u0027.join(tagPath.split(\"/\")[-3:])\n\t\n\t# Read the namespace from the default provider\n\tnamespace_tag_path \u003d \"[default]namespace\"\n\tnamespace_value \u003d system.tag.read(namespace_tag_path).value\n\t\n\t# Construct the MQTT topic using the UDT instance name\n\tmqtt_topic \u003d namespace_value + udt_instance_name\n\t\n\t# Publish the current value to the MQTT topic\n\tsystem.cirruslink.engine.publish(\"Pi\", mqtt_topic, str(currentValue.value),0,0)\n"
                    }
                  ],
                  "value": 20,
                  "name": "stepperSpeed",
                  "tagType": "AtomicTag"
                },
                {
                  "eventScripts": [
                    {
                      "eventid": "valueChanged",
                      "script": "\t# Extract the UDT instance name from the tag path\n\tudt_instance_name \u003d \u0027/\u0027.join(tagPath.split(\"/\")[-3:])\n\t\n\t# Read the namespace from the default provider\n\tnamespace_tag_path \u003d \"[default]namespace\"\n\tnamespace_value \u003d system.tag.read(namespace_tag_path).value\n\t\n\t# Construct the MQTT topic using the UDT instance name\n\tmqtt_topic \u003d namespace_value + udt_instance_name\n\t\n\t# Publish the current value to the MQTT topic\n\tsystem.cirruslink.engine.publish(\"Pi\", mqtt_topic, str(currentValue.value),0,0)\n"
                    }
                  ],
                  "value": false,
                  "name": "out2",
                  "tagType": "AtomicTag"
                },
                {
                  "eventScripts": [
                    {
                      "eventid": "valueChanged",
                      "script": "\t# Extract the UDT instance name from the tag path\n\tudt_instance_name \u003d \u0027/\u0027.join(tagPath.split(\"/\")[-3:])\n\t\n\t# Read the namespace from the default provider\n\tnamespace_tag_path \u003d \"[default]namespace\"\n\tnamespace_value \u003d system.tag.read(namespace_tag_path).value\n\t\n\t# Construct the MQTT topic using the UDT instance name\n\tmqtt_topic \u003d namespace_value + udt_instance_name\n\t\n\t# Publish the current value to the MQTT topic\n\tsystem.cirruslink.engine.publish(\"Pi\", mqtt_topic, str(currentValue.value),0,0)\n"
                    }
                  ],
                  "value": false,
                  "name": "out3",
                  "tagType": "AtomicTag"
                }
              ]
            }
          ]
        },
        {
          "out3": false,
          "name": "thing13",
          "typeId": "thing",
          "tagType": "UdtInstance",
          "tags": [
            {
              "name": "count",
              "tagType": "AtomicTag"
            },
            {
              "name": "in",
              "tagType": "Folder",
              "tags": [
                {
                  "name": "sensor2",
                  "tagType": "AtomicTag"
                },
                {
                  "name": "sensor1",
                  "tagType": "AtomicTag"
                },
                {
                  "name": "in1",
                  "tagType": "AtomicTag"
                }
              ]
            },
            {
              "name": "out",
              "tagType": "Folder",
              "tags": [
                {
                  "eventScripts": [
                    {
                      "eventid": "valueChanged",
                      "script": "\t# Extract the UDT instance name from the tag path\n\tudt_instance_name \u003d \u0027/\u0027.join(tagPath.split(\"/\")[-3:])\n\t\n\t# Read the namespace from the default provider\n\tnamespace_tag_path \u003d \"[default]namespace\"\n\tnamespace_value \u003d system.tag.read(namespace_tag_path).value\n\t\n\t# Construct the MQTT topic using the UDT instance name\n\tmqtt_topic \u003d namespace_value + udt_instance_name\n\t\n\t# Publish the current value to the MQTT topic\n\tsystem.cirruslink.engine.publish(\"Pi\", mqtt_topic, str(currentValue.value),0,0)\n"
                    }
                  ],
                  "value": 20,
                  "name": "stepperSpeed",
                  "tagType": "AtomicTag"
                },
                {
                  "eventScripts": [
                    {
                      "eventid": "valueChanged",
                      "script": "\t# Extract the UDT instance name from the tag path\n\tudt_instance_name \u003d \u0027/\u0027.join(tagPath.split(\"/\")[-3:])\n\t\n\t# Read the namespace from the default provider\n\tnamespace_tag_path \u003d \"[default]namespace\"\n\tnamespace_value \u003d system.tag.read(namespace_tag_path).value\n\t\n\t# Construct the MQTT topic using the UDT instance name\n\tmqtt_topic \u003d namespace_value + udt_instance_name\n\t\n\t# Publish the current value to the MQTT topic\n\tsystem.cirruslink.engine.publish(\"Pi\", mqtt_topic, str(currentValue.value),0,0)\n"
                    }
                  ],
                  "value": false,
                  "name": "out4",
                  "tagType": "AtomicTag"
                },
                {
                  "eventScripts": [
                    {
                      "eventid": "valueChanged",
                      "script": "\t# Extract the UDT instance name from the tag path\n\tudt_instance_name \u003d \u0027/\u0027.join(tagPath.split(\"/\")[-3:])\n\t\n\t# Read the namespace from the default provider\n\tnamespace_tag_path \u003d \"[default]namespace\"\n\tnamespace_value \u003d system.tag.read(namespace_tag_path).value\n\t\n\t# Construct the MQTT topic using the UDT instance name\n\tmqtt_topic \u003d namespace_value + udt_instance_name\n\t\n\t# Publish the current value to the MQTT topic\n\tsystem.cirruslink.engine.publish(\"Pi\", mqtt_topic, str(currentValue.value),0,0)\n\t"
                    }
                  ],
                  "value": false,
                  "name": "out1",
                  "tagType": "AtomicTag"
                },
                {
                  "eventScripts": [
                    {
                      "eventid": "valueChanged",
                      "script": "\t# Extract the UDT instance name from the tag path\n\tudt_instance_name \u003d \u0027/\u0027.join(tagPath.split(\"/\")[-3:])\n\t\n\t# Read the namespace from the default provider\n\tnamespace_tag_path \u003d \"[default]namespace\"\n\tnamespace_value \u003d system.tag.read(namespace_tag_path).value\n\t\n\t# Construct the MQTT topic using the UDT instance name\n\tmqtt_topic \u003d namespace_value + udt_instance_name\n\t\n\t# Publish the current value to the MQTT topic\n\tsystem.cirruslink.engine.publish(\"Pi\", mqtt_topic, str(currentValue.value),0,0)\n"
                    }
                  ],
                  "value": 0,
                  "name": "stepperStep",
                  "tagType": "AtomicTag"
                },
                {
                  "eventScripts": [
                    {
                      "eventid": "valueChanged",
                      "script": "\t# Extract the UDT instance name from the tag path\n\tudt_instance_name \u003d \u0027/\u0027.join(tagPath.split(\"/\")[-3:])\n\t\n\t# Read the namespace from the default provider\n\tnamespace_tag_path \u003d \"[default]namespace\"\n\tnamespace_value \u003d system.tag.read(namespace_tag_path).value\n\t\n\t# Construct the MQTT topic using the UDT instance name\n\tmqtt_topic \u003d namespace_value + udt_instance_name\n\t\n\t# Publish the current value to the MQTT topic\n\tsystem.cirruslink.engine.publish(\"Pi\", mqtt_topic, str(currentValue.value),0,0)\n"
                    }
                  ],
                  "value": "null",
                  "name": "message",
                  "tagType": "AtomicTag"
                },
                {
                  "eventScripts": [
                    {
                      "eventid": "valueChanged",
                      "script": "\t# Extract the UDT instance name from the tag path\n\tudt_instance_name \u003d \u0027/\u0027.join(tagPath.split(\"/\")[-3:])\n\t\n\t# Read the namespace from the default provider\n\tnamespace_tag_path \u003d \"[default]namespace\"\n\tnamespace_value \u003d system.tag.read(namespace_tag_path).value\n\t\n\t# Construct the MQTT topic using the UDT instance name\n\tmqtt_topic \u003d namespace_value + udt_instance_name\n\t\n\t# Publish the current value to the MQTT topic\n\tsystem.cirruslink.engine.publish(\"Pi\", mqtt_topic, str(currentValue.value),0,0)\n"
                    }
                  ],
                  "value": false,
                  "name": "out2",
                  "tagType": "AtomicTag"
                },
                {
                  "eventScripts": [
                    {
                      "eventid": "valueChanged",
                      "script": "\t# Extract the UDT instance name from the tag path\n\tudt_instance_name \u003d \u0027/\u0027.join(tagPath.split(\"/\")[-3:])\n\t\n\t# Read the namespace from the default provider\n\tnamespace_tag_path \u003d \"[default]namespace\"\n\tnamespace_value \u003d system.tag.read(namespace_tag_path).value\n\t\n\t# Construct the MQTT topic using the UDT instance name\n\tmqtt_topic \u003d namespace_value + udt_instance_name\n\t\n\t# Publish the current value to the MQTT topic\n\tsystem.cirruslink.engine.publish(\"Pi\", mqtt_topic, str(currentValue.value),0,0)\n"
                    }
                  ],
                  "value": false,
                  "name": "out3",
                  "tagType": "AtomicTag"
                }
              ]
            }
          ]
        },
        {
          "out3": false,
          "name": "thing4",
          "typeId": "thing",
          "tagType": "UdtInstance",
          "tags": [
            {
              "name": "count",
              "tagType": "AtomicTag"
            },
            {
              "name": "in",
              "tagType": "Folder",
              "tags": [
                {
                  "name": "sensor2",
                  "tagType": "AtomicTag"
                },
                {
                  "name": "in1",
                  "tagType": "AtomicTag"
                },
                {
                  "name": "sensor1",
                  "tagType": "AtomicTag"
                }
              ]
            },
            {
              "name": "out",
              "tagType": "Folder",
              "tags": [
                {
                  "eventScripts": [
                    {
                      "eventid": "valueChanged",
                      "script": "\t# Extract the UDT instance name from the tag path\n\tudt_instance_name \u003d \u0027/\u0027.join(tagPath.split(\"/\")[-3:])\n\t\n\t# Read the namespace from the default provider\n\tnamespace_tag_path \u003d \"[default]namespace\"\n\tnamespace_value \u003d system.tag.read(namespace_tag_path).value\n\t\n\t# Construct the MQTT topic using the UDT instance name\n\tmqtt_topic \u003d namespace_value + udt_instance_name\n\t\n\t# Publish the current value to the MQTT topic\n\tsystem.cirruslink.engine.publish(\"Pi\", mqtt_topic, str(currentValue.value),0,0)\n\t"
                    }
                  ],
                  "value": false,
                  "name": "out1",
                  "tagType": "AtomicTag"
                },
                {
                  "eventScripts": [
                    {
                      "eventid": "valueChanged",
                      "script": "\t# Extract the UDT instance name from the tag path\n\tudt_instance_name \u003d \u0027/\u0027.join(tagPath.split(\"/\")[-3:])\n\t\n\t# Read the namespace from the default provider\n\tnamespace_tag_path \u003d \"[default]namespace\"\n\tnamespace_value \u003d system.tag.read(namespace_tag_path).value\n\t\n\t# Construct the MQTT topic using the UDT instance name\n\tmqtt_topic \u003d namespace_value + udt_instance_name\n\t\n\t# Publish the current value to the MQTT topic\n\tsystem.cirruslink.engine.publish(\"Pi\", mqtt_topic, str(currentValue.value),0,0)\n"
                    }
                  ],
                  "value": 20,
                  "name": "stepperSpeed",
                  "tagType": "AtomicTag"
                },
                {
                  "eventScripts": [
                    {
                      "eventid": "valueChanged",
                      "script": "\t# Extract the UDT instance name from the tag path\n\tudt_instance_name \u003d \u0027/\u0027.join(tagPath.split(\"/\")[-3:])\n\t\n\t# Read the namespace from the default provider\n\tnamespace_tag_path \u003d \"[default]namespace\"\n\tnamespace_value \u003d system.tag.read(namespace_tag_path).value\n\t\n\t# Construct the MQTT topic using the UDT instance name\n\tmqtt_topic \u003d namespace_value + udt_instance_name\n\t\n\t# Publish the current value to the MQTT topic\n\tsystem.cirruslink.engine.publish(\"Pi\", mqtt_topic, str(currentValue.value),0,0)\n"
                    }
                  ],
                  "value": false,
                  "name": "out4",
                  "tagType": "AtomicTag"
                },
                {
                  "eventScripts": [
                    {
                      "eventid": "valueChanged",
                      "script": "\t# Extract the UDT instance name from the tag path\n\tudt_instance_name \u003d \u0027/\u0027.join(tagPath.split(\"/\")[-3:])\n\t\n\t# Read the namespace from the default provider\n\tnamespace_tag_path \u003d \"[default]namespace\"\n\tnamespace_value \u003d system.tag.read(namespace_tag_path).value\n\t\n\t# Construct the MQTT topic using the UDT instance name\n\tmqtt_topic \u003d namespace_value + udt_instance_name\n\t\n\t# Publish the current value to the MQTT topic\n\tsystem.cirruslink.engine.publish(\"Pi\", mqtt_topic, str(currentValue.value),0,0)\n"
                    }
                  ],
                  "value": false,
                  "name": "out3",
                  "tagType": "AtomicTag"
                },
                {
                  "eventScripts": [
                    {
                      "eventid": "valueChanged",
                      "script": "\t# Extract the UDT instance name from the tag path\n\tudt_instance_name \u003d \u0027/\u0027.join(tagPath.split(\"/\")[-3:])\n\t\n\t# Read the namespace from the default provider\n\tnamespace_tag_path \u003d \"[default]namespace\"\n\tnamespace_value \u003d system.tag.read(namespace_tag_path).value\n\t\n\t# Construct the MQTT topic using the UDT instance name\n\tmqtt_topic \u003d namespace_value + udt_instance_name\n\t\n\t# Publish the current value to the MQTT topic\n\tsystem.cirruslink.engine.publish(\"Pi\", mqtt_topic, str(currentValue.value),0,0)\n"
                    }
                  ],
                  "value": false,
                  "name": "out2",
                  "tagType": "AtomicTag"
                },
                {
                  "eventScripts": [
                    {
                      "eventid": "valueChanged",
                      "script": "\t# Extract the UDT instance name from the tag path\n\tudt_instance_name \u003d \u0027/\u0027.join(tagPath.split(\"/\")[-3:])\n\t\n\t# Read the namespace from the default provider\n\tnamespace_tag_path \u003d \"[default]namespace\"\n\tnamespace_value \u003d system.tag.read(namespace_tag_path).value\n\t\n\t# Construct the MQTT topic using the UDT instance name\n\tmqtt_topic \u003d namespace_value + udt_instance_name\n\t\n\t# Publish the current value to the MQTT topic\n\tsystem.cirruslink.engine.publish(\"Pi\", mqtt_topic, str(currentValue.value),0,0)\n"
                    }
                  ],
                  "value": 0,
                  "name": "stepperStep",
                  "tagType": "AtomicTag"
                },
                {
                  "eventScripts": [
                    {
                      "eventid": "valueChanged",
                      "script": "\t# Extract the UDT instance name from the tag path\n\tudt_instance_name \u003d \u0027/\u0027.join(tagPath.split(\"/\")[-3:])\n\t\n\t# Read the namespace from the default provider\n\tnamespace_tag_path \u003d \"[default]namespace\"\n\tnamespace_value \u003d system.tag.read(namespace_tag_path).value\n\t\n\t# Construct the MQTT topic using the UDT instance name\n\tmqtt_topic \u003d namespace_value + udt_instance_name\n\t\n\t# Publish the current value to the MQTT topic\n\tsystem.cirruslink.engine.publish(\"Pi\", mqtt_topic, str(currentValue.value),0,0)\n"
                    }
                  ],
                  "value": "null",
                  "name": "message",
                  "tagType": "AtomicTag"
                }
              ]
            }
          ]
        },
        {
          "out3": false,
          "name": "thing26",
          "typeId": "thing",
          "tagType": "UdtInstance",
          "tags": [
            {
              "name": "count",
              "tagType": "AtomicTag"
            },
            {
              "name": "in",
              "tagType": "Folder",
              "tags": [
                {
                  "name": "sensor2",
                  "tagType": "AtomicTag"
                },
                {
                  "name": "sensor1",
                  "tagType": "AtomicTag"
                },
                {
                  "name": "in1",
                  "tagType": "AtomicTag"
                }
              ]
            },
            {
              "name": "out",
              "tagType": "Folder",
              "tags": [
                {
                  "eventScripts": [
                    {
                      "eventid": "valueChanged",
                      "script": "\t# Extract the UDT instance name from the tag path\n\tudt_instance_name \u003d \u0027/\u0027.join(tagPath.split(\"/\")[-3:])\n\t\n\t# Read the namespace from the default provider\n\tnamespace_tag_path \u003d \"[default]namespace\"\n\tnamespace_value \u003d system.tag.read(namespace_tag_path).value\n\t\n\t# Construct the MQTT topic using the UDT instance name\n\tmqtt_topic \u003d namespace_value + udt_instance_name\n\t\n\t# Publish the current value to the MQTT topic\n\tsystem.cirruslink.engine.publish(\"Pi\", mqtt_topic, str(currentValue.value),0,0)\n"
                    }
                  ],
                  "value": false,
                  "name": "out3",
                  "tagType": "AtomicTag"
                },
                {
                  "eventScripts": [
                    {
                      "eventid": "valueChanged",
                      "script": "\t# Extract the UDT instance name from the tag path\n\tudt_instance_name \u003d \u0027/\u0027.join(tagPath.split(\"/\")[-3:])\n\t\n\t# Read the namespace from the default provider\n\tnamespace_tag_path \u003d \"[default]namespace\"\n\tnamespace_value \u003d system.tag.read(namespace_tag_path).value\n\t\n\t# Construct the MQTT topic using the UDT instance name\n\tmqtt_topic \u003d namespace_value + udt_instance_name\n\t\n\t# Publish the current value to the MQTT topic\n\tsystem.cirruslink.engine.publish(\"Pi\", mqtt_topic, str(currentValue.value),0,0)\n"
                    }
                  ],
                  "value": false,
                  "name": "out2",
                  "tagType": "AtomicTag"
                },
                {
                  "eventScripts": [
                    {
                      "eventid": "valueChanged",
                      "script": "\t# Extract the UDT instance name from the tag path\n\tudt_instance_name \u003d \u0027/\u0027.join(tagPath.split(\"/\")[-3:])\n\t\n\t# Read the namespace from the default provider\n\tnamespace_tag_path \u003d \"[default]namespace\"\n\tnamespace_value \u003d system.tag.read(namespace_tag_path).value\n\t\n\t# Construct the MQTT topic using the UDT instance name\n\tmqtt_topic \u003d namespace_value + udt_instance_name\n\t\n\t# Publish the current value to the MQTT topic\n\tsystem.cirruslink.engine.publish(\"Pi\", mqtt_topic, str(currentValue.value),0,0)\n\t"
                    }
                  ],
                  "value": false,
                  "name": "out1",
                  "tagType": "AtomicTag"
                },
                {
                  "eventScripts": [
                    {
                      "eventid": "valueChanged",
                      "script": "\t# Extract the UDT instance name from the tag path\n\tudt_instance_name \u003d \u0027/\u0027.join(tagPath.split(\"/\")[-3:])\n\t\n\t# Read the namespace from the default provider\n\tnamespace_tag_path \u003d \"[default]namespace\"\n\tnamespace_value \u003d system.tag.read(namespace_tag_path).value\n\t\n\t# Construct the MQTT topic using the UDT instance name\n\tmqtt_topic \u003d namespace_value + udt_instance_name\n\t\n\t# Publish the current value to the MQTT topic\n\tsystem.cirruslink.engine.publish(\"Pi\", mqtt_topic, str(currentValue.value),0,0)\n"
                    }
                  ],
                  "value": -2000,
                  "name": "stepperStep",
                  "tagType": "AtomicTag"
                },
                {
                  "eventScripts": [
                    {
                      "eventid": "valueChanged",
                      "script": "\t# Extract the UDT instance name from the tag path\n\tudt_instance_name \u003d \u0027/\u0027.join(tagPath.split(\"/\")[-3:])\n\t\n\t# Read the namespace from the default provider\n\tnamespace_tag_path \u003d \"[default]namespace\"\n\tnamespace_value \u003d system.tag.read(namespace_tag_path).value\n\t\n\t# Construct the MQTT topic using the UDT instance name\n\tmqtt_topic \u003d namespace_value + udt_instance_name\n\t\n\t# Publish the current value to the MQTT topic\n\tsystem.cirruslink.engine.publish(\"Pi\", mqtt_topic, str(currentValue.value),0,0)\n"
                    }
                  ],
                  "value": false,
                  "name": "out4",
                  "tagType": "AtomicTag"
                },
                {
                  "eventScripts": [
                    {
                      "eventid": "valueChanged",
                      "script": "\t# Extract the UDT instance name from the tag path\n\tudt_instance_name \u003d \u0027/\u0027.join(tagPath.split(\"/\")[-3:])\n\t\n\t# Read the namespace from the default provider\n\tnamespace_tag_path \u003d \"[default]namespace\"\n\tnamespace_value \u003d system.tag.read(namespace_tag_path).value\n\t\n\t# Construct the MQTT topic using the UDT instance name\n\tmqtt_topic \u003d namespace_value + udt_instance_name\n\t\n\t# Publish the current value to the MQTT topic\n\tsystem.cirruslink.engine.publish(\"Pi\", mqtt_topic, str(currentValue.value),0,0)\n"
                    }
                  ],
                  "value": 20,
                  "name": "stepperSpeed",
                  "tagType": "AtomicTag"
                },
                {
                  "eventScripts": [
                    {
                      "eventid": "valueChanged",
                      "script": "\t# Extract the UDT instance name from the tag path\n\tudt_instance_name \u003d \u0027/\u0027.join(tagPath.split(\"/\")[-3:])\n\t\n\t# Read the namespace from the default provider\n\tnamespace_tag_path \u003d \"[default]namespace\"\n\tnamespace_value \u003d system.tag.read(namespace_tag_path).value\n\t\n\t# Construct the MQTT topic using the UDT instance name\n\tmqtt_topic \u003d namespace_value + udt_instance_name\n\t\n\t# Publish the current value to the MQTT topic\n\tsystem.cirruslink.engine.publish(\"Pi\", mqtt_topic, str(currentValue.value),0,0)\n"
                    }
                  ],
                  "value": "null",
                  "name": "message",
                  "tagType": "AtomicTag"
                }
              ]
            }
          ]
        },
        {
          "out3": false,
          "name": "thing23",
          "typeId": "thing",
          "tagType": "UdtInstance",
          "tags": [
            {
              "name": "count",
              "tagType": "AtomicTag"
            },
            {
              "name": "in",
              "tagType": "Folder",
              "tags": [
                {
                  "name": "sensor2",
                  "tagType": "AtomicTag"
                },
                {
                  "name": "sensor1",
                  "tagType": "AtomicTag"
                },
                {
                  "name": "in1",
                  "tagType": "AtomicTag"
                }
              ]
            },
            {
              "name": "out",
              "tagType": "Folder",
              "tags": [
                {
                  "eventScripts": [
                    {
                      "eventid": "valueChanged",
                      "script": "\t# Extract the UDT instance name from the tag path\n\tudt_instance_name \u003d \u0027/\u0027.join(tagPath.split(\"/\")[-3:])\n\t\n\t# Read the namespace from the default provider\n\tnamespace_tag_path \u003d \"[default]namespace\"\n\tnamespace_value \u003d system.tag.read(namespace_tag_path).value\n\t\n\t# Construct the MQTT topic using the UDT instance name\n\tmqtt_topic \u003d namespace_value + udt_instance_name\n\t\n\t# Publish the current value to the MQTT topic\n\tsystem.cirruslink.engine.publish(\"Pi\", mqtt_topic, str(currentValue.value),0,0)\n"
                    }
                  ],
                  "value": 20,
                  "name": "stepperSpeed",
                  "tagType": "AtomicTag"
                },
                {
                  "eventScripts": [
                    {
                      "eventid": "valueChanged",
                      "script": "\t# Extract the UDT instance name from the tag path\n\tudt_instance_name \u003d \u0027/\u0027.join(tagPath.split(\"/\")[-3:])\n\t\n\t# Read the namespace from the default provider\n\tnamespace_tag_path \u003d \"[default]namespace\"\n\tnamespace_value \u003d system.tag.read(namespace_tag_path).value\n\t\n\t# Construct the MQTT topic using the UDT instance name\n\tmqtt_topic \u003d namespace_value + udt_instance_name\n\t\n\t# Publish the current value to the MQTT topic\n\tsystem.cirruslink.engine.publish(\"Pi\", mqtt_topic, str(currentValue.value),0,0)\n"
                    }
                  ],
                  "value": -2000,
                  "name": "stepperStep",
                  "tagType": "AtomicTag"
                },
                {
                  "eventScripts": [
                    {
                      "eventid": "valueChanged",
                      "script": "\t# Extract the UDT instance name from the tag path\n\tudt_instance_name \u003d \u0027/\u0027.join(tagPath.split(\"/\")[-3:])\n\t\n\t# Read the namespace from the default provider\n\tnamespace_tag_path \u003d \"[default]namespace\"\n\tnamespace_value \u003d system.tag.read(namespace_tag_path).value\n\t\n\t# Construct the MQTT topic using the UDT instance name\n\tmqtt_topic \u003d namespace_value + udt_instance_name\n\t\n\t# Publish the current value to the MQTT topic\n\tsystem.cirruslink.engine.publish(\"Pi\", mqtt_topic, str(currentValue.value),0,0)\n"
                    }
                  ],
                  "value": false,
                  "name": "out4",
                  "tagType": "AtomicTag"
                },
                {
                  "eventScripts": [
                    {
                      "eventid": "valueChanged",
                      "script": "\t# Extract the UDT instance name from the tag path\n\tudt_instance_name \u003d \u0027/\u0027.join(tagPath.split(\"/\")[-3:])\n\t\n\t# Read the namespace from the default provider\n\tnamespace_tag_path \u003d \"[default]namespace\"\n\tnamespace_value \u003d system.tag.read(namespace_tag_path).value\n\t\n\t# Construct the MQTT topic using the UDT instance name\n\tmqtt_topic \u003d namespace_value + udt_instance_name\n\t\n\t# Publish the current value to the MQTT topic\n\tsystem.cirruslink.engine.publish(\"Pi\", mqtt_topic, str(currentValue.value),0,0)\n\t"
                    }
                  ],
                  "value": false,
                  "name": "out1",
                  "tagType": "AtomicTag"
                },
                {
                  "eventScripts": [
                    {
                      "eventid": "valueChanged",
                      "script": "\t# Extract the UDT instance name from the tag path\n\tudt_instance_name \u003d \u0027/\u0027.join(tagPath.split(\"/\")[-3:])\n\t\n\t# Read the namespace from the default provider\n\tnamespace_tag_path \u003d \"[default]namespace\"\n\tnamespace_value \u003d system.tag.read(namespace_tag_path).value\n\t\n\t# Construct the MQTT topic using the UDT instance name\n\tmqtt_topic \u003d namespace_value + udt_instance_name\n\t\n\t# Publish the current value to the MQTT topic\n\tsystem.cirruslink.engine.publish(\"Pi\", mqtt_topic, str(currentValue.value),0,0)\n"
                    }
                  ],
                  "value": "null",
                  "name": "message",
                  "tagType": "AtomicTag"
                },
                {
                  "eventScripts": [
                    {
                      "eventid": "valueChanged",
                      "script": "\t# Extract the UDT instance name from the tag path\n\tudt_instance_name \u003d \u0027/\u0027.join(tagPath.split(\"/\")[-3:])\n\t\n\t# Read the namespace from the default provider\n\tnamespace_tag_path \u003d \"[default]namespace\"\n\tnamespace_value \u003d system.tag.read(namespace_tag_path).value\n\t\n\t# Construct the MQTT topic using the UDT instance name\n\tmqtt_topic \u003d namespace_value + udt_instance_name\n\t\n\t# Publish the current value to the MQTT topic\n\tsystem.cirruslink.engine.publish(\"Pi\", mqtt_topic, str(currentValue.value),0,0)\n"
                    }
                  ],
                  "value": false,
                  "name": "out2",
                  "tagType": "AtomicTag"
                },
                {
                  "eventScripts": [
                    {
                      "eventid": "valueChanged",
                      "script": "\t# Extract the UDT instance name from the tag path\n\tudt_instance_name \u003d \u0027/\u0027.join(tagPath.split(\"/\")[-3:])\n\t\n\t# Read the namespace from the default provider\n\tnamespace_tag_path \u003d \"[default]namespace\"\n\tnamespace_value \u003d system.tag.read(namespace_tag_path).value\n\t\n\t# Construct the MQTT topic using the UDT instance name\n\tmqtt_topic \u003d namespace_value + udt_instance_name\n\t\n\t# Publish the current value to the MQTT topic\n\tsystem.cirruslink.engine.publish(\"Pi\", mqtt_topic, str(currentValue.value),0,0)\n"
                    }
                  ],
                  "value": false,
                  "name": "out3",
                  "tagType": "AtomicTag"
                }
              ]
            }
          ]
        },
        {
          "out3": false,
          "name": "thing5",
          "typeId": "thing",
          "tagType": "UdtInstance",
          "tags": [
            {
              "name": "out",
              "tagType": "Folder",
              "tags": [
                {
                  "eventScripts": [
                    {
                      "eventid": "valueChanged",
                      "script": "\t# Extract the UDT instance name from the tag path\n\tudt_instance_name \u003d \u0027/\u0027.join(tagPath.split(\"/\")[-3:])\n\t\n\t# Read the namespace from the default provider\n\tnamespace_tag_path \u003d \"[default]namespace\"\n\tnamespace_value \u003d system.tag.read(namespace_tag_path).value\n\t\n\t# Construct the MQTT topic using the UDT instance name\n\tmqtt_topic \u003d namespace_value + udt_instance_name\n\t\n\t# Publish the current value to the MQTT topic\n\tsystem.cirruslink.engine.publish(\"Pi\", mqtt_topic, str(currentValue.value),0,0)\n"
                    }
                  ],
                  "value": 20,
                  "name": "stepperSpeed",
                  "tagType": "AtomicTag"
                },
                {
                  "eventScripts": [
                    {
                      "eventid": "valueChanged",
                      "script": "\t# Extract the UDT instance name from the tag path\n\tudt_instance_name \u003d \u0027/\u0027.join(tagPath.split(\"/\")[-3:])\n\t\n\t# Read the namespace from the default provider\n\tnamespace_tag_path \u003d \"[default]namespace\"\n\tnamespace_value \u003d system.tag.read(namespace_tag_path).value\n\t\n\t# Construct the MQTT topic using the UDT instance name\n\tmqtt_topic \u003d namespace_value + udt_instance_name\n\t\n\t# Publish the current value to the MQTT topic\n\tsystem.cirruslink.engine.publish(\"Pi\", mqtt_topic, str(currentValue.value),0,0)\n"
                    }
                  ],
                  "value": false,
                  "name": "out3",
                  "tagType": "AtomicTag"
                },
                {
                  "eventScripts": [
                    {
                      "eventid": "valueChanged",
                      "script": "\t# Extract the UDT instance name from the tag path\n\tudt_instance_name \u003d \u0027/\u0027.join(tagPath.split(\"/\")[-3:])\n\t\n\t# Read the namespace from the default provider\n\tnamespace_tag_path \u003d \"[default]namespace\"\n\tnamespace_value \u003d system.tag.read(namespace_tag_path).value\n\t\n\t# Construct the MQTT topic using the UDT instance name\n\tmqtt_topic \u003d namespace_value + udt_instance_name\n\t\n\t# Publish the current value to the MQTT topic\n\tsystem.cirruslink.engine.publish(\"Pi\", mqtt_topic, str(currentValue.value),0,0)\n\t"
                    }
                  ],
                  "value": false,
                  "name": "out1",
                  "tagType": "AtomicTag"
                },
                {
                  "eventScripts": [
                    {
                      "eventid": "valueChanged",
                      "script": "\t# Extract the UDT instance name from the tag path\n\tudt_instance_name \u003d \u0027/\u0027.join(tagPath.split(\"/\")[-3:])\n\t\n\t# Read the namespace from the default provider\n\tnamespace_tag_path \u003d \"[default]namespace\"\n\tnamespace_value \u003d system.tag.read(namespace_tag_path).value\n\t\n\t# Construct the MQTT topic using the UDT instance name\n\tmqtt_topic \u003d namespace_value + udt_instance_name\n\t\n\t# Publish the current value to the MQTT topic\n\tsystem.cirruslink.engine.publish(\"Pi\", mqtt_topic, str(currentValue.value),0,0)\n"
                    }
                  ],
                  "value": 0,
                  "name": "stepperStep",
                  "tagType": "AtomicTag"
                },
                {
                  "eventScripts": [
                    {
                      "eventid": "valueChanged",
                      "script": "\t# Extract the UDT instance name from the tag path\n\tudt_instance_name \u003d \u0027/\u0027.join(tagPath.split(\"/\")[-3:])\n\t\n\t# Read the namespace from the default provider\n\tnamespace_tag_path \u003d \"[default]namespace\"\n\tnamespace_value \u003d system.tag.read(namespace_tag_path).value\n\t\n\t# Construct the MQTT topic using the UDT instance name\n\tmqtt_topic \u003d namespace_value + udt_instance_name\n\t\n\t# Publish the current value to the MQTT topic\n\tsystem.cirruslink.engine.publish(\"Pi\", mqtt_topic, str(currentValue.value),0,0)\n"
                    }
                  ],
                  "value": "null",
                  "name": "message",
                  "tagType": "AtomicTag"
                },
                {
                  "eventScripts": [
                    {
                      "eventid": "valueChanged",
                      "script": "\t# Extract the UDT instance name from the tag path\n\tudt_instance_name \u003d \u0027/\u0027.join(tagPath.split(\"/\")[-3:])\n\t\n\t# Read the namespace from the default provider\n\tnamespace_tag_path \u003d \"[default]namespace\"\n\tnamespace_value \u003d system.tag.read(namespace_tag_path).value\n\t\n\t# Construct the MQTT topic using the UDT instance name\n\tmqtt_topic \u003d namespace_value + udt_instance_name\n\t\n\t# Publish the current value to the MQTT topic\n\tsystem.cirruslink.engine.publish(\"Pi\", mqtt_topic, str(currentValue.value),0,0)\n"
                    }
                  ],
                  "value": false,
                  "name": "out4",
                  "tagType": "AtomicTag"
                },
                {
                  "eventScripts": [
                    {
                      "eventid": "valueChanged",
                      "script": "\t# Extract the UDT instance name from the tag path\n\tudt_instance_name \u003d \u0027/\u0027.join(tagPath.split(\"/\")[-3:])\n\t\n\t# Read the namespace from the default provider\n\tnamespace_tag_path \u003d \"[default]namespace\"\n\tnamespace_value \u003d system.tag.read(namespace_tag_path).value\n\t\n\t# Construct the MQTT topic using the UDT instance name\n\tmqtt_topic \u003d namespace_value + udt_instance_name\n\t\n\t# Publish the current value to the MQTT topic\n\tsystem.cirruslink.engine.publish(\"Pi\", mqtt_topic, str(currentValue.value),0,0)\n"
                    }
                  ],
                  "value": false,
                  "name": "out2",
                  "tagType": "AtomicTag"
                }
              ]
            },
            {
              "name": "in",
              "tagType": "Folder",
              "tags": [
                {
                  "name": "in1",
                  "tagType": "AtomicTag"
                },
                {
                  "name": "sensor1",
                  "tagType": "AtomicTag"
                },
                {
                  "name": "sensor2",
                  "tagType": "AtomicTag"
                }
              ]
            },
            {
              "name": "count",
              "tagType": "AtomicTag"
            }
          ]
        },
        {
          "out3": false,
          "name": "thing25",
          "typeId": "thing",
          "tagType": "UdtInstance",
          "tags": [
            {
              "name": "out",
              "tagType": "Folder",
              "tags": [
                {
                  "eventScripts": [
                    {
                      "eventid": "valueChanged",
                      "script": "\t# Extract the UDT instance name from the tag path\n\tudt_instance_name \u003d \u0027/\u0027.join(tagPath.split(\"/\")[-3:])\n\t\n\t# Read the namespace from the default provider\n\tnamespace_tag_path \u003d \"[default]namespace\"\n\tnamespace_value \u003d system.tag.read(namespace_tag_path).value\n\t\n\t# Construct the MQTT topic using the UDT instance name\n\tmqtt_topic \u003d namespace_value + udt_instance_name\n\t\n\t# Publish the current value to the MQTT topic\n\tsystem.cirruslink.engine.publish(\"Pi\", mqtt_topic, str(currentValue.value),0,0)\n"
                    }
                  ],
                  "value": false,
                  "name": "out3",
                  "tagType": "AtomicTag"
                },
                {
                  "eventScripts": [
                    {
                      "eventid": "valueChanged",
                      "script": "\t# Extract the UDT instance name from the tag path\n\tudt_instance_name \u003d \u0027/\u0027.join(tagPath.split(\"/\")[-3:])\n\t\n\t# Read the namespace from the default provider\n\tnamespace_tag_path \u003d \"[default]namespace\"\n\tnamespace_value \u003d system.tag.read(namespace_tag_path).value\n\t\n\t# Construct the MQTT topic using the UDT instance name\n\tmqtt_topic \u003d namespace_value + udt_instance_name\n\t\n\t# Publish the current value to the MQTT topic\n\tsystem.cirruslink.engine.publish(\"Pi\", mqtt_topic, str(currentValue.value),0,0)\n"
                    }
                  ],
                  "value": "null",
                  "name": "message",
                  "tagType": "AtomicTag"
                },
                {
                  "eventScripts": [
                    {
                      "eventid": "valueChanged",
                      "script": "\t# Extract the UDT instance name from the tag path\n\tudt_instance_name \u003d \u0027/\u0027.join(tagPath.split(\"/\")[-3:])\n\t\n\t# Read the namespace from the default provider\n\tnamespace_tag_path \u003d \"[default]namespace\"\n\tnamespace_value \u003d system.tag.read(namespace_tag_path).value\n\t\n\t# Construct the MQTT topic using the UDT instance name\n\tmqtt_topic \u003d namespace_value + udt_instance_name\n\t\n\t# Publish the current value to the MQTT topic\n\tsystem.cirruslink.engine.publish(\"Pi\", mqtt_topic, str(currentValue.value),0,0)\n\t"
                    }
                  ],
                  "value": false,
                  "name": "out1",
                  "tagType": "AtomicTag"
                },
                {
                  "eventScripts": [
                    {
                      "eventid": "valueChanged",
                      "script": "\t# Extract the UDT instance name from the tag path\n\tudt_instance_name \u003d \u0027/\u0027.join(tagPath.split(\"/\")[-3:])\n\t\n\t# Read the namespace from the default provider\n\tnamespace_tag_path \u003d \"[default]namespace\"\n\tnamespace_value \u003d system.tag.read(namespace_tag_path).value\n\t\n\t# Construct the MQTT topic using the UDT instance name\n\tmqtt_topic \u003d namespace_value + udt_instance_name\n\t\n\t# Publish the current value to the MQTT topic\n\tsystem.cirruslink.engine.publish(\"Pi\", mqtt_topic, str(currentValue.value),0,0)\n"
                    }
                  ],
                  "value": -2000,
                  "name": "stepperStep",
                  "tagType": "AtomicTag"
                },
                {
                  "eventScripts": [
                    {
                      "eventid": "valueChanged",
                      "script": "\t# Extract the UDT instance name from the tag path\n\tudt_instance_name \u003d \u0027/\u0027.join(tagPath.split(\"/\")[-3:])\n\t\n\t# Read the namespace from the default provider\n\tnamespace_tag_path \u003d \"[default]namespace\"\n\tnamespace_value \u003d system.tag.read(namespace_tag_path).value\n\t\n\t# Construct the MQTT topic using the UDT instance name\n\tmqtt_topic \u003d namespace_value + udt_instance_name\n\t\n\t# Publish the current value to the MQTT topic\n\tsystem.cirruslink.engine.publish(\"Pi\", mqtt_topic, str(currentValue.value),0,0)\n"
                    }
                  ],
                  "value": false,
                  "name": "out4",
                  "tagType": "AtomicTag"
                },
                {
                  "eventScripts": [
                    {
                      "eventid": "valueChanged",
                      "script": "\t# Extract the UDT instance name from the tag path\n\tudt_instance_name \u003d \u0027/\u0027.join(tagPath.split(\"/\")[-3:])\n\t\n\t# Read the namespace from the default provider\n\tnamespace_tag_path \u003d \"[default]namespace\"\n\tnamespace_value \u003d system.tag.read(namespace_tag_path).value\n\t\n\t# Construct the MQTT topic using the UDT instance name\n\tmqtt_topic \u003d namespace_value + udt_instance_name\n\t\n\t# Publish the current value to the MQTT topic\n\tsystem.cirruslink.engine.publish(\"Pi\", mqtt_topic, str(currentValue.value),0,0)\n"
                    }
                  ],
                  "value": 20,
                  "name": "stepperSpeed",
                  "tagType": "AtomicTag"
                },
                {
                  "eventScripts": [
                    {
                      "eventid": "valueChanged",
                      "script": "\t# Extract the UDT instance name from the tag path\n\tudt_instance_name \u003d \u0027/\u0027.join(tagPath.split(\"/\")[-3:])\n\t\n\t# Read the namespace from the default provider\n\tnamespace_tag_path \u003d \"[default]namespace\"\n\tnamespace_value \u003d system.tag.read(namespace_tag_path).value\n\t\n\t# Construct the MQTT topic using the UDT instance name\n\tmqtt_topic \u003d namespace_value + udt_instance_name\n\t\n\t# Publish the current value to the MQTT topic\n\tsystem.cirruslink.engine.publish(\"Pi\", mqtt_topic, str(currentValue.value),0,0)\n"
                    }
                  ],
                  "value": false,
                  "name": "out2",
                  "tagType": "AtomicTag"
                }
              ]
            },
            {
              "name": "count",
              "tagType": "AtomicTag"
            },
            {
              "name": "in",
              "tagType": "Folder",
              "tags": [
                {
                  "name": "sensor1",
                  "tagType": "AtomicTag"
                },
                {
                  "name": "in1",
                  "tagType": "AtomicTag"
                },
                {
                  "name": "sensor2",
                  "tagType": "AtomicTag"
                }
              ]
            }
          ]
        },
        {
          "out3": false,
          "name": "thing20",
          "typeId": "thing",
          "tagType": "UdtInstance",
          "tags": [
            {
              "name": "out",
              "tagType": "Folder",
              "tags": [
                {
                  "eventScripts": [
                    {
                      "eventid": "valueChanged",
                      "script": "\t# Extract the UDT instance name from the tag path\n\tudt_instance_name \u003d \u0027/\u0027.join(tagPath.split(\"/\")[-3:])\n\t\n\t# Read the namespace from the default provider\n\tnamespace_tag_path \u003d \"[default]namespace\"\n\tnamespace_value \u003d system.tag.read(namespace_tag_path).value\n\t\n\t# Construct the MQTT topic using the UDT instance name\n\tmqtt_topic \u003d namespace_value + udt_instance_name\n\t\n\t# Publish the current value to the MQTT topic\n\tsystem.cirruslink.engine.publish(\"Pi\", mqtt_topic, str(currentValue.value),0,0)\n"
                    }
                  ],
                  "value": false,
                  "name": "out2",
                  "tagType": "AtomicTag"
                },
                {
                  "eventScripts": [
                    {
                      "eventid": "valueChanged",
                      "script": "\t# Extract the UDT instance name from the tag path\n\tudt_instance_name \u003d \u0027/\u0027.join(tagPath.split(\"/\")[-3:])\n\t\n\t# Read the namespace from the default provider\n\tnamespace_tag_path \u003d \"[default]namespace\"\n\tnamespace_value \u003d system.tag.read(namespace_tag_path).value\n\t\n\t# Construct the MQTT topic using the UDT instance name\n\tmqtt_topic \u003d namespace_value + udt_instance_name\n\t\n\t# Publish the current value to the MQTT topic\n\tsystem.cirruslink.engine.publish(\"Pi\", mqtt_topic, str(currentValue.value),0,0)\n"
                    }
                  ],
                  "value": -2000,
                  "name": "stepperStep",
                  "tagType": "AtomicTag"
                },
                {
                  "eventScripts": [
                    {
                      "eventid": "valueChanged",
                      "script": "\t# Extract the UDT instance name from the tag path\n\tudt_instance_name \u003d \u0027/\u0027.join(tagPath.split(\"/\")[-3:])\n\t\n\t# Read the namespace from the default provider\n\tnamespace_tag_path \u003d \"[default]namespace\"\n\tnamespace_value \u003d system.tag.read(namespace_tag_path).value\n\t\n\t# Construct the MQTT topic using the UDT instance name\n\tmqtt_topic \u003d namespace_value + udt_instance_name\n\t\n\t# Publish the current value to the MQTT topic\n\tsystem.cirruslink.engine.publish(\"Pi\", mqtt_topic, str(currentValue.value),0,0)\n"
                    }
                  ],
                  "value": "null",
                  "name": "message",
                  "tagType": "AtomicTag"
                },
                {
                  "eventScripts": [
                    {
                      "eventid": "valueChanged",
                      "script": "\t# Extract the UDT instance name from the tag path\n\tudt_instance_name \u003d \u0027/\u0027.join(tagPath.split(\"/\")[-3:])\n\t\n\t# Read the namespace from the default provider\n\tnamespace_tag_path \u003d \"[default]namespace\"\n\tnamespace_value \u003d system.tag.read(namespace_tag_path).value\n\t\n\t# Construct the MQTT topic using the UDT instance name\n\tmqtt_topic \u003d namespace_value + udt_instance_name\n\t\n\t# Publish the current value to the MQTT topic\n\tsystem.cirruslink.engine.publish(\"Pi\", mqtt_topic, str(currentValue.value),0,0)\n"
                    }
                  ],
                  "value": false,
                  "name": "out4",
                  "tagType": "AtomicTag"
                },
                {
                  "eventScripts": [
                    {
                      "eventid": "valueChanged",
                      "script": "\t# Extract the UDT instance name from the tag path\n\tudt_instance_name \u003d \u0027/\u0027.join(tagPath.split(\"/\")[-3:])\n\t\n\t# Read the namespace from the default provider\n\tnamespace_tag_path \u003d \"[default]namespace\"\n\tnamespace_value \u003d system.tag.read(namespace_tag_path).value\n\t\n\t# Construct the MQTT topic using the UDT instance name\n\tmqtt_topic \u003d namespace_value + udt_instance_name\n\t\n\t# Publish the current value to the MQTT topic\n\tsystem.cirruslink.engine.publish(\"Pi\", mqtt_topic, str(currentValue.value),0,0)\n\t"
                    }
                  ],
                  "value": false,
                  "name": "out1",
                  "tagType": "AtomicTag"
                },
                {
                  "eventScripts": [
                    {
                      "eventid": "valueChanged",
                      "script": "\t# Extract the UDT instance name from the tag path\n\tudt_instance_name \u003d \u0027/\u0027.join(tagPath.split(\"/\")[-3:])\n\t\n\t# Read the namespace from the default provider\n\tnamespace_tag_path \u003d \"[default]namespace\"\n\tnamespace_value \u003d system.tag.read(namespace_tag_path).value\n\t\n\t# Construct the MQTT topic using the UDT instance name\n\tmqtt_topic \u003d namespace_value + udt_instance_name\n\t\n\t# Publish the current value to the MQTT topic\n\tsystem.cirruslink.engine.publish(\"Pi\", mqtt_topic, str(currentValue.value),0,0)\n"
                    }
                  ],
                  "value": false,
                  "name": "out3",
                  "tagType": "AtomicTag"
                },
                {
                  "eventScripts": [
                    {
                      "eventid": "valueChanged",
                      "script": "\t# Extract the UDT instance name from the tag path\n\tudt_instance_name \u003d \u0027/\u0027.join(tagPath.split(\"/\")[-3:])\n\t\n\t# Read the namespace from the default provider\n\tnamespace_tag_path \u003d \"[default]namespace\"\n\tnamespace_value \u003d system.tag.read(namespace_tag_path).value\n\t\n\t# Construct the MQTT topic using the UDT instance name\n\tmqtt_topic \u003d namespace_value + udt_instance_name\n\t\n\t# Publish the current value to the MQTT topic\n\tsystem.cirruslink.engine.publish(\"Pi\", mqtt_topic, str(currentValue.value),0,0)\n"
                    }
                  ],
                  "value": 20,
                  "name": "stepperSpeed",
                  "tagType": "AtomicTag"
                }
              ]
            },
            {
              "name": "count",
              "tagType": "AtomicTag"
            },
            {
              "name": "in",
              "tagType": "Folder",
              "tags": [
                {
                  "name": "in1",
                  "tagType": "AtomicTag"
                },
                {
                  "name": "sensor1",
                  "tagType": "AtomicTag"
                },
                {
                  "name": "sensor2",
                  "tagType": "AtomicTag"
                }
              ]
            }
          ]
        },
        {
          "out3": false,
          "name": "thing7",
          "typeId": "thing",
          "tagType": "UdtInstance",
          "tags": [
            {
              "name": "count",
              "tagType": "AtomicTag"
            },
            {
              "name": "out",
              "tagType": "Folder",
              "tags": [
                {
                  "eventScripts": [
                    {
                      "eventid": "valueChanged",
                      "script": "\t# Extract the UDT instance name from the tag path\n\tudt_instance_name \u003d \u0027/\u0027.join(tagPath.split(\"/\")[-3:])\n\t\n\t# Read the namespace from the default provider\n\tnamespace_tag_path \u003d \"[default]namespace\"\n\tnamespace_value \u003d system.tag.read(namespace_tag_path).value\n\t\n\t# Construct the MQTT topic using the UDT instance name\n\tmqtt_topic \u003d namespace_value + udt_instance_name\n\t\n\t# Publish the current value to the MQTT topic\n\tsystem.cirruslink.engine.publish(\"Pi\", mqtt_topic, str(currentValue.value),0,0)\n"
                    }
                  ],
                  "value": 20,
                  "name": "stepperSpeed",
                  "tagType": "AtomicTag"
                },
                {
                  "eventScripts": [
                    {
                      "eventid": "valueChanged",
                      "script": "\t# Extract the UDT instance name from the tag path\n\tudt_instance_name \u003d \u0027/\u0027.join(tagPath.split(\"/\")[-3:])\n\t\n\t# Read the namespace from the default provider\n\tnamespace_tag_path \u003d \"[default]namespace\"\n\tnamespace_value \u003d system.tag.read(namespace_tag_path).value\n\t\n\t# Construct the MQTT topic using the UDT instance name\n\tmqtt_topic \u003d namespace_value + udt_instance_name\n\t\n\t# Publish the current value to the MQTT topic\n\tsystem.cirruslink.engine.publish(\"Pi\", mqtt_topic, str(currentValue.value),0,0)\n"
                    }
                  ],
                  "value": false,
                  "name": "out3",
                  "tagType": "AtomicTag"
                },
                {
                  "eventScripts": [
                    {
                      "eventid": "valueChanged",
                      "script": "\t# Extract the UDT instance name from the tag path\n\tudt_instance_name \u003d \u0027/\u0027.join(tagPath.split(\"/\")[-3:])\n\t\n\t# Read the namespace from the default provider\n\tnamespace_tag_path \u003d \"[default]namespace\"\n\tnamespace_value \u003d system.tag.read(namespace_tag_path).value\n\t\n\t# Construct the MQTT topic using the UDT instance name\n\tmqtt_topic \u003d namespace_value + udt_instance_name\n\t\n\t# Publish the current value to the MQTT topic\n\tsystem.cirruslink.engine.publish(\"Pi\", mqtt_topic, str(currentValue.value),0,0)\n"
                    }
                  ],
                  "value": "null",
                  "name": "message",
                  "tagType": "AtomicTag"
                },
                {
                  "eventScripts": [
                    {
                      "eventid": "valueChanged",
                      "script": "\t# Extract the UDT instance name from the tag path\n\tudt_instance_name \u003d \u0027/\u0027.join(tagPath.split(\"/\")[-3:])\n\t\n\t# Read the namespace from the default provider\n\tnamespace_tag_path \u003d \"[default]namespace\"\n\tnamespace_value \u003d system.tag.read(namespace_tag_path).value\n\t\n\t# Construct the MQTT topic using the UDT instance name\n\tmqtt_topic \u003d namespace_value + udt_instance_name\n\t\n\t# Publish the current value to the MQTT topic\n\tsystem.cirruslink.engine.publish(\"Pi\", mqtt_topic, str(currentValue.value),0,0)\n"
                    }
                  ],
                  "value": false,
                  "name": "out2",
                  "tagType": "AtomicTag"
                },
                {
                  "eventScripts": [
                    {
                      "eventid": "valueChanged",
                      "script": "\t# Extract the UDT instance name from the tag path\n\tudt_instance_name \u003d \u0027/\u0027.join(tagPath.split(\"/\")[-3:])\n\t\n\t# Read the namespace from the default provider\n\tnamespace_tag_path \u003d \"[default]namespace\"\n\tnamespace_value \u003d system.tag.read(namespace_tag_path).value\n\t\n\t# Construct the MQTT topic using the UDT instance name\n\tmqtt_topic \u003d namespace_value + udt_instance_name\n\t\n\t# Publish the current value to the MQTT topic\n\tsystem.cirruslink.engine.publish(\"Pi\", mqtt_topic, str(currentValue.value),0,0)\n\t"
                    }
                  ],
                  "value": false,
                  "name": "out1",
                  "tagType": "AtomicTag"
                },
                {
                  "eventScripts": [
                    {
                      "eventid": "valueChanged",
                      "script": "\t# Extract the UDT instance name from the tag path\n\tudt_instance_name \u003d \u0027/\u0027.join(tagPath.split(\"/\")[-3:])\n\t\n\t# Read the namespace from the default provider\n\tnamespace_tag_path \u003d \"[default]namespace\"\n\tnamespace_value \u003d system.tag.read(namespace_tag_path).value\n\t\n\t# Construct the MQTT topic using the UDT instance name\n\tmqtt_topic \u003d namespace_value + udt_instance_name\n\t\n\t# Publish the current value to the MQTT topic\n\tsystem.cirruslink.engine.publish(\"Pi\", mqtt_topic, str(currentValue.value),0,0)\n"
                    }
                  ],
                  "value": 0,
                  "name": "stepperStep",
                  "tagType": "AtomicTag"
                },
                {
                  "eventScripts": [
                    {
                      "eventid": "valueChanged",
                      "script": "\t# Extract the UDT instance name from the tag path\n\tudt_instance_name \u003d \u0027/\u0027.join(tagPath.split(\"/\")[-3:])\n\t\n\t# Read the namespace from the default provider\n\tnamespace_tag_path \u003d \"[default]namespace\"\n\tnamespace_value \u003d system.tag.read(namespace_tag_path).value\n\t\n\t# Construct the MQTT topic using the UDT instance name\n\tmqtt_topic \u003d namespace_value + udt_instance_name\n\t\n\t# Publish the current value to the MQTT topic\n\tsystem.cirruslink.engine.publish(\"Pi\", mqtt_topic, str(currentValue.value),0,0)\n"
                    }
                  ],
                  "value": false,
                  "name": "out4",
                  "tagType": "AtomicTag"
                }
              ]
            },
            {
              "name": "in",
              "tagType": "Folder",
              "tags": [
                {
                  "name": "sensor1",
                  "tagType": "AtomicTag"
                },
                {
                  "name": "in1",
                  "tagType": "AtomicTag"
                },
                {
                  "name": "sensor2",
                  "tagType": "AtomicTag"
                }
              ]
            }
          ]
        },
        {
          "out3": false,
          "name": "thing12",
          "typeId": "thing",
          "tagType": "UdtInstance",
          "tags": [
            {
              "name": "out",
              "tagType": "Folder",
              "tags": [
                {
                  "eventScripts": [
                    {
                      "eventid": "valueChanged",
                      "script": "\t# Extract the UDT instance name from the tag path\n\tudt_instance_name \u003d \u0027/\u0027.join(tagPath.split(\"/\")[-3:])\n\t\n\t# Read the namespace from the default provider\n\tnamespace_tag_path \u003d \"[default]namespace\"\n\tnamespace_value \u003d system.tag.read(namespace_tag_path).value\n\t\n\t# Construct the MQTT topic using the UDT instance name\n\tmqtt_topic \u003d namespace_value + udt_instance_name\n\t\n\t# Publish the current value to the MQTT topic\n\tsystem.cirruslink.engine.publish(\"Pi\", mqtt_topic, str(currentValue.value),0,0)\n"
                    }
                  ],
                  "value": 0,
                  "name": "stepperStep",
                  "tagType": "AtomicTag"
                },
                {
                  "eventScripts": [
                    {
                      "eventid": "valueChanged",
                      "script": "\t# Extract the UDT instance name from the tag path\n\tudt_instance_name \u003d \u0027/\u0027.join(tagPath.split(\"/\")[-3:])\n\t\n\t# Read the namespace from the default provider\n\tnamespace_tag_path \u003d \"[default]namespace\"\n\tnamespace_value \u003d system.tag.read(namespace_tag_path).value\n\t\n\t# Construct the MQTT topic using the UDT instance name\n\tmqtt_topic \u003d namespace_value + udt_instance_name\n\t\n\t# Publish the current value to the MQTT topic\n\tsystem.cirruslink.engine.publish(\"Pi\", mqtt_topic, str(currentValue.value),0,0)\n"
                    }
                  ],
                  "value": false,
                  "name": "out4",
                  "tagType": "AtomicTag"
                },
                {
                  "eventScripts": [
                    {
                      "eventid": "valueChanged",
                      "script": "\t# Extract the UDT instance name from the tag path\n\tudt_instance_name \u003d \u0027/\u0027.join(tagPath.split(\"/\")[-3:])\n\t\n\t# Read the namespace from the default provider\n\tnamespace_tag_path \u003d \"[default]namespace\"\n\tnamespace_value \u003d system.tag.read(namespace_tag_path).value\n\t\n\t# Construct the MQTT topic using the UDT instance name\n\tmqtt_topic \u003d namespace_value + udt_instance_name\n\t\n\t# Publish the current value to the MQTT topic\n\tsystem.cirruslink.engine.publish(\"Pi\", mqtt_topic, str(currentValue.value),0,0)\n\t"
                    }
                  ],
                  "value": false,
                  "name": "out1",
                  "tagType": "AtomicTag"
                },
                {
                  "eventScripts": [
                    {
                      "eventid": "valueChanged",
                      "script": "\t# Extract the UDT instance name from the tag path\n\tudt_instance_name \u003d \u0027/\u0027.join(tagPath.split(\"/\")[-3:])\n\t\n\t# Read the namespace from the default provider\n\tnamespace_tag_path \u003d \"[default]namespace\"\n\tnamespace_value \u003d system.tag.read(namespace_tag_path).value\n\t\n\t# Construct the MQTT topic using the UDT instance name\n\tmqtt_topic \u003d namespace_value + udt_instance_name\n\t\n\t# Publish the current value to the MQTT topic\n\tsystem.cirruslink.engine.publish(\"Pi\", mqtt_topic, str(currentValue.value),0,0)\n"
                    }
                  ],
                  "value": "null",
                  "name": "message",
                  "tagType": "AtomicTag"
                },
                {
                  "eventScripts": [
                    {
                      "eventid": "valueChanged",
                      "script": "\t# Extract the UDT instance name from the tag path\n\tudt_instance_name \u003d \u0027/\u0027.join(tagPath.split(\"/\")[-3:])\n\t\n\t# Read the namespace from the default provider\n\tnamespace_tag_path \u003d \"[default]namespace\"\n\tnamespace_value \u003d system.tag.read(namespace_tag_path).value\n\t\n\t# Construct the MQTT topic using the UDT instance name\n\tmqtt_topic \u003d namespace_value + udt_instance_name\n\t\n\t# Publish the current value to the MQTT topic\n\tsystem.cirruslink.engine.publish(\"Pi\", mqtt_topic, str(currentValue.value),0,0)\n"
                    }
                  ],
                  "value": false,
                  "name": "out3",
                  "tagType": "AtomicTag"
                },
                {
                  "eventScripts": [
                    {
                      "eventid": "valueChanged",
                      "script": "\t# Extract the UDT instance name from the tag path\n\tudt_instance_name \u003d \u0027/\u0027.join(tagPath.split(\"/\")[-3:])\n\t\n\t# Read the namespace from the default provider\n\tnamespace_tag_path \u003d \"[default]namespace\"\n\tnamespace_value \u003d system.tag.read(namespace_tag_path).value\n\t\n\t# Construct the MQTT topic using the UDT instance name\n\tmqtt_topic \u003d namespace_value + udt_instance_name\n\t\n\t# Publish the current value to the MQTT topic\n\tsystem.cirruslink.engine.publish(\"Pi\", mqtt_topic, str(currentValue.value),0,0)\n"
                    }
                  ],
                  "value": 20,
                  "name": "stepperSpeed",
                  "tagType": "AtomicTag"
                },
                {
                  "eventScripts": [
                    {
                      "eventid": "valueChanged",
                      "script": "\t# Extract the UDT instance name from the tag path\n\tudt_instance_name \u003d \u0027/\u0027.join(tagPath.split(\"/\")[-3:])\n\t\n\t# Read the namespace from the default provider\n\tnamespace_tag_path \u003d \"[default]namespace\"\n\tnamespace_value \u003d system.tag.read(namespace_tag_path).value\n\t\n\t# Construct the MQTT topic using the UDT instance name\n\tmqtt_topic \u003d namespace_value + udt_instance_name\n\t\n\t# Publish the current value to the MQTT topic\n\tsystem.cirruslink.engine.publish(\"Pi\", mqtt_topic, str(currentValue.value),0,0)\n"
                    }
                  ],
                  "value": false,
                  "name": "out2",
                  "tagType": "AtomicTag"
                }
              ]
            },
            {
              "name": "count",
              "tagType": "AtomicTag"
            },
            {
              "name": "in",
              "tagType": "Folder",
              "tags": [
                {
                  "name": "in1",
                  "tagType": "AtomicTag"
                },
                {
                  "name": "sensor1",
                  "tagType": "AtomicTag"
                },
                {
                  "name": "sensor2",
                  "tagType": "AtomicTag"
                }
              ]
            }
          ]
        },
        {
          "out3": false,
          "name": "thing15",
          "typeId": "thing",
          "tagType": "UdtInstance",
          "tags": [
            {
              "name": "out",
              "tagType": "Folder",
              "tags": [
                {
                  "eventScripts": [
                    {
                      "eventid": "valueChanged",
                      "script": "\t# Extract the UDT instance name from the tag path\n\tudt_instance_name \u003d \u0027/\u0027.join(tagPath.split(\"/\")[-3:])\n\t\n\t# Read the namespace from the default provider\n\tnamespace_tag_path \u003d \"[default]namespace\"\n\tnamespace_value \u003d system.tag.read(namespace_tag_path).value\n\t\n\t# Construct the MQTT topic using the UDT instance name\n\tmqtt_topic \u003d namespace_value + udt_instance_name\n\t\n\t# Publish the current value to the MQTT topic\n\tsystem.cirruslink.engine.publish(\"Pi\", mqtt_topic, str(currentValue.value),0,0)\n\t"
                    }
                  ],
                  "value": false,
                  "name": "out1",
                  "tagType": "AtomicTag"
                },
                {
                  "eventScripts": [
                    {
                      "eventid": "valueChanged",
                      "script": "\t# Extract the UDT instance name from the tag path\n\tudt_instance_name \u003d \u0027/\u0027.join(tagPath.split(\"/\")[-3:])\n\t\n\t# Read the namespace from the default provider\n\tnamespace_tag_path \u003d \"[default]namespace\"\n\tnamespace_value \u003d system.tag.read(namespace_tag_path).value\n\t\n\t# Construct the MQTT topic using the UDT instance name\n\tmqtt_topic \u003d namespace_value + udt_instance_name\n\t\n\t# Publish the current value to the MQTT topic\n\tsystem.cirruslink.engine.publish(\"Pi\", mqtt_topic, str(currentValue.value),0,0)\n"
                    }
                  ],
                  "value": false,
                  "name": "out4",
                  "tagType": "AtomicTag"
                },
                {
                  "eventScripts": [
                    {
                      "eventid": "valueChanged",
                      "script": "\t# Extract the UDT instance name from the tag path\n\tudt_instance_name \u003d \u0027/\u0027.join(tagPath.split(\"/\")[-3:])\n\t\n\t# Read the namespace from the default provider\n\tnamespace_tag_path \u003d \"[default]namespace\"\n\tnamespace_value \u003d system.tag.read(namespace_tag_path).value\n\t\n\t# Construct the MQTT topic using the UDT instance name\n\tmqtt_topic \u003d namespace_value + udt_instance_name\n\t\n\t# Publish the current value to the MQTT topic\n\tsystem.cirruslink.engine.publish(\"Pi\", mqtt_topic, str(currentValue.value),0,0)\n"
                    }
                  ],
                  "value": "null",
                  "name": "message",
                  "tagType": "AtomicTag"
                },
                {
                  "eventScripts": [
                    {
                      "eventid": "valueChanged",
                      "script": "\t# Extract the UDT instance name from the tag path\n\tudt_instance_name \u003d \u0027/\u0027.join(tagPath.split(\"/\")[-3:])\n\t\n\t# Read the namespace from the default provider\n\tnamespace_tag_path \u003d \"[default]namespace\"\n\tnamespace_value \u003d system.tag.read(namespace_tag_path).value\n\t\n\t# Construct the MQTT topic using the UDT instance name\n\tmqtt_topic \u003d namespace_value + udt_instance_name\n\t\n\t# Publish the current value to the MQTT topic\n\tsystem.cirruslink.engine.publish(\"Pi\", mqtt_topic, str(currentValue.value),0,0)\n"
                    }
                  ],
                  "value": 0,
                  "name": "stepperStep",
                  "tagType": "AtomicTag"
                },
                {
                  "eventScripts": [
                    {
                      "eventid": "valueChanged",
                      "script": "\t# Extract the UDT instance name from the tag path\n\tudt_instance_name \u003d \u0027/\u0027.join(tagPath.split(\"/\")[-3:])\n\t\n\t# Read the namespace from the default provider\n\tnamespace_tag_path \u003d \"[default]namespace\"\n\tnamespace_value \u003d system.tag.read(namespace_tag_path).value\n\t\n\t# Construct the MQTT topic using the UDT instance name\n\tmqtt_topic \u003d namespace_value + udt_instance_name\n\t\n\t# Publish the current value to the MQTT topic\n\tsystem.cirruslink.engine.publish(\"Pi\", mqtt_topic, str(currentValue.value),0,0)\n"
                    }
                  ],
                  "value": 20,
                  "name": "stepperSpeed",
                  "tagType": "AtomicTag"
                },
                {
                  "eventScripts": [
                    {
                      "eventid": "valueChanged",
                      "script": "\t# Extract the UDT instance name from the tag path\n\tudt_instance_name \u003d \u0027/\u0027.join(tagPath.split(\"/\")[-3:])\n\t\n\t# Read the namespace from the default provider\n\tnamespace_tag_path \u003d \"[default]namespace\"\n\tnamespace_value \u003d system.tag.read(namespace_tag_path).value\n\t\n\t# Construct the MQTT topic using the UDT instance name\n\tmqtt_topic \u003d namespace_value + udt_instance_name\n\t\n\t# Publish the current value to the MQTT topic\n\tsystem.cirruslink.engine.publish(\"Pi\", mqtt_topic, str(currentValue.value),0,0)\n"
                    }
                  ],
                  "value": false,
                  "name": "out3",
                  "tagType": "AtomicTag"
                },
                {
                  "eventScripts": [
                    {
                      "eventid": "valueChanged",
                      "script": "\t# Extract the UDT instance name from the tag path\n\tudt_instance_name \u003d \u0027/\u0027.join(tagPath.split(\"/\")[-3:])\n\t\n\t# Read the namespace from the default provider\n\tnamespace_tag_path \u003d \"[default]namespace\"\n\tnamespace_value \u003d system.tag.read(namespace_tag_path).value\n\t\n\t# Construct the MQTT topic using the UDT instance name\n\tmqtt_topic \u003d namespace_value + udt_instance_name\n\t\n\t# Publish the current value to the MQTT topic\n\tsystem.cirruslink.engine.publish(\"Pi\", mqtt_topic, str(currentValue.value),0,0)\n"
                    }
                  ],
                  "value": false,
                  "name": "out2",
                  "tagType": "AtomicTag"
                }
              ]
            },
            {
              "name": "count",
              "tagType": "AtomicTag"
            },
            {
              "name": "in",
              "tagType": "Folder",
              "tags": [
                {
                  "name": "sensor2",
                  "tagType": "AtomicTag"
                },
                {
                  "name": "in1",
                  "tagType": "AtomicTag"
                },
                {
                  "name": "sensor1",
                  "tagType": "AtomicTag"
                }
              ]
            }
          ]
        },
        {
          "out3": false,
          "name": "thing31",
          "typeId": "thing",
          "tagType": "UdtInstance",
          "tags": [
            {
              "name": "in",
              "tagType": "Folder",
              "tags": [
                {
                  "name": "sensor2",
                  "tagType": "AtomicTag"
                },
                {
                  "name": "in1",
                  "tagType": "AtomicTag"
                },
                {
                  "name": "sensor1",
                  "tagType": "AtomicTag"
                }
              ]
            },
            {
              "name": "out",
              "tagType": "Folder",
              "tags": [
                {
                  "eventScripts": [
                    {
                      "eventid": "valueChanged",
                      "script": "\t# Extract the UDT instance name from the tag path\n\tudt_instance_name \u003d \u0027/\u0027.join(tagPath.split(\"/\")[-3:])\n\t\n\t# Read the namespace from the default provider\n\tnamespace_tag_path \u003d \"[default]namespace\"\n\tnamespace_value \u003d system.tag.read(namespace_tag_path).value\n\t\n\t# Construct the MQTT topic using the UDT instance name\n\tmqtt_topic \u003d namespace_value + udt_instance_name\n\t\n\t# Publish the current value to the MQTT topic\n\tsystem.cirruslink.engine.publish(\"Pi\", mqtt_topic, str(currentValue.value),0,0)\n"
                    }
                  ],
                  "value": false,
                  "name": "out4",
                  "tagType": "AtomicTag"
                },
                {
                  "eventScripts": [
                    {
                      "eventid": "valueChanged",
                      "script": "\t# Extract the UDT instance name from the tag path\n\tudt_instance_name \u003d \u0027/\u0027.join(tagPath.split(\"/\")[-3:])\n\t\n\t# Read the namespace from the default provider\n\tnamespace_tag_path \u003d \"[default]namespace\"\n\tnamespace_value \u003d system.tag.read(namespace_tag_path).value\n\t\n\t# Construct the MQTT topic using the UDT instance name\n\tmqtt_topic \u003d namespace_value + udt_instance_name\n\t\n\t# Publish the current value to the MQTT topic\n\tsystem.cirruslink.engine.publish(\"Pi\", mqtt_topic, str(currentValue.value),0,0)\n\t"
                    }
                  ],
                  "value": false,
                  "name": "out1",
                  "tagType": "AtomicTag"
                },
                {
                  "eventScripts": [
                    {
                      "eventid": "valueChanged",
                      "script": "\t# Extract the UDT instance name from the tag path\n\tudt_instance_name \u003d \u0027/\u0027.join(tagPath.split(\"/\")[-3:])\n\t\n\t# Read the namespace from the default provider\n\tnamespace_tag_path \u003d \"[default]namespace\"\n\tnamespace_value \u003d system.tag.read(namespace_tag_path).value\n\t\n\t# Construct the MQTT topic using the UDT instance name\n\tmqtt_topic \u003d namespace_value + udt_instance_name\n\t\n\t# Publish the current value to the MQTT topic\n\tsystem.cirruslink.engine.publish(\"Pi\", mqtt_topic, str(currentValue.value),0,0)\n"
                    }
                  ],
                  "value": -2000,
                  "name": "stepperStep",
                  "tagType": "AtomicTag"
                },
                {
                  "eventScripts": [
                    {
                      "eventid": "valueChanged",
                      "script": "\t# Extract the UDT instance name from the tag path\n\tudt_instance_name \u003d \u0027/\u0027.join(tagPath.split(\"/\")[-3:])\n\t\n\t# Read the namespace from the default provider\n\tnamespace_tag_path \u003d \"[default]namespace\"\n\tnamespace_value \u003d system.tag.read(namespace_tag_path).value\n\t\n\t# Construct the MQTT topic using the UDT instance name\n\tmqtt_topic \u003d namespace_value + udt_instance_name\n\t\n\t# Publish the current value to the MQTT topic\n\tsystem.cirruslink.engine.publish(\"Pi\", mqtt_topic, str(currentValue.value),0,0)\n"
                    }
                  ],
                  "value": "null",
                  "name": "message",
                  "tagType": "AtomicTag"
                },
                {
                  "eventScripts": [
                    {
                      "eventid": "valueChanged",
                      "script": "\t# Extract the UDT instance name from the tag path\n\tudt_instance_name \u003d \u0027/\u0027.join(tagPath.split(\"/\")[-3:])\n\t\n\t# Read the namespace from the default provider\n\tnamespace_tag_path \u003d \"[default]namespace\"\n\tnamespace_value \u003d system.tag.read(namespace_tag_path).value\n\t\n\t# Construct the MQTT topic using the UDT instance name\n\tmqtt_topic \u003d namespace_value + udt_instance_name\n\t\n\t# Publish the current value to the MQTT topic\n\tsystem.cirruslink.engine.publish(\"Pi\", mqtt_topic, str(currentValue.value),0,0)\n"
                    }
                  ],
                  "value": 20,
                  "name": "stepperSpeed",
                  "tagType": "AtomicTag"
                },
                {
                  "eventScripts": [
                    {
                      "eventid": "valueChanged",
                      "script": "\t# Extract the UDT instance name from the tag path\n\tudt_instance_name \u003d \u0027/\u0027.join(tagPath.split(\"/\")[-3:])\n\t\n\t# Read the namespace from the default provider\n\tnamespace_tag_path \u003d \"[default]namespace\"\n\tnamespace_value \u003d system.tag.read(namespace_tag_path).value\n\t\n\t# Construct the MQTT topic using the UDT instance name\n\tmqtt_topic \u003d namespace_value + udt_instance_name\n\t\n\t# Publish the current value to the MQTT topic\n\tsystem.cirruslink.engine.publish(\"Pi\", mqtt_topic, str(currentValue.value),0,0)\n"
                    }
                  ],
                  "value": false,
                  "name": "out2",
                  "tagType": "AtomicTag"
                },
                {
                  "eventScripts": [
                    {
                      "eventid": "valueChanged",
                      "script": "\t# Extract the UDT instance name from the tag path\n\tudt_instance_name \u003d \u0027/\u0027.join(tagPath.split(\"/\")[-3:])\n\t\n\t# Read the namespace from the default provider\n\tnamespace_tag_path \u003d \"[default]namespace\"\n\tnamespace_value \u003d system.tag.read(namespace_tag_path).value\n\t\n\t# Construct the MQTT topic using the UDT instance name\n\tmqtt_topic \u003d namespace_value + udt_instance_name\n\t\n\t# Publish the current value to the MQTT topic\n\tsystem.cirruslink.engine.publish(\"Pi\", mqtt_topic, str(currentValue.value),0,0)\n"
                    }
                  ],
                  "value": false,
                  "name": "out3",
                  "tagType": "AtomicTag"
                }
              ]
            },
            {
              "name": "count",
              "tagType": "AtomicTag"
            }
          ]
        },
        {
          "out3": false,
          "name": "thing21",
          "typeId": "thing",
          "tagType": "UdtInstance",
          "tags": [
            {
              "name": "count",
              "tagType": "AtomicTag"
            },
            {
              "name": "in",
              "tagType": "Folder",
              "tags": [
                {
                  "name": "in1",
                  "tagType": "AtomicTag"
                },
                {
                  "name": "sensor2",
                  "tagType": "AtomicTag"
                },
                {
                  "name": "sensor1",
                  "tagType": "AtomicTag"
                }
              ]
            },
            {
              "name": "out",
              "tagType": "Folder",
              "tags": [
                {
                  "eventScripts": [
                    {
                      "eventid": "valueChanged",
                      "script": "\t# Extract the UDT instance name from the tag path\n\tudt_instance_name \u003d \u0027/\u0027.join(tagPath.split(\"/\")[-3:])\n\t\n\t# Read the namespace from the default provider\n\tnamespace_tag_path \u003d \"[default]namespace\"\n\tnamespace_value \u003d system.tag.read(namespace_tag_path).value\n\t\n\t# Construct the MQTT topic using the UDT instance name\n\tmqtt_topic \u003d namespace_value + udt_instance_name\n\t\n\t# Publish the current value to the MQTT topic\n\tsystem.cirruslink.engine.publish(\"Pi\", mqtt_topic, str(currentValue.value),0,0)\n"
                    }
                  ],
                  "value": "null",
                  "name": "message",
                  "tagType": "AtomicTag"
                },
                {
                  "eventScripts": [
                    {
                      "eventid": "valueChanged",
                      "script": "\t# Extract the UDT instance name from the tag path\n\tudt_instance_name \u003d \u0027/\u0027.join(tagPath.split(\"/\")[-3:])\n\t\n\t# Read the namespace from the default provider\n\tnamespace_tag_path \u003d \"[default]namespace\"\n\tnamespace_value \u003d system.tag.read(namespace_tag_path).value\n\t\n\t# Construct the MQTT topic using the UDT instance name\n\tmqtt_topic \u003d namespace_value + udt_instance_name\n\t\n\t# Publish the current value to the MQTT topic\n\tsystem.cirruslink.engine.publish(\"Pi\", mqtt_topic, str(currentValue.value),0,0)\n"
                    }
                  ],
                  "value": false,
                  "name": "out3",
                  "tagType": "AtomicTag"
                },
                {
                  "eventScripts": [
                    {
                      "eventid": "valueChanged",
                      "script": "\t# Extract the UDT instance name from the tag path\n\tudt_instance_name \u003d \u0027/\u0027.join(tagPath.split(\"/\")[-3:])\n\t\n\t# Read the namespace from the default provider\n\tnamespace_tag_path \u003d \"[default]namespace\"\n\tnamespace_value \u003d system.tag.read(namespace_tag_path).value\n\t\n\t# Construct the MQTT topic using the UDT instance name\n\tmqtt_topic \u003d namespace_value + udt_instance_name\n\t\n\t# Publish the current value to the MQTT topic\n\tsystem.cirruslink.engine.publish(\"Pi\", mqtt_topic, str(currentValue.value),0,0)\n"
                    }
                  ],
                  "value": false,
                  "name": "out2",
                  "tagType": "AtomicTag"
                },
                {
                  "eventScripts": [
                    {
                      "eventid": "valueChanged",
                      "script": "\t# Extract the UDT instance name from the tag path\n\tudt_instance_name \u003d \u0027/\u0027.join(tagPath.split(\"/\")[-3:])\n\t\n\t# Read the namespace from the default provider\n\tnamespace_tag_path \u003d \"[default]namespace\"\n\tnamespace_value \u003d system.tag.read(namespace_tag_path).value\n\t\n\t# Construct the MQTT topic using the UDT instance name\n\tmqtt_topic \u003d namespace_value + udt_instance_name\n\t\n\t# Publish the current value to the MQTT topic\n\tsystem.cirruslink.engine.publish(\"Pi\", mqtt_topic, str(currentValue.value),0,0)\n"
                    }
                  ],
                  "value": 20,
                  "name": "stepperSpeed",
                  "tagType": "AtomicTag"
                },
                {
                  "eventScripts": [
                    {
                      "eventid": "valueChanged",
                      "script": "\t# Extract the UDT instance name from the tag path\n\tudt_instance_name \u003d \u0027/\u0027.join(tagPath.split(\"/\")[-3:])\n\t\n\t# Read the namespace from the default provider\n\tnamespace_tag_path \u003d \"[default]namespace\"\n\tnamespace_value \u003d system.tag.read(namespace_tag_path).value\n\t\n\t# Construct the MQTT topic using the UDT instance name\n\tmqtt_topic \u003d namespace_value + udt_instance_name\n\t\n\t# Publish the current value to the MQTT topic\n\tsystem.cirruslink.engine.publish(\"Pi\", mqtt_topic, str(currentValue.value),0,0)\n"
                    }
                  ],
                  "value": -2000,
                  "name": "stepperStep",
                  "tagType": "AtomicTag"
                },
                {
                  "eventScripts": [
                    {
                      "eventid": "valueChanged",
                      "script": "\t# Extract the UDT instance name from the tag path\n\tudt_instance_name \u003d \u0027/\u0027.join(tagPath.split(\"/\")[-3:])\n\t\n\t# Read the namespace from the default provider\n\tnamespace_tag_path \u003d \"[default]namespace\"\n\tnamespace_value \u003d system.tag.read(namespace_tag_path).value\n\t\n\t# Construct the MQTT topic using the UDT instance name\n\tmqtt_topic \u003d namespace_value + udt_instance_name\n\t\n\t# Publish the current value to the MQTT topic\n\tsystem.cirruslink.engine.publish(\"Pi\", mqtt_topic, str(currentValue.value),0,0)\n"
                    }
                  ],
                  "value": false,
                  "name": "out4",
                  "tagType": "AtomicTag"
                },
                {
                  "eventScripts": [
                    {
                      "eventid": "valueChanged",
                      "script": "\t# Extract the UDT instance name from the tag path\n\tudt_instance_name \u003d \u0027/\u0027.join(tagPath.split(\"/\")[-3:])\n\t\n\t# Read the namespace from the default provider\n\tnamespace_tag_path \u003d \"[default]namespace\"\n\tnamespace_value \u003d system.tag.read(namespace_tag_path).value\n\t\n\t# Construct the MQTT topic using the UDT instance name\n\tmqtt_topic \u003d namespace_value + udt_instance_name\n\t\n\t# Publish the current value to the MQTT topic\n\tsystem.cirruslink.engine.publish(\"Pi\", mqtt_topic, str(currentValue.value),0,0)\n\t"
                    }
                  ],
                  "value": false,
                  "name": "out1",
                  "tagType": "AtomicTag"
                }
              ]
            }
          ]
        },
        {
          "out3": false,
          "name": "thing11",
          "typeId": "thing",
          "tagType": "UdtInstance",
          "tags": [
            {
              "name": "count",
              "tagType": "AtomicTag"
            },
            {
              "name": "in",
              "tagType": "Folder",
              "tags": [
                {
                  "name": "in1",
                  "tagType": "AtomicTag"
                },
                {
                  "name": "sensor2",
                  "tagType": "AtomicTag"
                },
                {
                  "name": "sensor1",
                  "tagType": "AtomicTag"
                }
              ]
            },
            {
              "name": "out",
              "tagType": "Folder",
              "tags": [
                {
                  "eventScripts": [
                    {
                      "eventid": "valueChanged",
                      "script": "\t# Extract the UDT instance name from the tag path\n\tudt_instance_name \u003d \u0027/\u0027.join(tagPath.split(\"/\")[-3:])\n\t\n\t# Read the namespace from the default provider\n\tnamespace_tag_path \u003d \"[default]namespace\"\n\tnamespace_value \u003d system.tag.read(namespace_tag_path).value\n\t\n\t# Construct the MQTT topic using the UDT instance name\n\tmqtt_topic \u003d namespace_value + udt_instance_name\n\t\n\t# Publish the current value to the MQTT topic\n\tsystem.cirruslink.engine.publish(\"Pi\", mqtt_topic, str(currentValue.value),0,0)\n"
                    }
                  ],
                  "value": 0,
                  "name": "stepperStep",
                  "tagType": "AtomicTag"
                },
                {
                  "eventScripts": [
                    {
                      "eventid": "valueChanged",
                      "script": "\t# Extract the UDT instance name from the tag path\n\tudt_instance_name \u003d \u0027/\u0027.join(tagPath.split(\"/\")[-3:])\n\t\n\t# Read the namespace from the default provider\n\tnamespace_tag_path \u003d \"[default]namespace\"\n\tnamespace_value \u003d system.tag.read(namespace_tag_path).value\n\t\n\t# Construct the MQTT topic using the UDT instance name\n\tmqtt_topic \u003d namespace_value + udt_instance_name\n\t\n\t# Publish the current value to the MQTT topic\n\tsystem.cirruslink.engine.publish(\"Pi\", mqtt_topic, str(currentValue.value),0,0)\n"
                    }
                  ],
                  "value": false,
                  "name": "out4",
                  "tagType": "AtomicTag"
                },
                {
                  "eventScripts": [
                    {
                      "eventid": "valueChanged",
                      "script": "\t# Extract the UDT instance name from the tag path\n\tudt_instance_name \u003d \u0027/\u0027.join(tagPath.split(\"/\")[-3:])\n\t\n\t# Read the namespace from the default provider\n\tnamespace_tag_path \u003d \"[default]namespace\"\n\tnamespace_value \u003d system.tag.read(namespace_tag_path).value\n\t\n\t# Construct the MQTT topic using the UDT instance name\n\tmqtt_topic \u003d namespace_value + udt_instance_name\n\t\n\t# Publish the current value to the MQTT topic\n\tsystem.cirruslink.engine.publish(\"Pi\", mqtt_topic, str(currentValue.value),0,0)\n\t"
                    }
                  ],
                  "value": false,
                  "name": "out1",
                  "tagType": "AtomicTag"
                },
                {
                  "eventScripts": [
                    {
                      "eventid": "valueChanged",
                      "script": "\t# Extract the UDT instance name from the tag path\n\tudt_instance_name \u003d \u0027/\u0027.join(tagPath.split(\"/\")[-3:])\n\t\n\t# Read the namespace from the default provider\n\tnamespace_tag_path \u003d \"[default]namespace\"\n\tnamespace_value \u003d system.tag.read(namespace_tag_path).value\n\t\n\t# Construct the MQTT topic using the UDT instance name\n\tmqtt_topic \u003d namespace_value + udt_instance_name\n\t\n\t# Publish the current value to the MQTT topic\n\tsystem.cirruslink.engine.publish(\"Pi\", mqtt_topic, str(currentValue.value),0,0)\n"
                    }
                  ],
                  "value": 20,
                  "name": "stepperSpeed",
                  "tagType": "AtomicTag"
                },
                {
                  "eventScripts": [
                    {
                      "eventid": "valueChanged",
                      "script": "\t# Extract the UDT instance name from the tag path\n\tudt_instance_name \u003d \u0027/\u0027.join(tagPath.split(\"/\")[-3:])\n\t\n\t# Read the namespace from the default provider\n\tnamespace_tag_path \u003d \"[default]namespace\"\n\tnamespace_value \u003d system.tag.read(namespace_tag_path).value\n\t\n\t# Construct the MQTT topic using the UDT instance name\n\tmqtt_topic \u003d namespace_value + udt_instance_name\n\t\n\t# Publish the current value to the MQTT topic\n\tsystem.cirruslink.engine.publish(\"Pi\", mqtt_topic, str(currentValue.value),0,0)\n"
                    }
                  ],
                  "value": false,
                  "name": "out2",
                  "tagType": "AtomicTag"
                },
                {
                  "eventScripts": [
                    {
                      "eventid": "valueChanged",
                      "script": "\t# Extract the UDT instance name from the tag path\n\tudt_instance_name \u003d \u0027/\u0027.join(tagPath.split(\"/\")[-3:])\n\t\n\t# Read the namespace from the default provider\n\tnamespace_tag_path \u003d \"[default]namespace\"\n\tnamespace_value \u003d system.tag.read(namespace_tag_path).value\n\t\n\t# Construct the MQTT topic using the UDT instance name\n\tmqtt_topic \u003d namespace_value + udt_instance_name\n\t\n\t# Publish the current value to the MQTT topic\n\tsystem.cirruslink.engine.publish(\"Pi\", mqtt_topic, str(currentValue.value),0,0)\n"
                    }
                  ],
                  "value": false,
                  "name": "out3",
                  "tagType": "AtomicTag"
                },
                {
                  "eventScripts": [
                    {
                      "eventid": "valueChanged",
                      "script": "\t# Extract the UDT instance name from the tag path\n\tudt_instance_name \u003d \u0027/\u0027.join(tagPath.split(\"/\")[-3:])\n\t\n\t# Read the namespace from the default provider\n\tnamespace_tag_path \u003d \"[default]namespace\"\n\tnamespace_value \u003d system.tag.read(namespace_tag_path).value\n\t\n\t# Construct the MQTT topic using the UDT instance name\n\tmqtt_topic \u003d namespace_value + udt_instance_name\n\t\n\t# Publish the current value to the MQTT topic\n\tsystem.cirruslink.engine.publish(\"Pi\", mqtt_topic, str(currentValue.value),0,0)\n"
                    }
                  ],
                  "value": "null",
                  "name": "message",
                  "tagType": "AtomicTag"
                }
              ]
            }
          ]
        },
        {
          "out3": false,
          "name": "thing18",
          "typeId": "thing",
          "tagType": "UdtInstance",
          "tags": [
            {
              "name": "count",
              "tagType": "AtomicTag"
            },
            {
              "name": "in",
              "tagType": "Folder",
              "tags": [
                {
                  "name": "sensor2",
                  "tagType": "AtomicTag"
                },
                {
                  "name": "sensor1",
                  "tagType": "AtomicTag"
                },
                {
                  "name": "in1",
                  "tagType": "AtomicTag"
                }
              ]
            },
            {
              "name": "out",
              "tagType": "Folder",
              "tags": [
                {
                  "eventScripts": [
                    {
                      "eventid": "valueChanged",
                      "script": "\t# Extract the UDT instance name from the tag path\n\tudt_instance_name \u003d \u0027/\u0027.join(tagPath.split(\"/\")[-3:])\n\t\n\t# Read the namespace from the default provider\n\tnamespace_tag_path \u003d \"[default]namespace\"\n\tnamespace_value \u003d system.tag.read(namespace_tag_path).value\n\t\n\t# Construct the MQTT topic using the UDT instance name\n\tmqtt_topic \u003d namespace_value + udt_instance_name\n\t\n\t# Publish the current value to the MQTT topic\n\tsystem.cirruslink.engine.publish(\"Pi\", mqtt_topic, str(currentValue.value),0,0)\n\t"
                    }
                  ],
                  "value": false,
                  "name": "out1",
                  "tagType": "AtomicTag"
                },
                {
                  "eventScripts": [
                    {
                      "eventid": "valueChanged",
                      "script": "\t# Extract the UDT instance name from the tag path\n\tudt_instance_name \u003d \u0027/\u0027.join(tagPath.split(\"/\")[-3:])\n\t\n\t# Read the namespace from the default provider\n\tnamespace_tag_path \u003d \"[default]namespace\"\n\tnamespace_value \u003d system.tag.read(namespace_tag_path).value\n\t\n\t# Construct the MQTT topic using the UDT instance name\n\tmqtt_topic \u003d namespace_value + udt_instance_name\n\t\n\t# Publish the current value to the MQTT topic\n\tsystem.cirruslink.engine.publish(\"Pi\", mqtt_topic, str(currentValue.value),0,0)\n"
                    }
                  ],
                  "value": false,
                  "name": "out4",
                  "tagType": "AtomicTag"
                },
                {
                  "eventScripts": [
                    {
                      "eventid": "valueChanged",
                      "script": "\t# Extract the UDT instance name from the tag path\n\tudt_instance_name \u003d \u0027/\u0027.join(tagPath.split(\"/\")[-3:])\n\t\n\t# Read the namespace from the default provider\n\tnamespace_tag_path \u003d \"[default]namespace\"\n\tnamespace_value \u003d system.tag.read(namespace_tag_path).value\n\t\n\t# Construct the MQTT topic using the UDT instance name\n\tmqtt_topic \u003d namespace_value + udt_instance_name\n\t\n\t# Publish the current value to the MQTT topic\n\tsystem.cirruslink.engine.publish(\"Pi\", mqtt_topic, str(currentValue.value),0,0)\n"
                    }
                  ],
                  "value": "null",
                  "name": "message",
                  "tagType": "AtomicTag"
                },
                {
                  "eventScripts": [
                    {
                      "eventid": "valueChanged",
                      "script": "\t# Extract the UDT instance name from the tag path\n\tudt_instance_name \u003d \u0027/\u0027.join(tagPath.split(\"/\")[-3:])\n\t\n\t# Read the namespace from the default provider\n\tnamespace_tag_path \u003d \"[default]namespace\"\n\tnamespace_value \u003d system.tag.read(namespace_tag_path).value\n\t\n\t# Construct the MQTT topic using the UDT instance name\n\tmqtt_topic \u003d namespace_value + udt_instance_name\n\t\n\t# Publish the current value to the MQTT topic\n\tsystem.cirruslink.engine.publish(\"Pi\", mqtt_topic, str(currentValue.value),0,0)\n"
                    }
                  ],
                  "value": false,
                  "name": "out2",
                  "tagType": "AtomicTag"
                },
                {
                  "eventScripts": [
                    {
                      "eventid": "valueChanged",
                      "script": "\t# Extract the UDT instance name from the tag path\n\tudt_instance_name \u003d \u0027/\u0027.join(tagPath.split(\"/\")[-3:])\n\t\n\t# Read the namespace from the default provider\n\tnamespace_tag_path \u003d \"[default]namespace\"\n\tnamespace_value \u003d system.tag.read(namespace_tag_path).value\n\t\n\t# Construct the MQTT topic using the UDT instance name\n\tmqtt_topic \u003d namespace_value + udt_instance_name\n\t\n\t# Publish the current value to the MQTT topic\n\tsystem.cirruslink.engine.publish(\"Pi\", mqtt_topic, str(currentValue.value),0,0)\n"
                    }
                  ],
                  "value": false,
                  "name": "out3",
                  "tagType": "AtomicTag"
                },
                {
                  "eventScripts": [
                    {
                      "eventid": "valueChanged",
                      "script": "\t# Extract the UDT instance name from the tag path\n\tudt_instance_name \u003d \u0027/\u0027.join(tagPath.split(\"/\")[-3:])\n\t\n\t# Read the namespace from the default provider\n\tnamespace_tag_path \u003d \"[default]namespace\"\n\tnamespace_value \u003d system.tag.read(namespace_tag_path).value\n\t\n\t# Construct the MQTT topic using the UDT instance name\n\tmqtt_topic \u003d namespace_value + udt_instance_name\n\t\n\t# Publish the current value to the MQTT topic\n\tsystem.cirruslink.engine.publish(\"Pi\", mqtt_topic, str(currentValue.value),0,0)\n"
                    }
                  ],
                  "value": -2000,
                  "name": "stepperStep",
                  "tagType": "AtomicTag"
                },
                {
                  "eventScripts": [
                    {
                      "eventid": "valueChanged",
                      "script": "\t# Extract the UDT instance name from the tag path\n\tudt_instance_name \u003d \u0027/\u0027.join(tagPath.split(\"/\")[-3:])\n\t\n\t# Read the namespace from the default provider\n\tnamespace_tag_path \u003d \"[default]namespace\"\n\tnamespace_value \u003d system.tag.read(namespace_tag_path).value\n\t\n\t# Construct the MQTT topic using the UDT instance name\n\tmqtt_topic \u003d namespace_value + udt_instance_name\n\t\n\t# Publish the current value to the MQTT topic\n\tsystem.cirruslink.engine.publish(\"Pi\", mqtt_topic, str(currentValue.value),0,0)\n"
                    }
                  ],
                  "value": 20,
                  "name": "stepperSpeed",
                  "tagType": "AtomicTag"
                }
              ]
            }
          ]
        },
        {
          "out3": false,
          "name": "thing17",
          "typeId": "thing",
          "tagType": "UdtInstance",
          "tags": [
            {
              "name": "out",
              "tagType": "Folder",
              "tags": [
                {
                  "eventScripts": [
                    {
                      "eventid": "valueChanged",
                      "script": "\t# Extract the UDT instance name from the tag path\n\tudt_instance_name \u003d \u0027/\u0027.join(tagPath.split(\"/\")[-3:])\n\t\n\t# Read the namespace from the default provider\n\tnamespace_tag_path \u003d \"[default]namespace\"\n\tnamespace_value \u003d system.tag.read(namespace_tag_path).value\n\t\n\t# Construct the MQTT topic using the UDT instance name\n\tmqtt_topic \u003d namespace_value + udt_instance_name\n\t\n\t# Publish the current value to the MQTT topic\n\tsystem.cirruslink.engine.publish(\"Pi\", mqtt_topic, str(currentValue.value),0,0)\n"
                    }
                  ],
                  "value": "null",
                  "name": "message",
                  "tagType": "AtomicTag"
                },
                {
                  "eventScripts": [
                    {
                      "eventid": "valueChanged",
                      "script": "\t# Extract the UDT instance name from the tag path\n\tudt_instance_name \u003d \u0027/\u0027.join(tagPath.split(\"/\")[-3:])\n\t\n\t# Read the namespace from the default provider\n\tnamespace_tag_path \u003d \"[default]namespace\"\n\tnamespace_value \u003d system.tag.read(namespace_tag_path).value\n\t\n\t# Construct the MQTT topic using the UDT instance name\n\tmqtt_topic \u003d namespace_value + udt_instance_name\n\t\n\t# Publish the current value to the MQTT topic\n\tsystem.cirruslink.engine.publish(\"Pi\", mqtt_topic, str(currentValue.value),0,0)\n"
                    }
                  ],
                  "value": -2000,
                  "name": "stepperStep",
                  "tagType": "AtomicTag"
                },
                {
                  "eventScripts": [
                    {
                      "eventid": "valueChanged",
                      "script": "\t# Extract the UDT instance name from the tag path\n\tudt_instance_name \u003d \u0027/\u0027.join(tagPath.split(\"/\")[-3:])\n\t\n\t# Read the namespace from the default provider\n\tnamespace_tag_path \u003d \"[default]namespace\"\n\tnamespace_value \u003d system.tag.read(namespace_tag_path).value\n\t\n\t# Construct the MQTT topic using the UDT instance name\n\tmqtt_topic \u003d namespace_value + udt_instance_name\n\t\n\t# Publish the current value to the MQTT topic\n\tsystem.cirruslink.engine.publish(\"Pi\", mqtt_topic, str(currentValue.value),0,0)\n"
                    }
                  ],
                  "value": false,
                  "name": "out3",
                  "tagType": "AtomicTag"
                },
                {
                  "eventScripts": [
                    {
                      "eventid": "valueChanged",
                      "script": "\t# Extract the UDT instance name from the tag path\n\tudt_instance_name \u003d \u0027/\u0027.join(tagPath.split(\"/\")[-3:])\n\t\n\t# Read the namespace from the default provider\n\tnamespace_tag_path \u003d \"[default]namespace\"\n\tnamespace_value \u003d system.tag.read(namespace_tag_path).value\n\t\n\t# Construct the MQTT topic using the UDT instance name\n\tmqtt_topic \u003d namespace_value + udt_instance_name\n\t\n\t# Publish the current value to the MQTT topic\n\tsystem.cirruslink.engine.publish(\"Pi\", mqtt_topic, str(currentValue.value),0,0)\n\t"
                    }
                  ],
                  "value": false,
                  "name": "out1",
                  "tagType": "AtomicTag"
                },
                {
                  "eventScripts": [
                    {
                      "eventid": "valueChanged",
                      "script": "\t# Extract the UDT instance name from the tag path\n\tudt_instance_name \u003d \u0027/\u0027.join(tagPath.split(\"/\")[-3:])\n\t\n\t# Read the namespace from the default provider\n\tnamespace_tag_path \u003d \"[default]namespace\"\n\tnamespace_value \u003d system.tag.read(namespace_tag_path).value\n\t\n\t# Construct the MQTT topic using the UDT instance name\n\tmqtt_topic \u003d namespace_value + udt_instance_name\n\t\n\t# Publish the current value to the MQTT topic\n\tsystem.cirruslink.engine.publish(\"Pi\", mqtt_topic, str(currentValue.value),0,0)\n"
                    }
                  ],
                  "value": false,
                  "name": "out4",
                  "tagType": "AtomicTag"
                },
                {
                  "eventScripts": [
                    {
                      "eventid": "valueChanged",
                      "script": "\t# Extract the UDT instance name from the tag path\n\tudt_instance_name \u003d \u0027/\u0027.join(tagPath.split(\"/\")[-3:])\n\t\n\t# Read the namespace from the default provider\n\tnamespace_tag_path \u003d \"[default]namespace\"\n\tnamespace_value \u003d system.tag.read(namespace_tag_path).value\n\t\n\t# Construct the MQTT topic using the UDT instance name\n\tmqtt_topic \u003d namespace_value + udt_instance_name\n\t\n\t# Publish the current value to the MQTT topic\n\tsystem.cirruslink.engine.publish(\"Pi\", mqtt_topic, str(currentValue.value),0,0)\n"
                    }
                  ],
                  "value": false,
                  "name": "out2",
                  "tagType": "AtomicTag"
                },
                {
                  "eventScripts": [
                    {
                      "eventid": "valueChanged",
                      "script": "\t# Extract the UDT instance name from the tag path\n\tudt_instance_name \u003d \u0027/\u0027.join(tagPath.split(\"/\")[-3:])\n\t\n\t# Read the namespace from the default provider\n\tnamespace_tag_path \u003d \"[default]namespace\"\n\tnamespace_value \u003d system.tag.read(namespace_tag_path).value\n\t\n\t# Construct the MQTT topic using the UDT instance name\n\tmqtt_topic \u003d namespace_value + udt_instance_name\n\t\n\t# Publish the current value to the MQTT topic\n\tsystem.cirruslink.engine.publish(\"Pi\", mqtt_topic, str(currentValue.value),0,0)\n"
                    }
                  ],
                  "value": 20,
                  "name": "stepperSpeed",
                  "tagType": "AtomicTag"
                }
              ]
            },
            {
              "name": "count",
              "tagType": "AtomicTag"
            },
            {
              "name": "in",
              "tagType": "Folder",
              "tags": [
                {
                  "name": "in1",
                  "tagType": "AtomicTag"
                },
                {
                  "name": "sensor1",
                  "tagType": "AtomicTag"
                },
                {
                  "name": "sensor2",
                  "tagType": "AtomicTag"
                }
              ]
            }
          ]
        },
        {
          "out3": false,
          "name": "thing27",
          "typeId": "thing",
          "tagType": "UdtInstance",
          "tags": [
            {
              "name": "out",
              "tagType": "Folder",
              "tags": [
                {
                  "eventScripts": [
                    {
                      "eventid": "valueChanged",
                      "script": "\t# Extract the UDT instance name from the tag path\n\tudt_instance_name \u003d \u0027/\u0027.join(tagPath.split(\"/\")[-3:])\n\t\n\t# Read the namespace from the default provider\n\tnamespace_tag_path \u003d \"[default]namespace\"\n\tnamespace_value \u003d system.tag.read(namespace_tag_path).value\n\t\n\t# Construct the MQTT topic using the UDT instance name\n\tmqtt_topic \u003d namespace_value + udt_instance_name\n\t\n\t# Publish the current value to the MQTT topic\n\tsystem.cirruslink.engine.publish(\"Pi\", mqtt_topic, str(currentValue.value),0,0)\n"
                    }
                  ],
                  "value": -2000,
                  "name": "stepperStep",
                  "tagType": "AtomicTag"
                },
                {
                  "eventScripts": [
                    {
                      "eventid": "valueChanged",
                      "script": "\t# Extract the UDT instance name from the tag path\n\tudt_instance_name \u003d \u0027/\u0027.join(tagPath.split(\"/\")[-3:])\n\t\n\t# Read the namespace from the default provider\n\tnamespace_tag_path \u003d \"[default]namespace\"\n\tnamespace_value \u003d system.tag.read(namespace_tag_path).value\n\t\n\t# Construct the MQTT topic using the UDT instance name\n\tmqtt_topic \u003d namespace_value + udt_instance_name\n\t\n\t# Publish the current value to the MQTT topic\n\tsystem.cirruslink.engine.publish(\"Pi\", mqtt_topic, str(currentValue.value),0,0)\n"
                    }
                  ],
                  "value": "null",
                  "name": "message",
                  "tagType": "AtomicTag"
                },
                {
                  "eventScripts": [
                    {
                      "eventid": "valueChanged",
                      "script": "\t# Extract the UDT instance name from the tag path\n\tudt_instance_name \u003d \u0027/\u0027.join(tagPath.split(\"/\")[-3:])\n\t\n\t# Read the namespace from the default provider\n\tnamespace_tag_path \u003d \"[default]namespace\"\n\tnamespace_value \u003d system.tag.read(namespace_tag_path).value\n\t\n\t# Construct the MQTT topic using the UDT instance name\n\tmqtt_topic \u003d namespace_value + udt_instance_name\n\t\n\t# Publish the current value to the MQTT topic\n\tsystem.cirruslink.engine.publish(\"Pi\", mqtt_topic, str(currentValue.value),0,0)\n"
                    }
                  ],
                  "value": false,
                  "name": "out4",
                  "tagType": "AtomicTag"
                },
                {
                  "eventScripts": [
                    {
                      "eventid": "valueChanged",
                      "script": "\t# Extract the UDT instance name from the tag path\n\tudt_instance_name \u003d \u0027/\u0027.join(tagPath.split(\"/\")[-3:])\n\t\n\t# Read the namespace from the default provider\n\tnamespace_tag_path \u003d \"[default]namespace\"\n\tnamespace_value \u003d system.tag.read(namespace_tag_path).value\n\t\n\t# Construct the MQTT topic using the UDT instance name\n\tmqtt_topic \u003d namespace_value + udt_instance_name\n\t\n\t# Publish the current value to the MQTT topic\n\tsystem.cirruslink.engine.publish(\"Pi\", mqtt_topic, str(currentValue.value),0,0)\n\t"
                    }
                  ],
                  "value": false,
                  "name": "out1",
                  "tagType": "AtomicTag"
                },
                {
                  "eventScripts": [
                    {
                      "eventid": "valueChanged",
                      "script": "\t# Extract the UDT instance name from the tag path\n\tudt_instance_name \u003d \u0027/\u0027.join(tagPath.split(\"/\")[-3:])\n\t\n\t# Read the namespace from the default provider\n\tnamespace_tag_path \u003d \"[default]namespace\"\n\tnamespace_value \u003d system.tag.read(namespace_tag_path).value\n\t\n\t# Construct the MQTT topic using the UDT instance name\n\tmqtt_topic \u003d namespace_value + udt_instance_name\n\t\n\t# Publish the current value to the MQTT topic\n\tsystem.cirruslink.engine.publish(\"Pi\", mqtt_topic, str(currentValue.value),0,0)\n"
                    }
                  ],
                  "value": 20,
                  "name": "stepperSpeed",
                  "tagType": "AtomicTag"
                },
                {
                  "eventScripts": [
                    {
                      "eventid": "valueChanged",
                      "script": "\t# Extract the UDT instance name from the tag path\n\tudt_instance_name \u003d \u0027/\u0027.join(tagPath.split(\"/\")[-3:])\n\t\n\t# Read the namespace from the default provider\n\tnamespace_tag_path \u003d \"[default]namespace\"\n\tnamespace_value \u003d system.tag.read(namespace_tag_path).value\n\t\n\t# Construct the MQTT topic using the UDT instance name\n\tmqtt_topic \u003d namespace_value + udt_instance_name\n\t\n\t# Publish the current value to the MQTT topic\n\tsystem.cirruslink.engine.publish(\"Pi\", mqtt_topic, str(currentValue.value),0,0)\n"
                    }
                  ],
                  "value": false,
                  "name": "out2",
                  "tagType": "AtomicTag"
                },
                {
                  "eventScripts": [
                    {
                      "eventid": "valueChanged",
                      "script": "\t# Extract the UDT instance name from the tag path\n\tudt_instance_name \u003d \u0027/\u0027.join(tagPath.split(\"/\")[-3:])\n\t\n\t# Read the namespace from the default provider\n\tnamespace_tag_path \u003d \"[default]namespace\"\n\tnamespace_value \u003d system.tag.read(namespace_tag_path).value\n\t\n\t# Construct the MQTT topic using the UDT instance name\n\tmqtt_topic \u003d namespace_value + udt_instance_name\n\t\n\t# Publish the current value to the MQTT topic\n\tsystem.cirruslink.engine.publish(\"Pi\", mqtt_topic, str(currentValue.value),0,0)\n"
                    }
                  ],
                  "value": false,
                  "name": "out3",
                  "tagType": "AtomicTag"
                }
              ]
            },
            {
              "name": "in",
              "tagType": "Folder",
              "tags": [
                {
                  "name": "in1",
                  "tagType": "AtomicTag"
                },
                {
                  "name": "sensor1",
                  "tagType": "AtomicTag"
                },
                {
                  "name": "sensor2",
                  "tagType": "AtomicTag"
                }
              ]
            },
            {
              "name": "count",
              "tagType": "AtomicTag"
            }
          ]
        },
        {
          "out3": false,
          "name": "thing10",
          "typeId": "thing",
          "tagType": "UdtInstance",
          "tags": [
            {
              "name": "count",
              "tagType": "AtomicTag"
            },
            {
              "name": "in",
              "tagType": "Folder",
              "tags": [
                {
                  "name": "sensor2",
                  "tagType": "AtomicTag"
                },
                {
                  "name": "sensor1",
                  "tagType": "AtomicTag"
                },
                {
                  "name": "in1",
                  "tagType": "AtomicTag"
                }
              ]
            },
            {
              "name": "out",
              "tagType": "Folder",
              "tags": [
                {
                  "eventScripts": [
                    {
                      "eventid": "valueChanged",
                      "script": "\t# Extract the UDT instance name from the tag path\n\tudt_instance_name \u003d \u0027/\u0027.join(tagPath.split(\"/\")[-3:])\n\t\n\t# Read the namespace from the default provider\n\tnamespace_tag_path \u003d \"[default]namespace\"\n\tnamespace_value \u003d system.tag.read(namespace_tag_path).value\n\t\n\t# Construct the MQTT topic using the UDT instance name\n\tmqtt_topic \u003d namespace_value + udt_instance_name\n\t\n\t# Publish the current value to the MQTT topic\n\tsystem.cirruslink.engine.publish(\"Pi\", mqtt_topic, str(currentValue.value),0,0)\n\t"
                    }
                  ],
                  "value": false,
                  "name": "out1",
                  "tagType": "AtomicTag"
                },
                {
                  "eventScripts": [
                    {
                      "eventid": "valueChanged",
                      "script": "\t# Extract the UDT instance name from the tag path\n\tudt_instance_name \u003d \u0027/\u0027.join(tagPath.split(\"/\")[-3:])\n\t\n\t# Read the namespace from the default provider\n\tnamespace_tag_path \u003d \"[default]namespace\"\n\tnamespace_value \u003d system.tag.read(namespace_tag_path).value\n\t\n\t# Construct the MQTT topic using the UDT instance name\n\tmqtt_topic \u003d namespace_value + udt_instance_name\n\t\n\t# Publish the current value to the MQTT topic\n\tsystem.cirruslink.engine.publish(\"Pi\", mqtt_topic, str(currentValue.value),0,0)\n"
                    }
                  ],
                  "value": false,
                  "name": "out4",
                  "tagType": "AtomicTag"
                },
                {
                  "eventScripts": [
                    {
                      "eventid": "valueChanged",
                      "script": "\t# Extract the UDT instance name from the tag path\n\tudt_instance_name \u003d \u0027/\u0027.join(tagPath.split(\"/\")[-3:])\n\t\n\t# Read the namespace from the default provider\n\tnamespace_tag_path \u003d \"[default]namespace\"\n\tnamespace_value \u003d system.tag.read(namespace_tag_path).value\n\t\n\t# Construct the MQTT topic using the UDT instance name\n\tmqtt_topic \u003d namespace_value + udt_instance_name\n\t\n\t# Publish the current value to the MQTT topic\n\tsystem.cirruslink.engine.publish(\"Pi\", mqtt_topic, str(currentValue.value),0,0)\n"
                    }
                  ],
                  "value": 0,
                  "name": "stepperStep",
                  "tagType": "AtomicTag"
                },
                {
                  "eventScripts": [
                    {
                      "eventid": "valueChanged",
                      "script": "\t# Extract the UDT instance name from the tag path\n\tudt_instance_name \u003d \u0027/\u0027.join(tagPath.split(\"/\")[-3:])\n\t\n\t# Read the namespace from the default provider\n\tnamespace_tag_path \u003d \"[default]namespace\"\n\tnamespace_value \u003d system.tag.read(namespace_tag_path).value\n\t\n\t# Construct the MQTT topic using the UDT instance name\n\tmqtt_topic \u003d namespace_value + udt_instance_name\n\t\n\t# Publish the current value to the MQTT topic\n\tsystem.cirruslink.engine.publish(\"Pi\", mqtt_topic, str(currentValue.value),0,0)\n"
                    }
                  ],
                  "value": 20,
                  "name": "stepperSpeed",
                  "tagType": "AtomicTag"
                },
                {
                  "eventScripts": [
                    {
                      "eventid": "valueChanged",
                      "script": "\t# Extract the UDT instance name from the tag path\n\tudt_instance_name \u003d \u0027/\u0027.join(tagPath.split(\"/\")[-3:])\n\t\n\t# Read the namespace from the default provider\n\tnamespace_tag_path \u003d \"[default]namespace\"\n\tnamespace_value \u003d system.tag.read(namespace_tag_path).value\n\t\n\t# Construct the MQTT topic using the UDT instance name\n\tmqtt_topic \u003d namespace_value + udt_instance_name\n\t\n\t# Publish the current value to the MQTT topic\n\tsystem.cirruslink.engine.publish(\"Pi\", mqtt_topic, str(currentValue.value),0,0)\n"
                    }
                  ],
                  "value": false,
                  "name": "out2",
                  "tagType": "AtomicTag"
                },
                {
                  "eventScripts": [
                    {
                      "eventid": "valueChanged",
                      "script": "\t# Extract the UDT instance name from the tag path\n\tudt_instance_name \u003d \u0027/\u0027.join(tagPath.split(\"/\")[-3:])\n\t\n\t# Read the namespace from the default provider\n\tnamespace_tag_path \u003d \"[default]namespace\"\n\tnamespace_value \u003d system.tag.read(namespace_tag_path).value\n\t\n\t# Construct the MQTT topic using the UDT instance name\n\tmqtt_topic \u003d namespace_value + udt_instance_name\n\t\n\t# Publish the current value to the MQTT topic\n\tsystem.cirruslink.engine.publish(\"Pi\", mqtt_topic, str(currentValue.value),0,0)\n"
                    }
                  ],
                  "value": false,
                  "name": "out3",
                  "tagType": "AtomicTag"
                },
                {
                  "eventScripts": [
                    {
                      "eventid": "valueChanged",
                      "script": "\t# Extract the UDT instance name from the tag path\n\tudt_instance_name \u003d \u0027/\u0027.join(tagPath.split(\"/\")[-3:])\n\t\n\t# Read the namespace from the default provider\n\tnamespace_tag_path \u003d \"[default]namespace\"\n\tnamespace_value \u003d system.tag.read(namespace_tag_path).value\n\t\n\t# Construct the MQTT topic using the UDT instance name\n\tmqtt_topic \u003d namespace_value + udt_instance_name\n\t\n\t# Publish the current value to the MQTT topic\n\tsystem.cirruslink.engine.publish(\"Pi\", mqtt_topic, str(currentValue.value),0,0)\n"
                    }
                  ],
                  "value": "null",
                  "name": "message",
                  "tagType": "AtomicTag"
                }
              ]
            }
          ]
        },
        {
          "out3": false,
          "name": "thing29",
          "typeId": "thing",
          "tagType": "UdtInstance",
          "tags": [
            {
              "name": "out",
              "tagType": "Folder",
              "tags": [
                {
                  "eventScripts": [
                    {
                      "eventid": "valueChanged",
                      "script": "\t# Extract the UDT instance name from the tag path\n\tudt_instance_name \u003d \u0027/\u0027.join(tagPath.split(\"/\")[-3:])\n\t\n\t# Read the namespace from the default provider\n\tnamespace_tag_path \u003d \"[default]namespace\"\n\tnamespace_value \u003d system.tag.read(namespace_tag_path).value\n\t\n\t# Construct the MQTT topic using the UDT instance name\n\tmqtt_topic \u003d namespace_value + udt_instance_name\n\t\n\t# Publish the current value to the MQTT topic\n\tsystem.cirruslink.engine.publish(\"Pi\", mqtt_topic, str(currentValue.value),0,0)\n"
                    }
                  ],
                  "value": 20,
                  "name": "stepperSpeed",
                  "tagType": "AtomicTag"
                },
                {
                  "eventScripts": [
                    {
                      "eventid": "valueChanged",
                      "script": "\t# Extract the UDT instance name from the tag path\n\tudt_instance_name \u003d \u0027/\u0027.join(tagPath.split(\"/\")[-3:])\n\t\n\t# Read the namespace from the default provider\n\tnamespace_tag_path \u003d \"[default]namespace\"\n\tnamespace_value \u003d system.tag.read(namespace_tag_path).value\n\t\n\t# Construct the MQTT topic using the UDT instance name\n\tmqtt_topic \u003d namespace_value + udt_instance_name\n\t\n\t# Publish the current value to the MQTT topic\n\tsystem.cirruslink.engine.publish(\"Pi\", mqtt_topic, str(currentValue.value),0,0)\n"
                    }
                  ],
                  "value": false,
                  "name": "out4",
                  "tagType": "AtomicTag"
                },
                {
                  "eventScripts": [
                    {
                      "eventid": "valueChanged",
                      "script": "\t# Extract the UDT instance name from the tag path\n\tudt_instance_name \u003d \u0027/\u0027.join(tagPath.split(\"/\")[-3:])\n\t\n\t# Read the namespace from the default provider\n\tnamespace_tag_path \u003d \"[default]namespace\"\n\tnamespace_value \u003d system.tag.read(namespace_tag_path).value\n\t\n\t# Construct the MQTT topic using the UDT instance name\n\tmqtt_topic \u003d namespace_value + udt_instance_name\n\t\n\t# Publish the current value to the MQTT topic\n\tsystem.cirruslink.engine.publish(\"Pi\", mqtt_topic, str(currentValue.value),0,0)\n\t"
                    }
                  ],
                  "value": false,
                  "name": "out1",
                  "tagType": "AtomicTag"
                },
                {
                  "eventScripts": [
                    {
                      "eventid": "valueChanged",
                      "script": "\t# Extract the UDT instance name from the tag path\n\tudt_instance_name \u003d \u0027/\u0027.join(tagPath.split(\"/\")[-3:])\n\t\n\t# Read the namespace from the default provider\n\tnamespace_tag_path \u003d \"[default]namespace\"\n\tnamespace_value \u003d system.tag.read(namespace_tag_path).value\n\t\n\t# Construct the MQTT topic using the UDT instance name\n\tmqtt_topic \u003d namespace_value + udt_instance_name\n\t\n\t# Publish the current value to the MQTT topic\n\tsystem.cirruslink.engine.publish(\"Pi\", mqtt_topic, str(currentValue.value),0,0)\n"
                    }
                  ],
                  "value": -2000,
                  "name": "stepperStep",
                  "tagType": "AtomicTag"
                },
                {
                  "eventScripts": [
                    {
                      "eventid": "valueChanged",
                      "script": "\t# Extract the UDT instance name from the tag path\n\tudt_instance_name \u003d \u0027/\u0027.join(tagPath.split(\"/\")[-3:])\n\t\n\t# Read the namespace from the default provider\n\tnamespace_tag_path \u003d \"[default]namespace\"\n\tnamespace_value \u003d system.tag.read(namespace_tag_path).value\n\t\n\t# Construct the MQTT topic using the UDT instance name\n\tmqtt_topic \u003d namespace_value + udt_instance_name\n\t\n\t# Publish the current value to the MQTT topic\n\tsystem.cirruslink.engine.publish(\"Pi\", mqtt_topic, str(currentValue.value),0,0)\n"
                    }
                  ],
                  "value": "null",
                  "name": "message",
                  "tagType": "AtomicTag"
                },
                {
                  "eventScripts": [
                    {
                      "eventid": "valueChanged",
                      "script": "\t# Extract the UDT instance name from the tag path\n\tudt_instance_name \u003d \u0027/\u0027.join(tagPath.split(\"/\")[-3:])\n\t\n\t# Read the namespace from the default provider\n\tnamespace_tag_path \u003d \"[default]namespace\"\n\tnamespace_value \u003d system.tag.read(namespace_tag_path).value\n\t\n\t# Construct the MQTT topic using the UDT instance name\n\tmqtt_topic \u003d namespace_value + udt_instance_name\n\t\n\t# Publish the current value to the MQTT topic\n\tsystem.cirruslink.engine.publish(\"Pi\", mqtt_topic, str(currentValue.value),0,0)\n"
                    }
                  ],
                  "value": false,
                  "name": "out2",
                  "tagType": "AtomicTag"
                },
                {
                  "eventScripts": [
                    {
                      "eventid": "valueChanged",
                      "script": "\t# Extract the UDT instance name from the tag path\n\tudt_instance_name \u003d \u0027/\u0027.join(tagPath.split(\"/\")[-3:])\n\t\n\t# Read the namespace from the default provider\n\tnamespace_tag_path \u003d \"[default]namespace\"\n\tnamespace_value \u003d system.tag.read(namespace_tag_path).value\n\t\n\t# Construct the MQTT topic using the UDT instance name\n\tmqtt_topic \u003d namespace_value + udt_instance_name\n\t\n\t# Publish the current value to the MQTT topic\n\tsystem.cirruslink.engine.publish(\"Pi\", mqtt_topic, str(currentValue.value),0,0)\n"
                    }
                  ],
                  "value": false,
                  "name": "out3",
                  "tagType": "AtomicTag"
                }
              ]
            },
            {
              "name": "in",
              "tagType": "Folder",
              "tags": [
                {
                  "name": "sensor1",
                  "tagType": "AtomicTag"
                },
                {
                  "name": "in1",
                  "tagType": "AtomicTag"
                },
                {
                  "name": "sensor2",
                  "tagType": "AtomicTag"
                }
              ]
            },
            {
              "name": "count",
              "tagType": "AtomicTag"
            }
          ]
        },
        {
          "out3": false,
          "name": "thing2",
          "typeId": "thing",
          "tagType": "UdtInstance",
          "tags": [
            {
              "name": "out",
              "tagType": "Folder",
              "tags": [
                {
                  "eventScripts": [
                    {
                      "eventid": "valueChanged",
                      "script": "\t# Extract the UDT instance name from the tag path\n\tudt_instance_name \u003d \u0027/\u0027.join(tagPath.split(\"/\")[-3:])\n\t\n\t# Read the namespace from the default provider\n\tnamespace_tag_path \u003d \"[default]namespace\"\n\tnamespace_value \u003d system.tag.read(namespace_tag_path).value\n\t\n\t# Construct the MQTT topic using the UDT instance name\n\tmqtt_topic \u003d namespace_value + udt_instance_name\n\t\n\t# Publish the current value to the MQTT topic\n\tsystem.cirruslink.engine.publish(\"Pi\", mqtt_topic, str(currentValue.value),0,0)\n"
                    }
                  ],
                  "value": 20,
                  "name": "stepperSpeed",
                  "tagType": "AtomicTag"
                },
                {
                  "eventScripts": [
                    {
                      "eventid": "valueChanged",
                      "script": "\t# Extract the UDT instance name from the tag path\n\tudt_instance_name \u003d \u0027/\u0027.join(tagPath.split(\"/\")[-3:])\n\t\n\t# Read the namespace from the default provider\n\tnamespace_tag_path \u003d \"[default]namespace\"\n\tnamespace_value \u003d system.tag.read(namespace_tag_path).value\n\t\n\t# Construct the MQTT topic using the UDT instance name\n\tmqtt_topic \u003d namespace_value + udt_instance_name\n\t\n\t# Publish the current value to the MQTT topic\n\tsystem.cirruslink.engine.publish(\"Pi\", mqtt_topic, str(currentValue.value),0,0)\n"
                    }
                  ],
                  "value": true,
                  "name": "out4",
                  "tagType": "AtomicTag"
                },
                {
                  "eventScripts": [
                    {
                      "eventid": "valueChanged",
                      "script": "\t# Extract the UDT instance name from the tag path\n\tudt_instance_name \u003d \u0027/\u0027.join(tagPath.split(\"/\")[-3:])\n\t\n\t# Read the namespace from the default provider\n\tnamespace_tag_path \u003d \"[default]namespace\"\n\tnamespace_value \u003d system.tag.read(namespace_tag_path).value\n\t\n\t# Construct the MQTT topic using the UDT instance name\n\tmqtt_topic \u003d namespace_value + udt_instance_name\n\t\n\t# Publish the current value to the MQTT topic\n\tsystem.cirruslink.engine.publish(\"Pi\", mqtt_topic, str(currentValue.value),0,0)\n\t"
                    }
                  ],
                  "value": true,
                  "name": "out1",
                  "tagType": "AtomicTag"
                },
                {
                  "eventScripts": [
                    {
                      "eventid": "valueChanged",
                      "script": "\t# Extract the UDT instance name from the tag path\n\tudt_instance_name \u003d \u0027/\u0027.join(tagPath.split(\"/\")[-3:])\n\t\n\t# Read the namespace from the default provider\n\tnamespace_tag_path \u003d \"[default]namespace\"\n\tnamespace_value \u003d system.tag.read(namespace_tag_path).value\n\t\n\t# Construct the MQTT topic using the UDT instance name\n\tmqtt_topic \u003d namespace_value + udt_instance_name\n\t\n\t# Publish the current value to the MQTT topic\n\tsystem.cirruslink.engine.publish(\"Pi\", mqtt_topic, str(currentValue.value),0,0)\n"
                    }
                  ],
                  "value": "hello",
                  "name": "message",
                  "tagType": "AtomicTag"
                },
                {
                  "eventScripts": [
                    {
                      "eventid": "valueChanged",
                      "script": "\t# Extract the UDT instance name from the tag path\n\tudt_instance_name \u003d \u0027/\u0027.join(tagPath.split(\"/\")[-3:])\n\t\n\t# Read the namespace from the default provider\n\tnamespace_tag_path \u003d \"[default]namespace\"\n\tnamespace_value \u003d system.tag.read(namespace_tag_path).value\n\t\n\t# Construct the MQTT topic using the UDT instance name\n\tmqtt_topic \u003d namespace_value + udt_instance_name\n\t\n\t# Publish the current value to the MQTT topic\n\tsystem.cirruslink.engine.publish(\"Pi\", mqtt_topic, str(currentValue.value),0,0)\n"
                    }
                  ],
                  "value": 0,
                  "name": "stepperStep",
                  "tagType": "AtomicTag"
                },
                {
                  "eventScripts": [
                    {
                      "eventid": "valueChanged",
                      "script": "\t# Extract the UDT instance name from the tag path\n\tudt_instance_name \u003d \u0027/\u0027.join(tagPath.split(\"/\")[-3:])\n\t\n\t# Read the namespace from the default provider\n\tnamespace_tag_path \u003d \"[default]namespace\"\n\tnamespace_value \u003d system.tag.read(namespace_tag_path).value\n\t\n\t# Construct the MQTT topic using the UDT instance name\n\tmqtt_topic \u003d namespace_value + udt_instance_name\n\t\n\t# Publish the current value to the MQTT topic\n\tsystem.cirruslink.engine.publish(\"Pi\", mqtt_topic, str(currentValue.value),0,0)\n"
                    }
                  ],
                  "value": true,
                  "name": "out2",
                  "tagType": "AtomicTag"
                },
                {
                  "eventScripts": [
                    {
                      "eventid": "valueChanged",
                      "script": "\t# Extract the UDT instance name from the tag path\n\tudt_instance_name \u003d \u0027/\u0027.join(tagPath.split(\"/\")[-3:])\n\t\n\t# Read the namespace from the default provider\n\tnamespace_tag_path \u003d \"[default]namespace\"\n\tnamespace_value \u003d system.tag.read(namespace_tag_path).value\n\t\n\t# Construct the MQTT topic using the UDT instance name\n\tmqtt_topic \u003d namespace_value + udt_instance_name\n\t\n\t# Publish the current value to the MQTT topic\n\tsystem.cirruslink.engine.publish(\"Pi\", mqtt_topic, str(currentValue.value),0,0)\n"
                    }
                  ],
                  "value": true,
                  "name": "out3",
                  "tagType": "AtomicTag"
                }
              ]
            },
            {
              "name": "in",
              "tagType": "Folder",
              "tags": [
                {
                  "name": "sensor1",
                  "tagType": "AtomicTag"
                },
                {
                  "name": "in1",
                  "tagType": "AtomicTag"
                },
                {
                  "name": "sensor2",
                  "tagType": "AtomicTag"
                }
              ]
            },
            {
              "name": "count",
              "tagType": "AtomicTag"
            }
          ]
        },
        {
          "out3": false,
          "name": "thing19",
          "typeId": "thing",
          "tagType": "UdtInstance",
          "tags": [
            {
              "name": "count",
              "tagType": "AtomicTag"
            },
            {
              "name": "in",
              "tagType": "Folder",
              "tags": [
                {
                  "name": "sensor2",
                  "tagType": "AtomicTag"
                },
                {
                  "name": "sensor1",
                  "tagType": "AtomicTag"
                },
                {
                  "name": "in1",
                  "tagType": "AtomicTag"
                }
              ]
            },
            {
              "name": "out",
              "tagType": "Folder",
              "tags": [
                {
                  "eventScripts": [
                    {
                      "eventid": "valueChanged",
                      "script": "\t# Extract the UDT instance name from the tag path\n\tudt_instance_name \u003d \u0027/\u0027.join(tagPath.split(\"/\")[-3:])\n\t\n\t# Read the namespace from the default provider\n\tnamespace_tag_path \u003d \"[default]namespace\"\n\tnamespace_value \u003d system.tag.read(namespace_tag_path).value\n\t\n\t# Construct the MQTT topic using the UDT instance name\n\tmqtt_topic \u003d namespace_value + udt_instance_name\n\t\n\t# Publish the current value to the MQTT topic\n\tsystem.cirruslink.engine.publish(\"Pi\", mqtt_topic, str(currentValue.value),0,0)\n"
                    }
                  ],
                  "value": false,
                  "name": "out2",
                  "tagType": "AtomicTag"
                },
                {
                  "eventScripts": [
                    {
                      "eventid": "valueChanged",
                      "script": "\t# Extract the UDT instance name from the tag path\n\tudt_instance_name \u003d \u0027/\u0027.join(tagPath.split(\"/\")[-3:])\n\t\n\t# Read the namespace from the default provider\n\tnamespace_tag_path \u003d \"[default]namespace\"\n\tnamespace_value \u003d system.tag.read(namespace_tag_path).value\n\t\n\t# Construct the MQTT topic using the UDT instance name\n\tmqtt_topic \u003d namespace_value + udt_instance_name\n\t\n\t# Publish the current value to the MQTT topic\n\tsystem.cirruslink.engine.publish(\"Pi\", mqtt_topic, str(currentValue.value),0,0)\n"
                    }
                  ],
                  "value": "null",
                  "name": "message",
                  "tagType": "AtomicTag"
                },
                {
                  "eventScripts": [
                    {
                      "eventid": "valueChanged",
                      "script": "\t# Extract the UDT instance name from the tag path\n\tudt_instance_name \u003d \u0027/\u0027.join(tagPath.split(\"/\")[-3:])\n\t\n\t# Read the namespace from the default provider\n\tnamespace_tag_path \u003d \"[default]namespace\"\n\tnamespace_value \u003d system.tag.read(namespace_tag_path).value\n\t\n\t# Construct the MQTT topic using the UDT instance name\n\tmqtt_topic \u003d namespace_value + udt_instance_name\n\t\n\t# Publish the current value to the MQTT topic\n\tsystem.cirruslink.engine.publish(\"Pi\", mqtt_topic, str(currentValue.value),0,0)\n"
                    }
                  ],
                  "value": 20,
                  "name": "stepperSpeed",
                  "tagType": "AtomicTag"
                },
                {
                  "eventScripts": [
                    {
                      "eventid": "valueChanged",
                      "script": "\t# Extract the UDT instance name from the tag path\n\tudt_instance_name \u003d \u0027/\u0027.join(tagPath.split(\"/\")[-3:])\n\t\n\t# Read the namespace from the default provider\n\tnamespace_tag_path \u003d \"[default]namespace\"\n\tnamespace_value \u003d system.tag.read(namespace_tag_path).value\n\t\n\t# Construct the MQTT topic using the UDT instance name\n\tmqtt_topic \u003d namespace_value + udt_instance_name\n\t\n\t# Publish the current value to the MQTT topic\n\tsystem.cirruslink.engine.publish(\"Pi\", mqtt_topic, str(currentValue.value),0,0)\n"
                    }
                  ],
                  "value": -2000,
                  "name": "stepperStep",
                  "tagType": "AtomicTag"
                },
                {
                  "eventScripts": [
                    {
                      "eventid": "valueChanged",
                      "script": "\t# Extract the UDT instance name from the tag path\n\tudt_instance_name \u003d \u0027/\u0027.join(tagPath.split(\"/\")[-3:])\n\t\n\t# Read the namespace from the default provider\n\tnamespace_tag_path \u003d \"[default]namespace\"\n\tnamespace_value \u003d system.tag.read(namespace_tag_path).value\n\t\n\t# Construct the MQTT topic using the UDT instance name\n\tmqtt_topic \u003d namespace_value + udt_instance_name\n\t\n\t# Publish the current value to the MQTT topic\n\tsystem.cirruslink.engine.publish(\"Pi\", mqtt_topic, str(currentValue.value),0,0)\n"
                    }
                  ],
                  "value": false,
                  "name": "out4",
                  "tagType": "AtomicTag"
                },
                {
                  "eventScripts": [
                    {
                      "eventid": "valueChanged",
                      "script": "\t# Extract the UDT instance name from the tag path\n\tudt_instance_name \u003d \u0027/\u0027.join(tagPath.split(\"/\")[-3:])\n\t\n\t# Read the namespace from the default provider\n\tnamespace_tag_path \u003d \"[default]namespace\"\n\tnamespace_value \u003d system.tag.read(namespace_tag_path).value\n\t\n\t# Construct the MQTT topic using the UDT instance name\n\tmqtt_topic \u003d namespace_value + udt_instance_name\n\t\n\t# Publish the current value to the MQTT topic\n\tsystem.cirruslink.engine.publish(\"Pi\", mqtt_topic, str(currentValue.value),0,0)\n\t"
                    }
                  ],
                  "value": false,
                  "name": "out1",
                  "tagType": "AtomicTag"
                },
                {
                  "eventScripts": [
                    {
                      "eventid": "valueChanged",
                      "script": "\t# Extract the UDT instance name from the tag path\n\tudt_instance_name \u003d \u0027/\u0027.join(tagPath.split(\"/\")[-3:])\n\t\n\t# Read the namespace from the default provider\n\tnamespace_tag_path \u003d \"[default]namespace\"\n\tnamespace_value \u003d system.tag.read(namespace_tag_path).value\n\t\n\t# Construct the MQTT topic using the UDT instance name\n\tmqtt_topic \u003d namespace_value + udt_instance_name\n\t\n\t# Publish the current value to the MQTT topic\n\tsystem.cirruslink.engine.publish(\"Pi\", mqtt_topic, str(currentValue.value),0,0)\n"
                    }
                  ],
                  "value": false,
                  "name": "out3",
                  "tagType": "AtomicTag"
                }
              ]
            }
          ]
        },
        {
          "out3": false,
          "name": "thing16",
          "typeId": "thing",
          "tagType": "UdtInstance",
          "tags": [
            {
              "name": "in",
              "tagType": "Folder",
              "tags": [
                {
                  "name": "in1",
                  "tagType": "AtomicTag"
                },
                {
                  "name": "sensor2",
                  "tagType": "AtomicTag"
                },
                {
                  "name": "sensor1",
                  "tagType": "AtomicTag"
                }
              ]
            },
            {
              "name": "count",
              "tagType": "AtomicTag"
            },
            {
              "name": "out",
              "tagType": "Folder",
              "tags": [
                {
                  "eventScripts": [
                    {
                      "eventid": "valueChanged",
                      "script": "\t# Extract the UDT instance name from the tag path\n\tudt_instance_name \u003d \u0027/\u0027.join(tagPath.split(\"/\")[-3:])\n\t\n\t# Read the namespace from the default provider\n\tnamespace_tag_path \u003d \"[default]namespace\"\n\tnamespace_value \u003d system.tag.read(namespace_tag_path).value\n\t\n\t# Construct the MQTT topic using the UDT instance name\n\tmqtt_topic \u003d namespace_value + udt_instance_name\n\t\n\t# Publish the current value to the MQTT topic\n\tsystem.cirruslink.engine.publish(\"Pi\", mqtt_topic, str(currentValue.value),0,0)\n"
                    }
                  ],
                  "value": false,
                  "name": "out4",
                  "tagType": "AtomicTag"
                },
                {
                  "eventScripts": [
                    {
                      "eventid": "valueChanged",
                      "script": "\t# Extract the UDT instance name from the tag path\n\tudt_instance_name \u003d \u0027/\u0027.join(tagPath.split(\"/\")[-3:])\n\t\n\t# Read the namespace from the default provider\n\tnamespace_tag_path \u003d \"[default]namespace\"\n\tnamespace_value \u003d system.tag.read(namespace_tag_path).value\n\t\n\t# Construct the MQTT topic using the UDT instance name\n\tmqtt_topic \u003d namespace_value + udt_instance_name\n\t\n\t# Publish the current value to the MQTT topic\n\tsystem.cirruslink.engine.publish(\"Pi\", mqtt_topic, str(currentValue.value),0,0)\n"
                    }
                  ],
                  "value": false,
                  "name": "out3",
                  "tagType": "AtomicTag"
                },
                {
                  "eventScripts": [
                    {
                      "eventid": "valueChanged",
                      "script": "\t# Extract the UDT instance name from the tag path\n\tudt_instance_name \u003d \u0027/\u0027.join(tagPath.split(\"/\")[-3:])\n\t\n\t# Read the namespace from the default provider\n\tnamespace_tag_path \u003d \"[default]namespace\"\n\tnamespace_value \u003d system.tag.read(namespace_tag_path).value\n\t\n\t# Construct the MQTT topic using the UDT instance name\n\tmqtt_topic \u003d namespace_value + udt_instance_name\n\t\n\t# Publish the current value to the MQTT topic\n\tsystem.cirruslink.engine.publish(\"Pi\", mqtt_topic, str(currentValue.value),0,0)\n"
                    }
                  ],
                  "value": false,
                  "name": "out2",
                  "tagType": "AtomicTag"
                },
                {
                  "eventScripts": [
                    {
                      "eventid": "valueChanged",
                      "script": "\t# Extract the UDT instance name from the tag path\n\tudt_instance_name \u003d \u0027/\u0027.join(tagPath.split(\"/\")[-3:])\n\t\n\t# Read the namespace from the default provider\n\tnamespace_tag_path \u003d \"[default]namespace\"\n\tnamespace_value \u003d system.tag.read(namespace_tag_path).value\n\t\n\t# Construct the MQTT topic using the UDT instance name\n\tmqtt_topic \u003d namespace_value + udt_instance_name\n\t\n\t# Publish the current value to the MQTT topic\n\tsystem.cirruslink.engine.publish(\"Pi\", mqtt_topic, str(currentValue.value),0,0)\n"
                    }
                  ],
                  "value": 20,
                  "name": "stepperSpeed",
                  "tagType": "AtomicTag"
                },
                {
                  "eventScripts": [
                    {
                      "eventid": "valueChanged",
                      "script": "\t# Extract the UDT instance name from the tag path\n\tudt_instance_name \u003d \u0027/\u0027.join(tagPath.split(\"/\")[-3:])\n\t\n\t# Read the namespace from the default provider\n\tnamespace_tag_path \u003d \"[default]namespace\"\n\tnamespace_value \u003d system.tag.read(namespace_tag_path).value\n\t\n\t# Construct the MQTT topic using the UDT instance name\n\tmqtt_topic \u003d namespace_value + udt_instance_name\n\t\n\t# Publish the current value to the MQTT topic\n\tsystem.cirruslink.engine.publish(\"Pi\", mqtt_topic, str(currentValue.value),0,0)\n"
                    }
                  ],
                  "value": -2000,
                  "name": "stepperStep",
                  "tagType": "AtomicTag"
                },
                {
                  "eventScripts": [
                    {
                      "eventid": "valueChanged",
                      "script": "\t# Extract the UDT instance name from the tag path\n\tudt_instance_name \u003d \u0027/\u0027.join(tagPath.split(\"/\")[-3:])\n\t\n\t# Read the namespace from the default provider\n\tnamespace_tag_path \u003d \"[default]namespace\"\n\tnamespace_value \u003d system.tag.read(namespace_tag_path).value\n\t\n\t# Construct the MQTT topic using the UDT instance name\n\tmqtt_topic \u003d namespace_value + udt_instance_name\n\t\n\t# Publish the current value to the MQTT topic\n\tsystem.cirruslink.engine.publish(\"Pi\", mqtt_topic, str(currentValue.value),0,0)\n"
                    }
                  ],
                  "value": "null",
                  "name": "message",
                  "tagType": "AtomicTag"
                },
                {
                  "eventScripts": [
                    {
                      "eventid": "valueChanged",
                      "script": "\t# Extract the UDT instance name from the tag path\n\tudt_instance_name \u003d \u0027/\u0027.join(tagPath.split(\"/\")[-3:])\n\t\n\t# Read the namespace from the default provider\n\tnamespace_tag_path \u003d \"[default]namespace\"\n\tnamespace_value \u003d system.tag.read(namespace_tag_path).value\n\t\n\t# Construct the MQTT topic using the UDT instance name\n\tmqtt_topic \u003d namespace_value + udt_instance_name\n\t\n\t# Publish the current value to the MQTT topic\n\tsystem.cirruslink.engine.publish(\"Pi\", mqtt_topic, str(currentValue.value),0,0)\n\t"
                    }
                  ],
                  "value": false,
                  "name": "out1",
                  "tagType": "AtomicTag"
                }
              ]
            }
          ]
        },
        {
          "out3": false,
          "name": "thing1",
          "typeId": "thing",
          "tagType": "UdtInstance",
          "tags": [
            {
              "name": "out",
              "tagType": "Folder",
              "tags": [
                {
                  "eventScripts": [
                    {
                      "eventid": "valueChanged",
                      "script": "\t# Extract the UDT instance name from the tag path\n\tudt_instance_name \u003d \u0027/\u0027.join(tagPath.split(\"/\")[-3:])\n\t\n\t# Read the namespace from the default provider\n\tnamespace_tag_path \u003d \"[default]namespace\"\n\tnamespace_value \u003d system.tag.read(namespace_tag_path).value\n\t\n\t# Construct the MQTT topic using the UDT instance name\n\tmqtt_topic \u003d namespace_value + udt_instance_name\n\t\n\t# Publish the current value to the MQTT topic\n\tsystem.cirruslink.engine.publish(\"Pi\", mqtt_topic, str(currentValue.value),0,0)\n"
                    }
                  ],
                  "value": false,
                  "name": "out2",
                  "tagType": "AtomicTag"
                },
                {
                  "eventScripts": [
                    {
                      "eventid": "valueChanged",
                      "script": "\t# Extract the UDT instance name from the tag path\n\tudt_instance_name \u003d \u0027/\u0027.join(tagPath.split(\"/\")[-3:])\n\t\n\t# Read the namespace from the default provider\n\tnamespace_tag_path \u003d \"[default]namespace\"\n\tnamespace_value \u003d system.tag.read(namespace_tag_path).value\n\t\n\t# Construct the MQTT topic using the UDT instance name\n\tmqtt_topic \u003d namespace_value + udt_instance_name\n\t\n\t# Publish the current value to the MQTT topic\n\tsystem.cirruslink.engine.publish(\"Pi\", mqtt_topic, str(currentValue.value),0,0)\n"
                    }
                  ],
                  "value": 2000,
                  "name": "stepperStep",
                  "tagType": "AtomicTag"
                },
                {
                  "eventScripts": [
                    {
                      "eventid": "valueChanged",
                      "script": "\t# Extract the UDT instance name from the tag path\n\tudt_instance_name \u003d \u0027/\u0027.join(tagPath.split(\"/\")[-3:])\n\t\n\t# Read the namespace from the default provider\n\tnamespace_tag_path \u003d \"[default]namespace\"\n\tnamespace_value \u003d system.tag.read(namespace_tag_path).value\n\t\n\t# Construct the MQTT topic using the UDT instance name\n\tmqtt_topic \u003d namespace_value + udt_instance_name\n\t\n\t# Publish the current value to the MQTT topic\n\tsystem.cirruslink.engine.publish(\"Pi\", mqtt_topic, str(currentValue.value),0,0)\n"
                    }
                  ],
                  "value": false,
                  "name": "out3",
                  "tagType": "AtomicTag"
                },
                {
                  "eventScripts": [
                    {
                      "eventid": "valueChanged",
                      "script": "\t# Extract the UDT instance name from the tag path\n\tudt_instance_name \u003d \u0027/\u0027.join(tagPath.split(\"/\")[-3:])\n\t\n\t# Read the namespace from the default provider\n\tnamespace_tag_path \u003d \"[default]namespace\"\n\tnamespace_value \u003d system.tag.read(namespace_tag_path).value\n\t\n\t# Construct the MQTT topic using the UDT instance name\n\tmqtt_topic \u003d namespace_value + udt_instance_name\n\t\n\t# Publish the current value to the MQTT topic\n\tsystem.cirruslink.engine.publish(\"Pi\", mqtt_topic, str(currentValue.value),0,0)\n\t"
                    }
                  ],
                  "value": false,
                  "name": "out1",
                  "tagType": "AtomicTag"
                },
                {
                  "eventScripts": [
                    {
                      "eventid": "valueChanged",
                      "script": "\t# Extract the UDT instance name from the tag path\n\tudt_instance_name \u003d \u0027/\u0027.join(tagPath.split(\"/\")[-3:])\n\t\n\t# Read the namespace from the default provider\n\tnamespace_tag_path \u003d \"[default]namespace\"\n\tnamespace_value \u003d system.tag.read(namespace_tag_path).value\n\t\n\t# Construct the MQTT topic using the UDT instance name\n\tmqtt_topic \u003d namespace_value + udt_instance_name\n\t\n\t# Publish the current value to the MQTT topic\n\tsystem.cirruslink.engine.publish(\"Pi\", mqtt_topic, str(currentValue.value),0,0)\n"
                    }
                  ],
                  "value": false,
                  "name": "out4",
                  "tagType": "AtomicTag"
                },
                {
                  "eventScripts": [
                    {
                      "eventid": "valueChanged",
                      "script": "\t# Extract the UDT instance name from the tag path\n\tudt_instance_name \u003d \u0027/\u0027.join(tagPath.split(\"/\")[-3:])\n\t\n\t# Read the namespace from the default provider\n\tnamespace_tag_path \u003d \"[default]namespace\"\n\tnamespace_value \u003d system.tag.read(namespace_tag_path).value\n\t\n\t# Construct the MQTT topic using the UDT instance name\n\tmqtt_topic \u003d namespace_value + udt_instance_name\n\t\n\t# Publish the current value to the MQTT topic\n\tsystem.cirruslink.engine.publish(\"Pi\", mqtt_topic, str(currentValue.value),0,0)\n"
                    }
                  ],
                  "value": 20,
                  "name": "stepperSpeed",
                  "tagType": "AtomicTag"
                },
                {
                  "eventScripts": [
                    {
                      "eventid": "valueChanged",
                      "script": "\t# Extract the UDT instance name from the tag path\n\tudt_instance_name \u003d \u0027/\u0027.join(tagPath.split(\"/\")[-3:])\n\t\n\t# Read the namespace from the default provider\n\tnamespace_tag_path \u003d \"[default]namespace\"\n\tnamespace_value \u003d system.tag.read(namespace_tag_path).value\n\t\n\t# Construct the MQTT topic using the UDT instance name\n\tmqtt_topic \u003d namespace_value + udt_instance_name\n\t\n\t# Publish the current value to the MQTT topic\n\tsystem.cirruslink.engine.publish(\"Pi\", mqtt_topic, str(currentValue.value),0,0)\n"
                    }
                  ],
                  "value": "Do you want lunch?",
                  "name": "message",
                  "tagType": "AtomicTag"
                }
              ]
            },
            {
              "name": "in",
              "tagType": "Folder",
              "tags": [
                {
                  "name": "in1",
                  "tagType": "AtomicTag"
                },
                {
                  "name": "sensor2",
                  "tagType": "AtomicTag"
                },
                {
                  "name": "sensor1",
                  "tagType": "AtomicTag"
                }
              ]
            },
            {
              "name": "count",
              "tagType": "AtomicTag"
            }
          ]
        },
        {
          "out3": false,
          "name": "thing9",
          "typeId": "thing",
          "tagType": "UdtInstance",
          "tags": [
            {
              "name": "out",
              "tagType": "Folder",
              "tags": [
                {
                  "eventScripts": [
                    {
                      "eventid": "valueChanged",
                      "script": "\t# Extract the UDT instance name from the tag path\n\tudt_instance_name \u003d \u0027/\u0027.join(tagPath.split(\"/\")[-3:])\n\t\n\t# Read the namespace from the default provider\n\tnamespace_tag_path \u003d \"[default]namespace\"\n\tnamespace_value \u003d system.tag.read(namespace_tag_path).value\n\t\n\t# Construct the MQTT topic using the UDT instance name\n\tmqtt_topic \u003d namespace_value + udt_instance_name\n\t\n\t# Publish the current value to the MQTT topic\n\tsystem.cirruslink.engine.publish(\"Pi\", mqtt_topic, str(currentValue.value),0,0)\n"
                    }
                  ],
                  "value": 20,
                  "name": "stepperSpeed",
                  "tagType": "AtomicTag"
                },
                {
                  "eventScripts": [
                    {
                      "eventid": "valueChanged",
                      "script": "\t# Extract the UDT instance name from the tag path\n\tudt_instance_name \u003d \u0027/\u0027.join(tagPath.split(\"/\")[-3:])\n\t\n\t# Read the namespace from the default provider\n\tnamespace_tag_path \u003d \"[default]namespace\"\n\tnamespace_value \u003d system.tag.read(namespace_tag_path).value\n\t\n\t# Construct the MQTT topic using the UDT instance name\n\tmqtt_topic \u003d namespace_value + udt_instance_name\n\t\n\t# Publish the current value to the MQTT topic\n\tsystem.cirruslink.engine.publish(\"Pi\", mqtt_topic, str(currentValue.value),0,0)\n\t"
                    }
                  ],
                  "value": true,
                  "name": "out1",
                  "tagType": "AtomicTag"
                },
                {
                  "eventScripts": [
                    {
                      "eventid": "valueChanged",
                      "script": "\t# Extract the UDT instance name from the tag path\n\tudt_instance_name \u003d \u0027/\u0027.join(tagPath.split(\"/\")[-3:])\n\t\n\t# Read the namespace from the default provider\n\tnamespace_tag_path \u003d \"[default]namespace\"\n\tnamespace_value \u003d system.tag.read(namespace_tag_path).value\n\t\n\t# Construct the MQTT topic using the UDT instance name\n\tmqtt_topic \u003d namespace_value + udt_instance_name\n\t\n\t# Publish the current value to the MQTT topic\n\tsystem.cirruslink.engine.publish(\"Pi\", mqtt_topic, str(currentValue.value),0,0)\n"
                    }
                  ],
                  "value": true,
                  "name": "out4",
                  "tagType": "AtomicTag"
                },
                {
                  "eventScripts": [
                    {
                      "eventid": "valueChanged",
                      "script": "\t# Extract the UDT instance name from the tag path\n\tudt_instance_name \u003d \u0027/\u0027.join(tagPath.split(\"/\")[-3:])\n\t\n\t# Read the namespace from the default provider\n\tnamespace_tag_path \u003d \"[default]namespace\"\n\tnamespace_value \u003d system.tag.read(namespace_tag_path).value\n\t\n\t# Construct the MQTT topic using the UDT instance name\n\tmqtt_topic \u003d namespace_value + udt_instance_name\n\t\n\t# Publish the current value to the MQTT topic\n\tsystem.cirruslink.engine.publish(\"Pi\", mqtt_topic, str(currentValue.value),0,0)\n"
                    }
                  ],
                  "value": "null",
                  "name": "message",
                  "tagType": "AtomicTag"
                },
                {
                  "eventScripts": [
                    {
                      "eventid": "valueChanged",
                      "script": "\t# Extract the UDT instance name from the tag path\n\tudt_instance_name \u003d \u0027/\u0027.join(tagPath.split(\"/\")[-3:])\n\t\n\t# Read the namespace from the default provider\n\tnamespace_tag_path \u003d \"[default]namespace\"\n\tnamespace_value \u003d system.tag.read(namespace_tag_path).value\n\t\n\t# Construct the MQTT topic using the UDT instance name\n\tmqtt_topic \u003d namespace_value + udt_instance_name\n\t\n\t# Publish the current value to the MQTT topic\n\tsystem.cirruslink.engine.publish(\"Pi\", mqtt_topic, str(currentValue.value),0,0)\n"
                    }
                  ],
                  "value": 0,
                  "name": "stepperStep",
                  "tagType": "AtomicTag"
                },
                {
                  "eventScripts": [
                    {
                      "eventid": "valueChanged",
                      "script": "\t# Extract the UDT instance name from the tag path\n\tudt_instance_name \u003d \u0027/\u0027.join(tagPath.split(\"/\")[-3:])\n\t\n\t# Read the namespace from the default provider\n\tnamespace_tag_path \u003d \"[default]namespace\"\n\tnamespace_value \u003d system.tag.read(namespace_tag_path).value\n\t\n\t# Construct the MQTT topic using the UDT instance name\n\tmqtt_topic \u003d namespace_value + udt_instance_name\n\t\n\t# Publish the current value to the MQTT topic\n\tsystem.cirruslink.engine.publish(\"Pi\", mqtt_topic, str(currentValue.value),0,0)\n"
                    }
                  ],
                  "value": true,
                  "name": "out3",
                  "tagType": "AtomicTag"
                },
                {
                  "eventScripts": [
                    {
                      "eventid": "valueChanged",
                      "script": "\t# Extract the UDT instance name from the tag path\n\tudt_instance_name \u003d \u0027/\u0027.join(tagPath.split(\"/\")[-3:])\n\t\n\t# Read the namespace from the default provider\n\tnamespace_tag_path \u003d \"[default]namespace\"\n\tnamespace_value \u003d system.tag.read(namespace_tag_path).value\n\t\n\t# Construct the MQTT topic using the UDT instance name\n\tmqtt_topic \u003d namespace_value + udt_instance_name\n\t\n\t# Publish the current value to the MQTT topic\n\tsystem.cirruslink.engine.publish(\"Pi\", mqtt_topic, str(currentValue.value),0,0)\n"
                    }
                  ],
                  "value": true,
                  "name": "out2",
                  "tagType": "AtomicTag"
                }
              ]
            },
            {
              "name": "count",
              "tagType": "AtomicTag"
            },
            {
              "name": "in",
              "tagType": "Folder",
              "tags": [
                {
                  "name": "sensor1",
                  "tagType": "AtomicTag"
                },
                {
                  "name": "in1",
                  "tagType": "AtomicTag"
                },
                {
                  "name": "sensor2",
                  "tagType": "AtomicTag"
                }
              ]
            }
          ]
        },
        {
          "out3": false,
          "name": "thing6",
          "typeId": "thing",
          "tagType": "UdtInstance",
          "tags": [
            {
              "name": "in",
              "tagType": "Folder",
              "tags": [
                {
                  "name": "in1",
                  "tagType": "AtomicTag"
                },
                {
                  "name": "sensor1",
                  "tagType": "AtomicTag"
                },
                {
                  "name": "sensor2",
                  "tagType": "AtomicTag"
                }
              ]
            },
            {
              "name": "out",
              "tagType": "Folder",
              "tags": [
                {
                  "eventScripts": [
                    {
                      "eventid": "valueChanged",
                      "script": "\t# Extract the UDT instance name from the tag path\n\tudt_instance_name \u003d \u0027/\u0027.join(tagPath.split(\"/\")[-3:])\n\t\n\t# Read the namespace from the default provider\n\tnamespace_tag_path \u003d \"[default]namespace\"\n\tnamespace_value \u003d system.tag.read(namespace_tag_path).value\n\t\n\t# Construct the MQTT topic using the UDT instance name\n\tmqtt_topic \u003d namespace_value + udt_instance_name\n\t\n\t# Publish the current value to the MQTT topic\n\tsystem.cirruslink.engine.publish(\"Pi\", mqtt_topic, str(currentValue.value),0,0)\n"
                    }
                  ],
                  "value": false,
                  "name": "out4",
                  "tagType": "AtomicTag"
                },
                {
                  "eventScripts": [
                    {
                      "eventid": "valueChanged",
                      "script": "\t# Extract the UDT instance name from the tag path\n\tudt_instance_name \u003d \u0027/\u0027.join(tagPath.split(\"/\")[-3:])\n\t\n\t# Read the namespace from the default provider\n\tnamespace_tag_path \u003d \"[default]namespace\"\n\tnamespace_value \u003d system.tag.read(namespace_tag_path).value\n\t\n\t# Construct the MQTT topic using the UDT instance name\n\tmqtt_topic \u003d namespace_value + udt_instance_name\n\t\n\t# Publish the current value to the MQTT topic\n\tsystem.cirruslink.engine.publish(\"Pi\", mqtt_topic, str(currentValue.value),0,0)\n\t"
                    }
                  ],
                  "value": false,
                  "name": "out1",
                  "tagType": "AtomicTag"
                },
                {
                  "eventScripts": [
                    {
                      "eventid": "valueChanged",
                      "script": "\t# Extract the UDT instance name from the tag path\n\tudt_instance_name \u003d \u0027/\u0027.join(tagPath.split(\"/\")[-3:])\n\t\n\t# Read the namespace from the default provider\n\tnamespace_tag_path \u003d \"[default]namespace\"\n\tnamespace_value \u003d system.tag.read(namespace_tag_path).value\n\t\n\t# Construct the MQTT topic using the UDT instance name\n\tmqtt_topic \u003d namespace_value + udt_instance_name\n\t\n\t# Publish the current value to the MQTT topic\n\tsystem.cirruslink.engine.publish(\"Pi\", mqtt_topic, str(currentValue.value),0,0)\n"
                    }
                  ],
                  "value": "null",
                  "name": "message",
                  "tagType": "AtomicTag"
                },
                {
                  "eventScripts": [
                    {
                      "eventid": "valueChanged",
                      "script": "\t# Extract the UDT instance name from the tag path\n\tudt_instance_name \u003d \u0027/\u0027.join(tagPath.split(\"/\")[-3:])\n\t\n\t# Read the namespace from the default provider\n\tnamespace_tag_path \u003d \"[default]namespace\"\n\tnamespace_value \u003d system.tag.read(namespace_tag_path).value\n\t\n\t# Construct the MQTT topic using the UDT instance name\n\tmqtt_topic \u003d namespace_value + udt_instance_name\n\t\n\t# Publish the current value to the MQTT topic\n\tsystem.cirruslink.engine.publish(\"Pi\", mqtt_topic, str(currentValue.value),0,0)\n"
                    }
                  ],
                  "value": false,
                  "name": "out3",
                  "tagType": "AtomicTag"
                },
                {
                  "eventScripts": [
                    {
                      "eventid": "valueChanged",
                      "script": "\t# Extract the UDT instance name from the tag path\n\tudt_instance_name \u003d \u0027/\u0027.join(tagPath.split(\"/\")[-3:])\n\t\n\t# Read the namespace from the default provider\n\tnamespace_tag_path \u003d \"[default]namespace\"\n\tnamespace_value \u003d system.tag.read(namespace_tag_path).value\n\t\n\t# Construct the MQTT topic using the UDT instance name\n\tmqtt_topic \u003d namespace_value + udt_instance_name\n\t\n\t# Publish the current value to the MQTT topic\n\tsystem.cirruslink.engine.publish(\"Pi\", mqtt_topic, str(currentValue.value),0,0)\n"
                    }
                  ],
                  "value": 0,
                  "name": "stepperStep",
                  "tagType": "AtomicTag"
                },
                {
                  "eventScripts": [
                    {
                      "eventid": "valueChanged",
                      "script": "\t# Extract the UDT instance name from the tag path\n\tudt_instance_name \u003d \u0027/\u0027.join(tagPath.split(\"/\")[-3:])\n\t\n\t# Read the namespace from the default provider\n\tnamespace_tag_path \u003d \"[default]namespace\"\n\tnamespace_value \u003d system.tag.read(namespace_tag_path).value\n\t\n\t# Construct the MQTT topic using the UDT instance name\n\tmqtt_topic \u003d namespace_value + udt_instance_name\n\t\n\t# Publish the current value to the MQTT topic\n\tsystem.cirruslink.engine.publish(\"Pi\", mqtt_topic, str(currentValue.value),0,0)\n"
                    }
                  ],
                  "value": 20,
                  "name": "stepperSpeed",
                  "tagType": "AtomicTag"
                },
                {
                  "eventScripts": [
                    {
                      "eventid": "valueChanged",
                      "script": "\t# Extract the UDT instance name from the tag path\n\tudt_instance_name \u003d \u0027/\u0027.join(tagPath.split(\"/\")[-3:])\n\t\n\t# Read the namespace from the default provider\n\tnamespace_tag_path \u003d \"[default]namespace\"\n\tnamespace_value \u003d system.tag.read(namespace_tag_path).value\n\t\n\t# Construct the MQTT topic using the UDT instance name\n\tmqtt_topic \u003d namespace_value + udt_instance_name\n\t\n\t# Publish the current value to the MQTT topic\n\tsystem.cirruslink.engine.publish(\"Pi\", mqtt_topic, str(currentValue.value),0,0)\n"
                    }
                  ],
                  "value": false,
                  "name": "out2",
                  "tagType": "AtomicTag"
                }
              ]
            },
            {
              "name": "count",
              "tagType": "AtomicTag"
            }
          ]
        }
      ]
    },
    {
      "valueSource": "memory",
      "dataType": "String",
      "name": "namespace",
      "value": "line1/",
      "tagType": "AtomicTag"
    },
    {
      "valueSource": "memory",
      "dataType": "StringArray",
      "name": "device",
      "tagType": "AtomicTag"
    },
    {
      "name": "_types_",
      "tagType": "Folder",
      "tags": [
        {
          "out3": false,
          "name": "thing",
          "tagType": "UdtType",
          "tags": [
            {
              "name": "in",
              "tagType": "Folder",
              "tags": [
                {
                  "valueSource": "memory",
                  "dataType": "Boolean",
                  "name": "in1",
                  "tagType": "AtomicTag"
                },
                {
                  "valueSource": "memory",
                  "name": "sensor2",
                  "tagType": "AtomicTag"
                },
                {
                  "valueSource": "memory",
                  "name": "sensor1",
                  "tagType": "AtomicTag"
                }
              ]
            },
            {
              "valueSource": "memory",
              "name": "count",
              "tagType": "AtomicTag"
            },
            {
              "name": "out",
              "tagType": "Folder",
              "tags": [
                {
                  "valueSource": "memory",
                  "dataType": "Boolean",
                  "name": "out4",
                  "tagType": "AtomicTag"
                },
                {
                  "valueSource": "memory",
                  "dataType": "Boolean",
                  "name": "out2",
                  "tagType": "AtomicTag"
                },
                {
                  "valueSource": "memory",
                  "dataType": "Boolean",
                  "name": "out3",
                  "tagType": "AtomicTag"
                },
                {
                  "valueSource": "memory",
                  "name": "stepperSpeed",
                  "tagType": "AtomicTag"
                },
                {
                  "valueSource": "memory",
                  "name": "stepperStep",
                  "tagType": "AtomicTag"
                },
                {
                  "valueSource": "memory",
                  "dataType": "String",
                  "name": "message",
                  "tagType": "AtomicTag"
                },
                {
                  "valueSource": "memory",
                  "dataType": "Boolean",
                  "name": "out1",
                  "tagType": "AtomicTag"
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "Controller:Global",
      "tagType": "Folder",
      "tags": [
        {
          "name": "Conveyor:3:C",
          "tagType": "Folder",
          "tags": [
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Conveyor:3:C.Pad1",
              "dataType": "Int1",
              "name": "Pad1",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Conveyor:3:C.Ch0LowEngineering",
              "dataType": "Int2",
              "name": "Ch0LowEngineering",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Conveyor:3:C.Ch1FaultValue",
              "dataType": "Int2",
              "name": "Ch1FaultValue",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Conveyor:3:C.CfgIDNum",
              "dataType": "Int4",
              "name": "CfgIDNum",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Conveyor:3:C.Ch0LowLimit",
              "dataType": "Int2",
              "name": "Ch0LowLimit",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Conveyor:3:C.Ch0FaultMode",
              "dataType": "Int1",
              "name": "Ch0FaultMode",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Conveyor:3:C.Ch1FaultMode",
              "dataType": "Int1",
              "name": "Ch1FaultMode",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Conveyor:3:C.Ch1LowLimit",
              "dataType": "Int2",
              "name": "Ch1LowLimit",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Conveyor:3:C.Ch0LimitAlarmLatch",
              "dataType": "Int1",
              "name": "Ch0LimitAlarmLatch",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Conveyor:3:C.Ch0ProgMode",
              "dataType": "Int1",
              "name": "Ch0ProgMode",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Conveyor:3:C.Ch1LimitAlarmLatch",
              "dataType": "Int1",
              "name": "Ch1LimitAlarmLatch",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Conveyor:3:C.Ch0FaultValue",
              "dataType": "Int2",
              "name": "Ch0FaultValue",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Conveyor:3:C.Ch0RangeType",
              "dataType": "Int1",
              "name": "Ch0RangeType",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Conveyor:3:C.Ch1LowEngineering",
              "dataType": "Int2",
              "name": "Ch1LowEngineering",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Conveyor:3:C.Ch0ProgValue",
              "dataType": "Int2",
              "name": "Ch0ProgValue",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Conveyor:3:C.Ch0HighEngineering",
              "dataType": "Int2",
              "name": "Ch0HighEngineering",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Conveyor:3:C.Ch1ProgMode",
              "dataType": "Int1",
              "name": "Ch1ProgMode",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Conveyor:3:C.Ch0HighLimit",
              "dataType": "Int2",
              "name": "Ch0HighLimit",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Conveyor:3:C.Reserved",
              "dataType": "Int4",
              "name": "Reserved",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Conveyor:3:C.CfgSize",
              "dataType": "Int4",
              "name": "CfgSize",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Conveyor:3:C.Ch1HighEngineering",
              "dataType": "Int2",
              "name": "Ch1HighEngineering",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Conveyor:3:C.Ch0AlarmDisable",
              "dataType": "Int1",
              "name": "Ch0AlarmDisable",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Conveyor:3:C.Pad0",
              "dataType": "Int1",
              "name": "Pad0",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Conveyor:3:C.Ch1HighLimit",
              "dataType": "Int2",
              "name": "Ch1HighLimit",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Conveyor:3:C.Ch1AlarmDisable",
              "dataType": "Int1",
              "name": "Ch1AlarmDisable",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Conveyor:3:C.Ch1ProgValue",
              "dataType": "Int2",
              "name": "Ch1ProgValue",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Conveyor:3:C.Ch1RangeType",
              "dataType": "Int1",
              "name": "Ch1RangeType",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            }
          ]
        },
        {
          "valueSource": "opc",
          "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Blue_PB",
          "dataType": "Boolean",
          "name": "Blue_PB",
          "tagType": "AtomicTag",
          "opcServer": "Ignition OPC UA Server"
        },
        {
          "valueSource": "opc",
          "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]string",
          "dataType": "String",
          "name": "string",
          "tagType": "AtomicTag",
          "opcServer": "Ignition OPC UA Server"
        },
        {
          "name": "Local:1:I",
          "tagType": "Folder",
          "tags": [
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Local:1:I.Data",
              "dataType": "Int2",
              "name": "Data",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Local:1:I.Fault",
              "dataType": "Int4",
              "name": "Fault",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            }
          ]
        },
        {
          "valueSource": "opc",
          "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Toggle_Left",
          "dataType": "Boolean",
          "name": "Toggle_Left",
          "tagType": "AtomicTag",
          "opcServer": "Ignition OPC UA Server"
        },
        {
          "name": "Conveyor:O",
          "tagType": "Folder",
          "tags": [
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Conveyor:O.SlotControlBits32_63",
              "dataType": "Int4",
              "name": "SlotControlBits32_63",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Conveyor:O.SlotControlBits0_31",
              "dataType": "Int4",
              "name": "SlotControlBits0_31",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "name": "Data",
              "tagType": "Folder",
              "tags": [
                {
                  "valueSource": "opc",
                  "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Conveyor:O.Data[1]",
                  "dataType": "Int1",
                  "name": "Data_1_",
                  "tagType": "AtomicTag",
                  "opcServer": "Ignition OPC UA Server"
                },
                {
                  "valueSource": "opc",
                  "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Conveyor:O.Data[3]",
                  "dataType": "Int1",
                  "name": "Data_3_",
                  "tagType": "AtomicTag",
                  "opcServer": "Ignition OPC UA Server"
                },
                {
                  "valueSource": "opc",
                  "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Conveyor:O.Data[0]",
                  "dataType": "Int1",
                  "name": "Data_0_",
                  "tagType": "AtomicTag",
                  "opcServer": "Ignition OPC UA Server"
                },
                {
                  "valueSource": "opc",
                  "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Conveyor:O.Data[2]",
                  "dataType": "Int1",
                  "name": "Data_2_",
                  "tagType": "AtomicTag",
                  "opcServer": "Ignition OPC UA Server"
                }
              ]
            }
          ]
        },
        {
          "valueSource": "opc",
          "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Run",
          "dataType": "Boolean",
          "name": "Run",
          "tagType": "AtomicTag",
          "opcServer": "Ignition OPC UA Server"
        },
        {
          "valueSource": "opc",
          "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]length",
          "dataType": "Int4",
          "name": "length",
          "tagType": "AtomicTag",
          "opcServer": "Ignition OPC UA Server"
        },
        {
          "name": "Local:3:I",
          "tagType": "Folder",
          "tags": [
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Local:3:I.Ch1Calibration",
              "dataType": "Boolean",
              "name": "Ch1Calibration",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Local:3:I.Ch0Status",
              "dataType": "Int1",
              "name": "Ch0Status",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Local:3:I.Ch1LAlarm",
              "dataType": "Boolean",
              "name": "Ch1LAlarm",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Local:3:I.Fault",
              "dataType": "Int4",
              "name": "Fault",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Local:3:I.Ch1HAlarm",
              "dataType": "Boolean",
              "name": "Ch1HAlarm",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Local:3:I.Ch1Status",
              "dataType": "Int1",
              "name": "Ch1Status",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Local:3:I.Ch0LAlarm",
              "dataType": "Boolean",
              "name": "Ch0LAlarm",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Local:3:I.Ch0Fault",
              "dataType": "Boolean",
              "name": "Ch0Fault",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Local:3:I.Ch1Fault",
              "dataType": "Boolean",
              "name": "Ch1Fault",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Local:3:I.Ch0HAlarm",
              "dataType": "Boolean",
              "name": "Ch0HAlarm",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Local:3:I.Ch0Calibration",
              "dataType": "Boolean",
              "name": "Ch0Calibration",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            }
          ]
        },
        {
          "name": "Local:1:O",
          "tagType": "Folder",
          "tags": [
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Local:1:O.Data",
              "dataType": "Int2",
              "name": "Data",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            }
          ]
        },
        {
          "name": "Local:3:C",
          "tagType": "Folder",
          "tags": [
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Local:3:C.Ch1FaultValue",
              "dataType": "Int2",
              "name": "Ch1FaultValue",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Local:3:C.Ch0AlarmDisable",
              "dataType": "Int1",
              "name": "Ch0AlarmDisable",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Local:3:C.Ch0HighLimit",
              "dataType": "Int2",
              "name": "Ch0HighLimit",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Local:3:C.Ch0ProgMode",
              "dataType": "Int1",
              "name": "Ch0ProgMode",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Local:3:C.Ch1HighEngineering",
              "dataType": "Int2",
              "name": "Ch1HighEngineering",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Local:3:C.Ch1LowEngineering",
              "dataType": "Int2",
              "name": "Ch1LowEngineering",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Local:3:C.Ch0HighEngineering",
              "dataType": "Int2",
              "name": "Ch0HighEngineering",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Local:3:C.Pad0",
              "dataType": "Int1",
              "name": "Pad0",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Local:3:C.CfgIDNum",
              "dataType": "Int4",
              "name": "CfgIDNum",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Local:3:C.Ch0LowLimit",
              "dataType": "Int2",
              "name": "Ch0LowLimit",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Local:3:C.CfgSize",
              "dataType": "Int4",
              "name": "CfgSize",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Local:3:C.Pad1",
              "dataType": "Int1",
              "name": "Pad1",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Local:3:C.Ch1LowLimit",
              "dataType": "Int2",
              "name": "Ch1LowLimit",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Local:3:C.Ch1ProgValue",
              "dataType": "Int2",
              "name": "Ch1ProgValue",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Local:3:C.Ch1ProgMode",
              "dataType": "Int1",
              "name": "Ch1ProgMode",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Local:3:C.Reserved",
              "dataType": "Int4",
              "name": "Reserved",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Local:3:C.Ch1FaultMode",
              "dataType": "Int1",
              "name": "Ch1FaultMode",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Local:3:C.Ch1AlarmDisable",
              "dataType": "Int1",
              "name": "Ch1AlarmDisable",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Local:3:C.Ch0FaultMode",
              "dataType": "Int1",
              "name": "Ch0FaultMode",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Local:3:C.Ch0LowEngineering",
              "dataType": "Int2",
              "name": "Ch0LowEngineering",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Local:3:C.Ch1RangeType",
              "dataType": "Int1",
              "name": "Ch1RangeType",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Local:3:C.Ch1LimitAlarmLatch",
              "dataType": "Int1",
              "name": "Ch1LimitAlarmLatch",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Local:3:C.Ch0FaultValue",
              "dataType": "Int2",
              "name": "Ch0FaultValue",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Local:3:C.Ch1HighLimit",
              "dataType": "Int2",
              "name": "Ch1HighLimit",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Local:3:C.Ch0LimitAlarmLatch",
              "dataType": "Int1",
              "name": "Ch0LimitAlarmLatch",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Local:3:C.Ch0ProgValue",
              "dataType": "Int2",
              "name": "Ch0ProgValue",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Local:3:C.Ch0RangeType",
              "dataType": "Int1",
              "name": "Ch0RangeType",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            }
          ]
        },
        {
          "name": "Conveyor:3:I",
          "tagType": "Folder",
          "tags": [
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Conveyor:3:I.Ch0Calibration",
              "dataType": "Boolean",
              "name": "Ch0Calibration",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Conveyor:3:I.Ch1Fault",
              "dataType": "Boolean",
              "name": "Ch1Fault",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Conveyor:3:I.Ch1HAlarm",
              "dataType": "Boolean",
              "name": "Ch1HAlarm",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Conveyor:3:I.Ch0HAlarm",
              "dataType": "Boolean",
              "name": "Ch0HAlarm",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Conveyor:3:I.Ch1Calibration",
              "dataType": "Boolean",
              "name": "Ch1Calibration",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Conveyor:3:I.Ch0LAlarm",
              "dataType": "Boolean",
              "name": "Ch0LAlarm",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Conveyor:3:I.Ch0Status",
              "dataType": "Int1",
              "name": "Ch0Status",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Conveyor:3:I.Ch1Status",
              "dataType": "Int1",
              "name": "Ch1Status",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Conveyor:3:I.Ch0Fault",
              "dataType": "Boolean",
              "name": "Ch0Fault",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Conveyor:3:I.Fault",
              "dataType": "Int4",
              "name": "Fault",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Conveyor:3:I.Ch1LAlarm",
              "dataType": "Boolean",
              "name": "Ch1LAlarm",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            }
          ]
        },
        {
          "name": "Conveyor:3:O",
          "tagType": "Folder",
          "tags": [
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Conveyor:3:O.Ch0Data",
              "dataType": "Int2",
              "name": "Ch0Data",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Conveyor:3:O.Ch1Data",
              "dataType": "Int2",
              "name": "Ch1Data",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            }
          ]
        },
        {
          "valueSource": "opc",
          "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Toggle_Right",
          "dataType": "Boolean",
          "name": "Toggle_Right",
          "tagType": "AtomicTag",
          "opcServer": "Ignition OPC UA Server"
        },
        {
          "valueSource": "opc",
          "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Green_PB",
          "dataType": "Boolean",
          "name": "Green_PB",
          "tagType": "AtomicTag",
          "opcServer": "Ignition OPC UA Server"
        },
        {
          "valueSource": "opc",
          "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Speed_HMI",
          "dataType": "Int4",
          "name": "Speed_HMI",
          "tagType": "AtomicTag",
          "opcServer": "Ignition OPC UA Server"
        },
        {
          "valueSource": "opc",
          "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Yellow_Lamp",
          "dataType": "Boolean",
          "name": "Yellow_Lamp",
          "tagType": "AtomicTag",
          "opcServer": "Ignition OPC UA Server"
        },
        {
          "name": "Conveyor:I",
          "tagType": "Folder",
          "tags": [
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Conveyor:I.SlotStatusBits0_31",
              "dataType": "Int4",
              "name": "SlotStatusBits0_31",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Conveyor:I.SlotStatusBits32_63",
              "dataType": "Int4",
              "name": "SlotStatusBits32_63",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "name": "Data",
              "tagType": "Folder",
              "tags": [
                {
                  "valueSource": "opc",
                  "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Conveyor:I.Data[1]",
                  "dataType": "Int1",
                  "name": "Data_1_",
                  "tagType": "AtomicTag",
                  "opcServer": "Ignition OPC UA Server"
                },
                {
                  "valueSource": "opc",
                  "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Conveyor:I.Data[2]",
                  "dataType": "Int1",
                  "name": "Data_2_",
                  "tagType": "AtomicTag",
                  "opcServer": "Ignition OPC UA Server"
                },
                {
                  "valueSource": "opc",
                  "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Conveyor:I.Data[3]",
                  "dataType": "Int1",
                  "name": "Data_3_",
                  "tagType": "AtomicTag",
                  "opcServer": "Ignition OPC UA Server"
                },
                {
                  "valueSource": "opc",
                  "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Conveyor:I.Data[0]",
                  "dataType": "Int1",
                  "name": "Data_0_",
                  "tagType": "AtomicTag",
                  "opcServer": "Ignition OPC UA Server"
                }
              ]
            }
          ]
        },
        {
          "name": "Local:2:I",
          "tagType": "Folder",
          "tags": [
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Local:2:I.Ch0LAlarm",
              "dataType": "Boolean",
              "name": "Ch0LAlarm",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Local:2:I.Ch0Status",
              "dataType": "Int1",
              "name": "Ch0Status",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Local:2:I.Ch1LAlarm",
              "dataType": "Boolean",
              "name": "Ch1LAlarm",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Local:2:I.Ch0Fault",
              "dataType": "Boolean",
              "name": "Ch0Fault",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Local:2:I.Ch1Underrange",
              "dataType": "Boolean",
              "name": "Ch1Underrange",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Local:2:I.Ch1HHAlarm",
              "dataType": "Boolean",
              "name": "Ch1HHAlarm",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Local:2:I.Ch1LLAlarm",
              "dataType": "Boolean",
              "name": "Ch1LLAlarm",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Local:2:I.Ch1Overrange",
              "dataType": "Boolean",
              "name": "Ch1Overrange",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Local:2:I.Ch0HAlarm",
              "dataType": "Boolean",
              "name": "Ch0HAlarm",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Local:2:I.Ch0Calibration",
              "dataType": "Boolean",
              "name": "Ch0Calibration",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Local:2:I.Fault",
              "dataType": "Int4",
              "name": "Fault",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Local:2:I.Ch1HAlarm",
              "dataType": "Boolean",
              "name": "Ch1HAlarm",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Local:2:I.Ch1Status",
              "dataType": "Int1",
              "name": "Ch1Status",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Local:2:I.Ch0Underrange",
              "dataType": "Boolean",
              "name": "Ch0Underrange",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Local:2:I.Ch0Data",
              "dataType": "Int2",
              "name": "Ch0Data",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Local:2:I.Ch0LLAlarm",
              "dataType": "Boolean",
              "name": "Ch0LLAlarm",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Local:2:I.Ch0Overrange",
              "dataType": "Boolean",
              "name": "Ch0Overrange",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Local:2:I.Ch1Data",
              "dataType": "Int2",
              "name": "Ch1Data",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Local:2:I.Ch1Calibration",
              "dataType": "Boolean",
              "name": "Ch1Calibration",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Local:2:I.Ch0HHAlarm",
              "dataType": "Boolean",
              "name": "Ch0HHAlarm",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Local:2:I.Ch1Fault",
              "dataType": "Boolean",
              "name": "Ch1Fault",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            }
          ]
        },
        {
          "name": "timer",
          "tagType": "Folder",
          "tags": [
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]timer.EN",
              "dataType": "Boolean",
              "name": "EN",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]timer.PRE",
              "dataType": "Int4",
              "name": "PRE",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]timer.TT",
              "dataType": "Boolean",
              "name": "TT",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]timer.Control",
              "dataType": "Int4",
              "name": "Control",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]timer.ACC",
              "dataType": "Int4",
              "name": "ACC",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]timer.DN",
              "dataType": "Boolean",
              "name": "DN",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            }
          ]
        },
        {
          "valueSource": "opc",
          "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Conveyor:1:I",
          "dataType": "Int1",
          "name": "Conveyor:1:I",
          "tagType": "AtomicTag",
          "opcServer": "Ignition OPC UA Server"
        },
        {
          "name": "Local:1:C",
          "tagType": "Folder",
          "tags": [
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Local:1:C.Pt04FilterOffOn",
              "dataType": "Int2",
              "name": "Pt04FilterOffOn",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Local:1:C.Pt14FilterOnOff",
              "dataType": "Int2",
              "name": "Pt14FilterOnOff",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Local:1:C.Pt03FilterOffOn",
              "dataType": "Int2",
              "name": "Pt03FilterOffOn",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Local:1:C.Pt02FilterOnOff",
              "dataType": "Int2",
              "name": "Pt02FilterOnOff",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Local:1:C.Pt05FilterOnOff",
              "dataType": "Int2",
              "name": "Pt05FilterOnOff",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Local:1:C.Reserved",
              "dataType": "Int4",
              "name": "Reserved",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Local:1:C.Pt02FilterOffOn",
              "dataType": "Int2",
              "name": "Pt02FilterOffOn",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Local:1:C.Pt15FilterOnOff",
              "dataType": "Int2",
              "name": "Pt15FilterOnOff",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Local:1:C.Pt12FilterOffOn",
              "dataType": "Int2",
              "name": "Pt12FilterOffOn",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Local:1:C.Pt03FilterOnOff",
              "dataType": "Int2",
              "name": "Pt03FilterOnOff",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Local:1:C.Pt07FilterOffOn",
              "dataType": "Int2",
              "name": "Pt07FilterOffOn",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Local:1:C.Pt10FilterOffOn",
              "dataType": "Int2",
              "name": "Pt10FilterOffOn",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Local:1:C.Pt14FilterOffOn",
              "dataType": "Int2",
              "name": "Pt14FilterOffOn",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Local:1:C.ProgMode",
              "dataType": "Int2",
              "name": "ProgMode",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Local:1:C.Pt05FilterOffOn",
              "dataType": "Int2",
              "name": "Pt05FilterOffOn",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Local:1:C.Pt13FilterOffOn",
              "dataType": "Int2",
              "name": "Pt13FilterOffOn",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Local:1:C.Pt04FilterOnOff",
              "dataType": "Int2",
              "name": "Pt04FilterOnOff",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Local:1:C.Pt08FilterOffOn",
              "dataType": "Int2",
              "name": "Pt08FilterOffOn",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Local:1:C.Pt13FilterOnOff",
              "dataType": "Int2",
              "name": "Pt13FilterOnOff",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Local:1:C.Pt06FilterOnOff",
              "dataType": "Int2",
              "name": "Pt06FilterOnOff",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Local:1:C.Pt09FilterOnOff",
              "dataType": "Int2",
              "name": "Pt09FilterOnOff",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Local:1:C.Pt09FilterOffOn",
              "dataType": "Int2",
              "name": "Pt09FilterOffOn",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Local:1:C.FaultValue",
              "dataType": "Int2",
              "name": "FaultValue",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Local:1:C.Pt15FilterOffOn",
              "dataType": "Int2",
              "name": "Pt15FilterOffOn",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Local:1:C.FaultMode",
              "dataType": "Int2",
              "name": "FaultMode",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Local:1:C.Pt01FilterOffOn",
              "dataType": "Int2",
              "name": "Pt01FilterOffOn",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Local:1:C.ProgValue",
              "dataType": "Int2",
              "name": "ProgValue",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Local:1:C.Pt11FilterOffOn",
              "dataType": "Int2",
              "name": "Pt11FilterOffOn",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Local:1:C.Pt08FilterOnOff",
              "dataType": "Int2",
              "name": "Pt08FilterOnOff",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Local:1:C.Pt10FilterOnOff",
              "dataType": "Int2",
              "name": "Pt10FilterOnOff",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Local:1:C.Pt07FilterOnOff",
              "dataType": "Int2",
              "name": "Pt07FilterOnOff",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Local:1:C.CfgIDNum",
              "dataType": "Int4",
              "name": "CfgIDNum",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Local:1:C.Pt11FilterOnOff",
              "dataType": "Int2",
              "name": "Pt11FilterOnOff",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Local:1:C.COSOnOffEn",
              "dataType": "Int2",
              "name": "COSOnOffEn",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Local:1:C.Pt00FilterOnOff",
              "dataType": "Int2",
              "name": "Pt00FilterOnOff",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Local:1:C.Pt01FilterOnOff",
              "dataType": "Int2",
              "name": "Pt01FilterOnOff",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Local:1:C.Pt00FilterOffOn",
              "dataType": "Int2",
              "name": "Pt00FilterOffOn",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Local:1:C.Pt06FilterOffOn",
              "dataType": "Int2",
              "name": "Pt06FilterOffOn",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Local:1:C.CfgSize",
              "dataType": "Int4",
              "name": "CfgSize",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Local:1:C.COSOffOnEn",
              "dataType": "Int2",
              "name": "COSOffOnEn",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Local:1:C.Pt12FilterOnOff",
              "dataType": "Int2",
              "name": "Pt12FilterOnOff",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            }
          ]
        },
        {
          "name": "Conveyor:1:C",
          "tagType": "Folder",
          "tags": [
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Conveyor:1:C.Pt1FilterOnOff",
              "dataType": "Int2",
              "name": "Pt1FilterOnOff",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Conveyor:1:C.Pt7FilterOnOff",
              "dataType": "Int2",
              "name": "Pt7FilterOnOff",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Conveyor:1:C.Pt0FilterOnOff",
              "dataType": "Int2",
              "name": "Pt0FilterOnOff",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Conveyor:1:C.Pt2FilterOffOn",
              "dataType": "Int2",
              "name": "Pt2FilterOffOn",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Conveyor:1:C.CfgSize",
              "dataType": "Int4",
              "name": "CfgSize",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Conveyor:1:C.Pt4FilterOnOff",
              "dataType": "Int2",
              "name": "Pt4FilterOnOff",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Conveyor:1:C.Pt1FilterOffOn",
              "dataType": "Int2",
              "name": "Pt1FilterOffOn",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Conveyor:1:C.Pt6FilterOnOff",
              "dataType": "Int2",
              "name": "Pt6FilterOnOff",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Conveyor:1:C.CfgIDNum",
              "dataType": "Int4",
              "name": "CfgIDNum",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Conveyor:1:C.Pt0FilterOffOn",
              "dataType": "Int2",
              "name": "Pt0FilterOffOn",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Conveyor:1:C.Pt3FilterOffOn",
              "dataType": "Int2",
              "name": "Pt3FilterOffOn",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Conveyor:1:C.Pt5FilterOffOn",
              "dataType": "Int2",
              "name": "Pt5FilterOffOn",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Conveyor:1:C.Reserved",
              "dataType": "Int4",
              "name": "Reserved",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Conveyor:1:C.Pt5FilterOnOff",
              "dataType": "Int2",
              "name": "Pt5FilterOnOff",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Conveyor:1:C.Pt3FilterOnOff",
              "dataType": "Int2",
              "name": "Pt3FilterOnOff",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Conveyor:1:C.Pt4FilterOffOn",
              "dataType": "Int2",
              "name": "Pt4FilterOffOn",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Conveyor:1:C.Pt2FilterOnOff",
              "dataType": "Int2",
              "name": "Pt2FilterOnOff",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Conveyor:1:C.Pt7FilterOffOn",
              "dataType": "Int2",
              "name": "Pt7FilterOffOn",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Conveyor:1:C.Pt6FilterOffOn",
              "dataType": "Int2",
              "name": "Pt6FilterOffOn",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            }
          ]
        },
        {
          "name": "Conveyor:2:C",
          "tagType": "Folder",
          "tags": [
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Conveyor:2:C.Pt7ProgValue",
              "dataType": "Boolean",
              "name": "Pt7ProgValue",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Conveyor:2:C.Pt4ProgValue",
              "dataType": "Boolean",
              "name": "Pt4ProgValue",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Conveyor:2:C.Pt1ProgValue",
              "dataType": "Boolean",
              "name": "Pt1ProgValue",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Conveyor:2:C.CfgSize",
              "dataType": "Int4",
              "name": "CfgSize",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Conveyor:2:C.Pt0FaultMode",
              "dataType": "Boolean",
              "name": "Pt0FaultMode",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Conveyor:2:C.Pt6FaultMode",
              "dataType": "Boolean",
              "name": "Pt6FaultMode",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Conveyor:2:C.Pt3ProgMode",
              "dataType": "Boolean",
              "name": "Pt3ProgMode",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Conveyor:2:C.Pad3",
              "dataType": "Int1",
              "name": "Pad3",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Conveyor:2:C.Pt3FaultMode",
              "dataType": "Boolean",
              "name": "Pt3FaultMode",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Conveyor:2:C.ProgMode",
              "dataType": "Int1",
              "name": "ProgMode",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Conveyor:2:C.Pad4",
              "dataType": "Int1",
              "name": "Pad4",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Conveyor:2:C.FaultMode",
              "dataType": "Int1",
              "name": "FaultMode",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Conveyor:2:C.Pt5FaultValue",
              "dataType": "Boolean",
              "name": "Pt5FaultValue",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Conveyor:2:C.Pt6ProgMode",
              "dataType": "Boolean",
              "name": "Pt6ProgMode",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Conveyor:2:C.Pt0FaultValue",
              "dataType": "Boolean",
              "name": "Pt0FaultValue",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Conveyor:2:C.Pt2ProgValue",
              "dataType": "Boolean",
              "name": "Pt2ProgValue",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Conveyor:2:C.FaultValue",
              "dataType": "Int1",
              "name": "FaultValue",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Conveyor:2:C.Pt2FaultValue",
              "dataType": "Boolean",
              "name": "Pt2FaultValue",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Conveyor:2:C.Reserved",
              "dataType": "Int4",
              "name": "Reserved",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Conveyor:2:C.Pt4FaultValue",
              "dataType": "Boolean",
              "name": "Pt4FaultValue",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Conveyor:2:C.Pad1",
              "dataType": "Int1",
              "name": "Pad1",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Conveyor:2:C.CfgIDNum",
              "dataType": "Int4",
              "name": "CfgIDNum",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Conveyor:2:C.Pt6FaultValue",
              "dataType": "Boolean",
              "name": "Pt6FaultValue",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Conveyor:2:C.Pt5FaultMode",
              "dataType": "Boolean",
              "name": "Pt5FaultMode",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Conveyor:2:C.Pt2ProgMode",
              "dataType": "Boolean",
              "name": "Pt2ProgMode",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Conveyor:2:C.Pt6ProgValue",
              "dataType": "Boolean",
              "name": "Pt6ProgValue",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Conveyor:2:C.Pt7FaultValue",
              "dataType": "Boolean",
              "name": "Pt7FaultValue",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Conveyor:2:C.Pt1ProgMode",
              "dataType": "Boolean",
              "name": "Pt1ProgMode",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Conveyor:2:C.Pad2",
              "dataType": "Int1",
              "name": "Pad2",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Conveyor:2:C.Pt0ProgMode",
              "dataType": "Boolean",
              "name": "Pt0ProgMode",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Conveyor:2:C.ProgValue",
              "dataType": "Int1",
              "name": "ProgValue",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Conveyor:2:C.Pt5ProgValue",
              "dataType": "Boolean",
              "name": "Pt5ProgValue",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Conveyor:2:C.Pt1FaultValue",
              "dataType": "Boolean",
              "name": "Pt1FaultValue",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Conveyor:2:C.Pt4ProgMode",
              "dataType": "Boolean",
              "name": "Pt4ProgMode",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Conveyor:2:C.Pt3ProgValue",
              "dataType": "Boolean",
              "name": "Pt3ProgValue",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Conveyor:2:C.Pt7ProgMode",
              "dataType": "Boolean",
              "name": "Pt7ProgMode",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Conveyor:2:C.Pt2FaultMode",
              "dataType": "Boolean",
              "name": "Pt2FaultMode",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Conveyor:2:C.Pt1FaultMode",
              "dataType": "Boolean",
              "name": "Pt1FaultMode",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Conveyor:2:C.Pt7FaultMode",
              "dataType": "Boolean",
              "name": "Pt7FaultMode",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Conveyor:2:C.Pt4FaultMode",
              "dataType": "Boolean",
              "name": "Pt4FaultMode",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Conveyor:2:C.Pt0ProgValue",
              "dataType": "Boolean",
              "name": "Pt0ProgValue",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Conveyor:2:C.Pt3FaultValue",
              "dataType": "Boolean",
              "name": "Pt3FaultValue",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Conveyor:2:C.Pt5ProgMode",
              "dataType": "Boolean",
              "name": "Pt5ProgMode",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            }
          ]
        },
        {
          "valueSource": "opc",
          "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Red_Lamp",
          "dataType": "Boolean",
          "name": "Red_Lamp",
          "tagType": "AtomicTag",
          "opcServer": "Ignition OPC UA Server"
        },
        {
          "valueSource": "opc",
          "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Conveyor:2:O",
          "dataType": "Int1",
          "name": "Conveyor:2:O",
          "tagType": "AtomicTag",
          "opcServer": "Ignition OPC UA Server"
        },
        {
          "name": "DataMan:O",
          "tagType": "Folder",
          "tags": [
            {
              "name": "Control",
              "tagType": "Folder",
              "tags": [
                {
                  "valueSource": "opc",
                  "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]DataMan:O.Control.UserDataLength",
                  "dataType": "Int2",
                  "name": "UserDataLength",
                  "tagType": "AtomicTag",
                  "opcServer": "Ignition OPC UA Server"
                },
                {
                  "valueSource": "opc",
                  "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]DataMan:O.Control.Control",
                  "dataType": "Int2",
                  "name": "Control",
                  "tagType": "AtomicTag",
                  "opcServer": "Ignition OPC UA Server"
                },
                {
                  "valueSource": "opc",
                  "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]DataMan:O.Control.UserDataOption",
                  "dataType": "Int2",
                  "name": "UserDataOption",
                  "tagType": "AtomicTag",
                  "opcServer": "Ignition OPC UA Server"
                },
                {
                  "valueSource": "opc",
                  "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]DataMan:O.Control.TriggerEnable",
                  "dataType": "Boolean",
                  "name": "TriggerEnable",
                  "tagType": "AtomicTag",
                  "opcServer": "Ignition OPC UA Server"
                },
                {
                  "valueSource": "opc",
                  "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]DataMan:O.Control.NotUsed",
                  "dataType": "Int2",
                  "name": "NotUsed",
                  "tagType": "AtomicTag",
                  "opcServer": "Ignition OPC UA Server"
                },
                {
                  "valueSource": "opc",
                  "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]DataMan:O.Control.SetMatchString",
                  "dataType": "Boolean",
                  "name": "SetMatchString",
                  "tagType": "AtomicTag",
                  "opcServer": "Ignition OPC UA Server"
                },
                {
                  "valueSource": "opc",
                  "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]DataMan:O.Control.TrainCode",
                  "dataType": "Boolean",
                  "name": "TrainCode",
                  "tagType": "AtomicTag",
                  "opcServer": "Ignition OPC UA Server"
                },
                {
                  "valueSource": "opc",
                  "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]DataMan:O.Control.Untrain",
                  "dataType": "Boolean",
                  "name": "Untrain",
                  "tagType": "AtomicTag",
                  "opcServer": "Ignition OPC UA Server"
                },
                {
                  "valueSource": "opc",
                  "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]DataMan:O.Control.ExecuteDMCC",
                  "dataType": "Boolean",
                  "name": "ExecuteDMCC",
                  "tagType": "AtomicTag",
                  "opcServer": "Ignition OPC UA Server"
                },
                {
                  "valueSource": "opc",
                  "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]DataMan:O.Control.ResultsAck",
                  "dataType": "Boolean",
                  "name": "ResultsAck",
                  "tagType": "AtomicTag",
                  "opcServer": "Ignition OPC UA Server"
                },
                {
                  "valueSource": "opc",
                  "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]DataMan:O.Control.TrainFocus",
                  "dataType": "Boolean",
                  "name": "TrainFocus",
                  "tagType": "AtomicTag",
                  "opcServer": "Ignition OPC UA Server"
                },
                {
                  "valueSource": "opc",
                  "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]DataMan:O.Control.Trigger",
                  "dataType": "Boolean",
                  "name": "Trigger",
                  "tagType": "AtomicTag",
                  "opcServer": "Ignition OPC UA Server"
                },
                {
                  "valueSource": "opc",
                  "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]DataMan:O.Control.TrainMatchString",
                  "dataType": "Boolean",
                  "name": "TrainMatchString",
                  "tagType": "AtomicTag",
                  "opcServer": "Ignition OPC UA Server"
                },
                {
                  "valueSource": "opc",
                  "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]DataMan:O.Control.ResultsBufferEnable",
                  "dataType": "Boolean",
                  "name": "ResultsBufferEnable",
                  "tagType": "AtomicTag",
                  "opcServer": "Ignition OPC UA Server"
                },
                {
                  "valueSource": "opc",
                  "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]DataMan:O.Control.TrainBrightness",
                  "dataType": "Boolean",
                  "name": "TrainBrightness",
                  "tagType": "AtomicTag",
                  "opcServer": "Ignition OPC UA Server"
                }
              ]
            }
          ]
        },
        {
          "valueSource": "opc",
          "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Conveyor:2:I",
          "dataType": "Int1",
          "name": "Conveyor:2:I",
          "tagType": "AtomicTag",
          "opcServer": "Ignition OPC UA Server"
        },
        {
          "valueSource": "opc",
          "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Direction_HMI",
          "dataType": "Boolean",
          "name": "Direction_HMI",
          "tagType": "AtomicTag",
          "opcServer": "Ignition OPC UA Server"
        },
        {
          "valueSource": "opc",
          "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Start_HMI",
          "dataType": "Boolean",
          "name": "Start_HMI",
          "tagType": "AtomicTag",
          "opcServer": "Ignition OPC UA Server"
        },
        {
          "valueSource": "opc",
          "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]my_string",
          "dataType": "String",
          "name": "my_string",
          "tagType": "AtomicTag",
          "opcServer": "Ignition OPC UA Server"
        },
        {
          "valueSource": "opc",
          "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Stop_HMI",
          "dataType": "Boolean",
          "name": "Stop_HMI",
          "tagType": "AtomicTag",
          "opcServer": "Ignition OPC UA Server"
        },
        {
          "valueSource": "opc",
          "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Running",
          "dataType": "Boolean",
          "name": "Running",
          "tagType": "AtomicTag",
          "opcServer": "Ignition OPC UA Server"
        },
        {
          "name": "Local:2:C",
          "tagType": "Folder",
          "tags": [
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Local:2:C.CfgSize",
              "dataType": "Int4",
              "name": "CfgSize",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Local:2:C.Ch1LowEngineering",
              "dataType": "Int2",
              "name": "Ch1LowEngineering",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Local:2:C.Ch0AlarmDisable",
              "dataType": "Int1",
              "name": "Ch0AlarmDisable",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Local:2:C.Reserved",
              "dataType": "Int4",
              "name": "Reserved",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Local:2:C.RealTimeSample",
              "dataType": "Int2",
              "name": "RealTimeSample",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Local:2:C.Ch0HAlarmLimit",
              "dataType": "Int2",
              "name": "Ch0HAlarmLimit",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Local:2:C.Ch0RangeType",
              "dataType": "Int1",
              "name": "Ch0RangeType",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Local:2:C.Ch1HAlarmLimit",
              "dataType": "Int2",
              "name": "Ch1HAlarmLimit",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Local:2:C.Ch1LAlarmLimit",
              "dataType": "Int2",
              "name": "Ch1LAlarmLimit",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Local:2:C.NotchFilter",
              "dataType": "Int1",
              "name": "NotchFilter",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Local:2:C.Ch0LAlarmLimit",
              "dataType": "Int2",
              "name": "Ch0LAlarmLimit",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Local:2:C.Ch1LLAlarmLimit",
              "dataType": "Int2",
              "name": "Ch1LLAlarmLimit",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Local:2:C.Ch0LimitAlarmLatch",
              "dataType": "Int1",
              "name": "Ch0LimitAlarmLatch",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Local:2:C.CfgIDNum",
              "dataType": "Int4",
              "name": "CfgIDNum",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Local:2:C.Ch1HighEngineering",
              "dataType": "Int2",
              "name": "Ch1HighEngineering",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Local:2:C.Ch0LowEngineering",
              "dataType": "Int2",
              "name": "Ch0LowEngineering",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Local:2:C.Ch1DigitalFilter",
              "dataType": "Int2",
              "name": "Ch1DigitalFilter",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Local:2:C.Ch0DigitalFilter",
              "dataType": "Int2",
              "name": "Ch0DigitalFilter",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Local:2:C.Ch0LLAlarmLimit",
              "dataType": "Int2",
              "name": "Ch0LLAlarmLimit",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Local:2:C.Ch0HHAlarmLimit",
              "dataType": "Int2",
              "name": "Ch0HHAlarmLimit",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Local:2:C.Ch0HighEngineering",
              "dataType": "Int2",
              "name": "Ch0HighEngineering",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Local:2:C.Pad",
              "dataType": "Int1",
              "name": "Pad",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Local:2:C.Ch1AlarmDisable",
              "dataType": "Int1",
              "name": "Ch1AlarmDisable",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Local:2:C.Ch1RangeType",
              "dataType": "Int1",
              "name": "Ch1RangeType",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Local:2:C.Ch1HHAlarmLimit",
              "dataType": "Int2",
              "name": "Ch1HHAlarmLimit",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Local:2:C.Ch1LimitAlarmLatch",
              "dataType": "Int1",
              "name": "Ch1LimitAlarmLatch",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            }
          ]
        },
        {
          "valueSource": "opc",
          "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Red_PB",
          "dataType": "Boolean",
          "name": "Red_PB",
          "tagType": "AtomicTag",
          "opcServer": "Ignition OPC UA Server"
        },
        {
          "name": "DataMan:I",
          "tagType": "Folder",
          "tags": [
            {
              "name": "ResultData",
              "tagType": "Folder",
              "tags": [
                {
                  "valueSource": "opc",
                  "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]DataMan:I.ResultData[14]",
                  "dataType": "Int1",
                  "name": "ResultData_14_",
                  "tagType": "AtomicTag",
                  "opcServer": "Ignition OPC UA Server"
                },
                {
                  "valueSource": "opc",
                  "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]DataMan:I.ResultData[31]",
                  "dataType": "Int1",
                  "name": "ResultData_31_",
                  "tagType": "AtomicTag",
                  "opcServer": "Ignition OPC UA Server"
                },
                {
                  "valueSource": "opc",
                  "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]DataMan:I.ResultData[28]",
                  "dataType": "Int1",
                  "name": "ResultData_28_",
                  "tagType": "AtomicTag",
                  "opcServer": "Ignition OPC UA Server"
                },
                {
                  "valueSource": "opc",
                  "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]DataMan:I.ResultData[20]",
                  "dataType": "Int1",
                  "name": "ResultData_20_",
                  "tagType": "AtomicTag",
                  "opcServer": "Ignition OPC UA Server"
                },
                {
                  "valueSource": "opc",
                  "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]DataMan:I.ResultData[7]",
                  "dataType": "Int1",
                  "name": "ResultData_7_",
                  "tagType": "AtomicTag",
                  "opcServer": "Ignition OPC UA Server"
                },
                {
                  "valueSource": "opc",
                  "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]DataMan:I.ResultData[5]",
                  "dataType": "Int1",
                  "name": "ResultData_5_",
                  "tagType": "AtomicTag",
                  "opcServer": "Ignition OPC UA Server"
                },
                {
                  "valueSource": "opc",
                  "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]DataMan:I.ResultData[0]",
                  "dataType": "Int1",
                  "name": "ResultData_0_",
                  "tagType": "AtomicTag",
                  "opcServer": "Ignition OPC UA Server"
                },
                {
                  "valueSource": "opc",
                  "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]DataMan:I.ResultData[13]",
                  "dataType": "Int1",
                  "name": "ResultData_13_",
                  "tagType": "AtomicTag",
                  "opcServer": "Ignition OPC UA Server"
                },
                {
                  "valueSource": "opc",
                  "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]DataMan:I.ResultData[18]",
                  "dataType": "Int1",
                  "name": "ResultData_18_",
                  "tagType": "AtomicTag",
                  "opcServer": "Ignition OPC UA Server"
                },
                {
                  "valueSource": "opc",
                  "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]DataMan:I.ResultData[17]",
                  "dataType": "Int1",
                  "name": "ResultData_17_",
                  "tagType": "AtomicTag",
                  "opcServer": "Ignition OPC UA Server"
                },
                {
                  "valueSource": "opc",
                  "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]DataMan:I.ResultData[12]",
                  "dataType": "Int1",
                  "name": "ResultData_12_",
                  "tagType": "AtomicTag",
                  "opcServer": "Ignition OPC UA Server"
                },
                {
                  "valueSource": "opc",
                  "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]DataMan:I.ResultData[6]",
                  "dataType": "Int1",
                  "name": "ResultData_6_",
                  "tagType": "AtomicTag",
                  "opcServer": "Ignition OPC UA Server"
                },
                {
                  "valueSource": "opc",
                  "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]DataMan:I.ResultData[4]",
                  "dataType": "Int1",
                  "name": "ResultData_4_",
                  "tagType": "AtomicTag",
                  "opcServer": "Ignition OPC UA Server"
                },
                {
                  "valueSource": "opc",
                  "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]DataMan:I.ResultData[27]",
                  "dataType": "Int1",
                  "name": "ResultData_27_",
                  "tagType": "AtomicTag",
                  "opcServer": "Ignition OPC UA Server"
                },
                {
                  "valueSource": "opc",
                  "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]DataMan:I.ResultData[23]",
                  "dataType": "Int1",
                  "name": "ResultData_23_",
                  "tagType": "AtomicTag",
                  "opcServer": "Ignition OPC UA Server"
                },
                {
                  "valueSource": "opc",
                  "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]DataMan:I.ResultData[26]",
                  "dataType": "Int1",
                  "name": "ResultData_26_",
                  "tagType": "AtomicTag",
                  "opcServer": "Ignition OPC UA Server"
                },
                {
                  "valueSource": "opc",
                  "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]DataMan:I.ResultData[15]",
                  "dataType": "Int1",
                  "name": "ResultData_15_",
                  "tagType": "AtomicTag",
                  "opcServer": "Ignition OPC UA Server"
                },
                {
                  "valueSource": "opc",
                  "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]DataMan:I.ResultData[29]",
                  "dataType": "Int1",
                  "name": "ResultData_29_",
                  "tagType": "AtomicTag",
                  "opcServer": "Ignition OPC UA Server"
                },
                {
                  "valueSource": "opc",
                  "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]DataMan:I.ResultData[10]",
                  "dataType": "Int1",
                  "name": "ResultData_10_",
                  "tagType": "AtomicTag",
                  "opcServer": "Ignition OPC UA Server"
                },
                {
                  "valueSource": "opc",
                  "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]DataMan:I.ResultData[19]",
                  "dataType": "Int1",
                  "name": "ResultData_19_",
                  "tagType": "AtomicTag",
                  "opcServer": "Ignition OPC UA Server"
                },
                {
                  "valueSource": "opc",
                  "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]DataMan:I.ResultData[22]",
                  "dataType": "Int1",
                  "name": "ResultData_22_",
                  "tagType": "AtomicTag",
                  "opcServer": "Ignition OPC UA Server"
                },
                {
                  "valueSource": "opc",
                  "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]DataMan:I.ResultData[25]",
                  "dataType": "Int1",
                  "name": "ResultData_25_",
                  "tagType": "AtomicTag",
                  "opcServer": "Ignition OPC UA Server"
                },
                {
                  "valueSource": "opc",
                  "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]DataMan:I.ResultData[24]",
                  "dataType": "Int1",
                  "name": "ResultData_24_",
                  "tagType": "AtomicTag",
                  "opcServer": "Ignition OPC UA Server"
                },
                {
                  "valueSource": "opc",
                  "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]DataMan:I.ResultData[2]",
                  "dataType": "Int1",
                  "name": "ResultData_2_",
                  "tagType": "AtomicTag",
                  "opcServer": "Ignition OPC UA Server"
                },
                {
                  "valueSource": "opc",
                  "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]DataMan:I.ResultData[9]",
                  "dataType": "Int1",
                  "name": "ResultData_9_",
                  "tagType": "AtomicTag",
                  "opcServer": "Ignition OPC UA Server"
                },
                {
                  "valueSource": "opc",
                  "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]DataMan:I.ResultData[16]",
                  "dataType": "Int1",
                  "name": "ResultData_16_",
                  "tagType": "AtomicTag",
                  "opcServer": "Ignition OPC UA Server"
                },
                {
                  "valueSource": "opc",
                  "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]DataMan:I.ResultData[1]",
                  "dataType": "Int1",
                  "name": "ResultData_1_",
                  "tagType": "AtomicTag",
                  "opcServer": "Ignition OPC UA Server"
                },
                {
                  "valueSource": "opc",
                  "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]DataMan:I.ResultData[21]",
                  "dataType": "Int1",
                  "name": "ResultData_21_",
                  "tagType": "AtomicTag",
                  "opcServer": "Ignition OPC UA Server"
                },
                {
                  "valueSource": "opc",
                  "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]DataMan:I.ResultData[30]",
                  "dataType": "Int1",
                  "name": "ResultData_30_",
                  "tagType": "AtomicTag",
                  "opcServer": "Ignition OPC UA Server"
                },
                {
                  "valueSource": "opc",
                  "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]DataMan:I.ResultData[11]",
                  "dataType": "Int1",
                  "name": "ResultData_11_",
                  "tagType": "AtomicTag",
                  "opcServer": "Ignition OPC UA Server"
                },
                {
                  "valueSource": "opc",
                  "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]DataMan:I.ResultData[3]",
                  "dataType": "Int1",
                  "name": "ResultData_3_",
                  "tagType": "AtomicTag",
                  "opcServer": "Ignition OPC UA Server"
                },
                {
                  "valueSource": "opc",
                  "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]DataMan:I.ResultData[8]",
                  "dataType": "Int1",
                  "name": "ResultData_8_",
                  "tagType": "AtomicTag",
                  "opcServer": "Ignition OPC UA Server"
                }
              ]
            },
            {
              "name": "Status",
              "tagType": "Folder",
              "tags": [
                {
                  "valueSource": "opc",
                  "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]DataMan:I.Status.TrainFocusAck",
                  "dataType": "Boolean",
                  "name": "TrainFocusAck",
                  "tagType": "AtomicTag",
                  "opcServer": "Ignition OPC UA Server"
                },
                {
                  "valueSource": "opc",
                  "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]DataMan:I.Status.TrainCodeAck",
                  "dataType": "Boolean",
                  "name": "TrainCodeAck",
                  "tagType": "AtomicTag",
                  "opcServer": "Ignition OPC UA Server"
                },
                {
                  "valueSource": "opc",
                  "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]DataMan:I.Status.ResultExtended",
                  "dataType": "Int2",
                  "name": "ResultExtended",
                  "tagType": "AtomicTag",
                  "opcServer": "Ignition OPC UA Server"
                },
                {
                  "valueSource": "opc",
                  "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]DataMan:I.Status.ExecuteDmccAck",
                  "dataType": "Boolean",
                  "name": "ExecuteDmccAck",
                  "tagType": "AtomicTag",
                  "opcServer": "Ignition OPC UA Server"
                },
                {
                  "valueSource": "opc",
                  "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]DataMan:I.Status.DecodeCompleted",
                  "dataType": "Boolean",
                  "name": "DecodeCompleted",
                  "tagType": "AtomicTag",
                  "opcServer": "Ignition OPC UA Server"
                },
                {
                  "valueSource": "opc",
                  "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]DataMan:I.Status.ResultsAvailable",
                  "dataType": "Boolean",
                  "name": "ResultsAvailable",
                  "tagType": "AtomicTag",
                  "opcServer": "Ignition OPC UA Server"
                },
                {
                  "valueSource": "opc",
                  "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]DataMan:I.Status.TriggerAck",
                  "dataType": "Boolean",
                  "name": "TriggerAck",
                  "tagType": "AtomicTag",
                  "opcServer": "Ignition OPC UA Server"
                },
                {
                  "valueSource": "opc",
                  "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]DataMan:I.Status.ResultLength",
                  "dataType": "Int2",
                  "name": "ResultLength",
                  "tagType": "AtomicTag",
                  "opcServer": "Ignition OPC UA Server"
                },
                {
                  "valueSource": "opc",
                  "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]DataMan:I.Status.UntrainAck",
                  "dataType": "Boolean",
                  "name": "UntrainAck",
                  "tagType": "AtomicTag",
                  "opcServer": "Ignition OPC UA Server"
                },
                {
                  "valueSource": "opc",
                  "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]DataMan:I.Status.Decoding",
                  "dataType": "Boolean",
                  "name": "Decoding",
                  "tagType": "AtomicTag",
                  "opcServer": "Ignition OPC UA Server"
                },
                {
                  "valueSource": "opc",
                  "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]DataMan:I.Status.TriggerReady",
                  "dataType": "Boolean",
                  "name": "TriggerReady",
                  "tagType": "AtomicTag",
                  "opcServer": "Ignition OPC UA Server"
                },
                {
                  "valueSource": "opc",
                  "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]DataMan:I.Status.ResultsBufferOverrun",
                  "dataType": "Boolean",
                  "name": "ResultsBufferOverrun",
                  "tagType": "AtomicTag",
                  "opcServer": "Ignition OPC UA Server"
                },
                {
                  "valueSource": "opc",
                  "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]DataMan:I.Status.TrainBrightnessAck",
                  "dataType": "Boolean",
                  "name": "TrainBrightnessAck",
                  "tagType": "AtomicTag",
                  "opcServer": "Ignition OPC UA Server"
                },
                {
                  "valueSource": "opc",
                  "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]DataMan:I.Status.ResultCode",
                  "dataType": "Int2",
                  "name": "ResultCode",
                  "tagType": "AtomicTag",
                  "opcServer": "Ignition OPC UA Server"
                },
                {
                  "valueSource": "opc",
                  "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]DataMan:I.Status.NotUsed3",
                  "dataType": "Int2",
                  "name": "NotUsed3",
                  "tagType": "AtomicTag",
                  "opcServer": "Ignition OPC UA Server"
                },
                {
                  "valueSource": "opc",
                  "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]DataMan:I.Status.ResultID",
                  "dataType": "Int2",
                  "name": "ResultID",
                  "tagType": "AtomicTag",
                  "opcServer": "Ignition OPC UA Server"
                },
                {
                  "valueSource": "opc",
                  "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]DataMan:I.Status.NotUsed4",
                  "dataType": "Int2",
                  "name": "NotUsed4",
                  "tagType": "AtomicTag",
                  "opcServer": "Ignition OPC UA Server"
                },
                {
                  "valueSource": "opc",
                  "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]DataMan:I.Status.TriggerID",
                  "dataType": "Int2",
                  "name": "TriggerID",
                  "tagType": "AtomicTag",
                  "opcServer": "Ignition OPC UA Server"
                },
                {
                  "valueSource": "opc",
                  "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]DataMan:I.Status.GeneralFault",
                  "dataType": "Boolean",
                  "name": "GeneralFault",
                  "tagType": "AtomicTag",
                  "opcServer": "Ignition OPC UA Server"
                },
                {
                  "valueSource": "opc",
                  "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]DataMan:I.Status.MissedAcq",
                  "dataType": "Boolean",
                  "name": "MissedAcq",
                  "tagType": "AtomicTag",
                  "opcServer": "Ignition OPC UA Server"
                },
                {
                  "valueSource": "opc",
                  "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]DataMan:I.Status.SetMatchStringAck",
                  "dataType": "Boolean",
                  "name": "SetMatchStringAck",
                  "tagType": "AtomicTag",
                  "opcServer": "Ignition OPC UA Server"
                },
                {
                  "valueSource": "opc",
                  "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]DataMan:I.Status.Status",
                  "dataType": "Int2",
                  "name": "Status",
                  "tagType": "AtomicTag",
                  "opcServer": "Ignition OPC UA Server"
                },
                {
                  "valueSource": "opc",
                  "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]DataMan:I.Status.TrainMatchStringAck",
                  "dataType": "Boolean",
                  "name": "TrainMatchStringAck",
                  "tagType": "AtomicTag",
                  "opcServer": "Ignition OPC UA Server"
                },
                {
                  "valueSource": "opc",
                  "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]DataMan:I.Status.Acquiring",
                  "dataType": "Boolean",
                  "name": "Acquiring",
                  "tagType": "AtomicTag",
                  "opcServer": "Ignition OPC UA Server"
                }
              ]
            }
          ]
        },
        {
          "valueSource": "opc",
          "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]White_PB",
          "dataType": "Boolean",
          "name": "White_PB",
          "tagType": "AtomicTag",
          "opcServer": "Ignition OPC UA Server"
        },
        {
          "name": "Local:3:O",
          "tagType": "Folder",
          "tags": [
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Local:3:O.Ch0Data",
              "dataType": "Int2",
              "name": "Ch0Data",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            },
            {
              "valueSource": "opc",
              "opcItemPath": "ns\u003d1;s\u003d[Instructor PLC2]Local:3:O.Ch1Data",
              "dataType": "Int2",
              "name": "Ch1Data",
              "tagType": "AtomicTag",
              "opcServer": "Ignition OPC UA Server"
            }
          ]
        }
      ]
    }
  ]
}